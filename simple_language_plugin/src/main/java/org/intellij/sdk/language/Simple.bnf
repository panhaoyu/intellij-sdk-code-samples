// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
{
  parserClass="org.intellij.sdk.language.parser.SimpleParser"
  parserUtilClass="org.intellij.sdk.language.parser.SimpleParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Simple"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.sdk.language.psi"
  psiImplPackage="org.intellij.sdk.language.psi.impl"

  elementTypeHolderClass="org.intellij.sdk.language.psi.SimpleTypes"
  elementTypeClass="org.intellij.sdk.language.psi.SimpleElementType"
  tokenTypeClass="org.intellij.sdk.language.psi.SimpleTokenType"

  psiImplUtilClass="org.intellij.sdk.language.psi.impl.SimplePsiImplUtil"
}

simpleFile ::= outerItem*

private outerItem ::= (outer_fish|function_define|comment_block|crlf|command_statement)

private function_define ::= fish define functionName (left_parenthesis parameterList right_parenthesis)? statement_block
private functionName ::= identifier
private parameterList ::= (parameter (comma_operator parameter)* )?
private parameter ::= identifier

private statement_block ::=  single_statement+

private single_statement ::= control_flow | assignment_statement | function_call_statement | comment_block | var_declare_statement | command_statement | identifier
private outer_fish ::=  left_square_bracket single_statement right_square_bracket

private control_flow ::= if_statement | loop_statement | case_statement

private if_statement ::= if expression then statement_block else_if_statement* else_statement? endif
private else_if_statement ::= elseif expression then statement_block
private else_statement ::=  else statement_block

private loop_statement ::= loop statement_block endloop
private case_statement ::= caseof expression case_clause* endcase
private case_clause ::= case expression statement_block

private command_statement ::= command command_body* endcommand
private any_in_command ::= (
    identifier | left_square_bracket | right_square_bracket |
    unary_operator | binary_operator| dot_operator|function_call_operator | literal | ellipsis | keywords_in_command_block
 )
private command_body ::= any_in_command+
private keywords_in_command_block ::= (fish | caseof | case | endcase | define | end | exit | global | if | then |
    elseif | else | endif | local | lock | loop | endloop | continue | return | section | endsection | struct  |)

private assignment_statement ::= identifier assignment_operator expression
private function_call_statement ::= identifier left_parenthesis argument_list right_parenthesis
private argument_list ::= (expression (comma_operator expression)* )?

private local_var_declare_statement ::= local identifier (comma_operator identifier)* (assignment_operator expression)?
private global_var_declare_statement ::= global identifier (comma_operator identifier)* (assignment_operator expression)?
private var_declare_statement ::= local_var_declare_statement | global_var_declare_statement

private expression ::=  binary_expression | unary_expression | name_or_value
private binary_expression ::= name_or_value binary_operator name_or_value
private unary_expression ::= binary_operator expression | name_or_value


private comment_block ::= end_of_line_comment
private  name_or_value ::= identifier | literal

private literal ::= STRING_LITERAL | NUMBER_LITERAL
private end_of_line_comment ::= COMMENT
private binary_operator ::= BINARY_OPERATOR
private unary_operator ::= UNARY_OPERATOR
private assignment_operator ::= ASSIGNMENT_OPERATOR
private crlf ::= CRLF
//noinspection BnfUnusedRule
private keyword ::= KEYWORD

private function_call_operator ::= FUNCTION_CALL_OPERATOR
private comma_operator ::= COMMA_OPERATOR
private dot_operator ::= DOT_OPERATOR

// Bracket Operators
private left_parenthesis ::= LEFT_PARENTHESIS
private right_parenthesis ::= RIGHT_PARENTHESIS
private left_square_bracket ::= LEFT_SQUARE_BRACKET
private right_square_bracket ::= RIGHT_SQUARE_BRACKET
private left_curly_bracket ::= LEFT_CURLY_BRACKET
private right_curly_bracket ::= RIGHT_CURLY_BRACKET
private  identifier ::= IDENTIFIER


property ::= (identifier) {
//  pin=3
  recoverWhile="recover_property"
  mixin="org.intellij.sdk.language.psi.impl.SimpleNamedElementImpl"
  implements="org.intellij.sdk.language.psi.SimpleNamedElement"
  methods=[getKey getValue getName setName getNameIdentifier getPresentation]
}
private recover_property ::= !(IDENTIFIER|COMMENT)


//keywords
private fish ::= FISH
private caseof ::= CASEOF
private case ::= CASE
private endcase ::= ENDCASE
private command ::= COMMAND
private endcommand ::= ENDCOMMAND
private define ::= DEFINE
private end ::= END
private exit ::= EXIT
private global ::= GLOBAL
private if ::= IF
private then ::= THEN
private elseif ::= ELSEIF
private else ::= ELSE
private endif ::= ENDIF
private local ::= LOCAL
private lock ::= LOCK
private loop ::= LOOP
private endloop ::= ENDLOOP
private continue ::= CONTINUE
private return ::= RETURN
private section ::= SECTION
private endsection ::= ENDSECTION
private struct ::= STRUCT
private ellipsis ::=  ELLIPSIS
