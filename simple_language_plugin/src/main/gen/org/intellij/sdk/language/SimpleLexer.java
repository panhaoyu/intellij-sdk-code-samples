// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Simple.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.psi.SimpleTypes;
import com.intellij.psi.TokenType;


class SimpleLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\14\0\2\7\1\0\12\7\1\10\1\11\1\0\1\10"+
    "\36\0\1\12\4\0\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\12\0\1\3\u01a2\0"+
    "\2\3\326\0\u0100\45";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\2\6\25\1"+
    "\1\6\1\1\1\3\2\7\1\3\1\7\1\1\4\0"+
    "\1\6\3\0\1\6\7\0\1\6\47\0\1\6\13\0"+
    "\1\6\3\0\2\6\13\0\1\6\22\0\1\6\17\0"+
    "\1\3\1\2\1\3\42\0\1\6\4\0\1\6\4\0"+
    "\1\6\12\0\1\6\22\0\1\6\1\0\1\6\44\0"+
    "\1\6\5\0\1\6\14\0\1\6\2\0\1\6\27\0"+
    "\1\6\2\0\2\6\45\0\2\6\2\0\1\6\5\0"+
    "\1\6\11\0\1\6\25\0\1\6\33\0\1\6\5\0"+
    "\1\6\55\0\1\6\63\0\1\6\12\0\1\6\2\0"+
    "\1\6\4\0\1\6\4\0\1\6\35\0\1\6\3\0"+
    "\1\6\27\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[618];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\114\0\276\0\344"+
    "\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214"+
    "\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344"+
    "\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474"+
    "\0\u049a\0\u04c0\0\162\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e"+
    "\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae"+
    "\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792\0\114\0\u07b8"+
    "\0\u07de\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8"+
    "\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18"+
    "\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48"+
    "\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78"+
    "\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8"+
    "\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8"+
    "\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2\0\u1008"+
    "\0\u102e\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u1112\0\u1138"+
    "\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242\0\u1268"+
    "\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326\0\u134c\0\u1372\0\u1398"+
    "\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456\0\u147c\0\u14a2\0\u14c8"+
    "\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586\0\u15ac\0\u15d2\0\u15f8"+
    "\0\u161e\0\u1644\0\u166a\0\u1690\0\u16b6\0\u0532\0\u16dc\0\u04e6"+
    "\0\u1702\0\u1728\0\u174e\0\u1774\0\u179a\0\u17c0\0\u17e6\0\u180c"+
    "\0\u1832\0\u1858\0\u187e\0\u18a4\0\u18ca\0\u18f0\0\u1916\0\u193c"+
    "\0\u1962\0\u1988\0\u19ae\0\u19d4\0\u19fa\0\u1a20\0\u1a46\0\u1a6c"+
    "\0\u1a92\0\u1ab8\0\u1ade\0\u1b04\0\u1b2a\0\u1b50\0\u1b76\0\u1b9c"+
    "\0\u1bc2\0\u1be8\0\u1c0e\0\u1c34\0\u1c5a\0\u1c80\0\u1ca6\0\u1ccc"+
    "\0\u1cf2\0\u1d18\0\u1d3e\0\u1d64\0\u1d8a\0\u1db0\0\u1dd6\0\u1dfc"+
    "\0\u1e22\0\u1e48\0\u1e6e\0\u1e94\0\u1eba\0\u1ee0\0\u1f06\0\u1f2c"+
    "\0\u1f52\0\u1f78\0\u1f9e\0\u1fc4\0\u1fea\0\u2010\0\u2036\0\u205c"+
    "\0\u2082\0\u20a8\0\u20ce\0\u20f4\0\u211a\0\u2140\0\u2166\0\u218c"+
    "\0\u21b2\0\u21d8\0\u21fe\0\u2224\0\u224a\0\u2270\0\u2296\0\u22bc"+
    "\0\u22e2\0\u2308\0\u232e\0\u2354\0\u237a\0\u23a0\0\u23c6\0\u23ec"+
    "\0\u2412\0\u2438\0\u245e\0\u2484\0\u24aa\0\u24d0\0\u24f6\0\u251c"+
    "\0\u2542\0\u2568\0\u258e\0\u25b4\0\u25da\0\u2600\0\u2626\0\u264c"+
    "\0\u2672\0\u2698\0\u26be\0\u26e4\0\u270a\0\u2730\0\u2756\0\u277c"+
    "\0\u27a2\0\u27c8\0\u27ee\0\u2814\0\u283a\0\u2860\0\u2886\0\u28ac"+
    "\0\u283a\0\u28d2\0\u28f8\0\u291e\0\u2944\0\u296a\0\u2990\0\u29b6"+
    "\0\u29dc\0\u2a02\0\u2a28\0\u2a4e\0\u2a74\0\u2a9a\0\u2ac0\0\u2ae6"+
    "\0\u2b0c\0\u2b32\0\u2b58\0\u2b7e\0\u2ba4\0\u2bca\0\u2bf0\0\u2c16"+
    "\0\u2c3c\0\u2c62\0\u2c88\0\u2cae\0\u2cd4\0\u2cfa\0\u2d20\0\u2d46"+
    "\0\u2d6c\0\u2d92\0\u2db8\0\u2dde\0\u2e04\0\u2e2a\0\u2e50\0\u2e76"+
    "\0\u2e9c\0\u2ec2\0\u2ee8\0\u2f0e\0\u2f34\0\u2f5a\0\u2f80\0\u2fa6"+
    "\0\u2fcc\0\u2ff2\0\u3018\0\u303e\0\u3064\0\u308a\0\u30b0\0\u30d6"+
    "\0\u30fc\0\u3122\0\u3148\0\u316e\0\u3194\0\u31ba\0\u31e0\0\u3206"+
    "\0\u322c\0\u3252\0\u3278\0\u329e\0\u32c4\0\u32ea\0\u3310\0\u3336"+
    "\0\u335c\0\u3382\0\u0fe2\0\u33a8\0\u1cf2\0\u33ce\0\u33f4\0\u341a"+
    "\0\u3440\0\u3466\0\u348c\0\u34b2\0\u34d8\0\u34fe\0\u3524\0\u354a"+
    "\0\u3570\0\u3596\0\u35bc\0\u35e2\0\u3608\0\u362e\0\u3654\0\u367a"+
    "\0\u36a0\0\u36c6\0\u36ec\0\u3712\0\u3738\0\u375e\0\u3784\0\u37aa"+
    "\0\u37d0\0\u37f6\0\u381c\0\u3842\0\u3868\0\u388e\0\u38b4\0\u38da"+
    "\0\u3900\0\u3926\0\u394c\0\u3972\0\u3998\0\u39be\0\u39e4\0\u3a0a"+
    "\0\u3a30\0\u3a56\0\u3a7c\0\u3aa2\0\u3ac8\0\u3aee\0\u3b14\0\u3b3a"+
    "\0\u3b60\0\u3b86\0\u3bac\0\u3bd2\0\u3bf8\0\u3c1e\0\u3c44\0\u3c6a"+
    "\0\u3c90\0\u3cb6\0\u3cdc\0\u3d02\0\u3d28\0\u3d4e\0\u3d74\0\u3d9a"+
    "\0\u3dc0\0\u3de6\0\u3e0c\0\u3e32\0\u3e58\0\u3e7e\0\u3ea4\0\u3eca"+
    "\0\u0cea\0\u3ef0\0\u3f16\0\u3f3c\0\u3f62\0\u3f88\0\u3310\0\u3fae"+
    "\0\u3fd4\0\u3ffa\0\u4020\0\u4046\0\u406c\0\u4092\0\u40b8\0\u40de"+
    "\0\u4104\0\u412a\0\u4150\0\u4176\0\u419c\0\u41c2\0\u41e8\0\u420e"+
    "\0\u4234\0\u425a\0\u4280\0\u42a6\0\u42cc\0\u42f2\0\u4318\0\u433e"+
    "\0\u4364\0\u438a\0\u43b0\0\u43d6\0\u43fc\0\u4422\0\u4448\0\u446e"+
    "\0\u4494\0\u44ba\0\u44e0\0\u4506\0\u452c\0\u4552\0\u4578\0\u459e"+
    "\0\u45c4\0\u45ea\0\u4610\0\u4636\0\u465c\0\u4682\0\u46a8\0\u46ce"+
    "\0\u46f4\0\u471a\0\u4740\0\u4766\0\u478c\0\u47b2\0\u47d8\0\u47fe"+
    "\0\u4824\0\u484a\0\u4870\0\u4896\0\u48bc\0\u48e2\0\u4908\0\u492e"+
    "\0\u4954\0\u497a\0\u49a0\0\u49c6\0\u49ec\0\u4a12\0\u4a38\0\u4a5e"+
    "\0\u4a84\0\u4aaa\0\u4ad0\0\u4af6\0\u4b1c\0\u4b42\0\u4b68\0\u4b8e"+
    "\0\u4bb4\0\u4bda\0\u4c00\0\u4c26\0\u4c4c\0\u4c72\0\u4c98\0\u4cbe"+
    "\0\u4ce4\0\u4d0a\0\u4d30\0\u4d56\0\u4d7c\0\u4da2\0\u4dc8\0\u4dee"+
    "\0\u4e14\0\u4e3a\0\u4e60\0\u4e86\0\u4eac\0\u4ed2\0\u4ef8\0\u4f1e"+
    "\0\u4f44\0\u4f6a\0\u4f90\0\u4fb6\0\u4fdc\0\u5002\0\u406c\0\u5028"+
    "\0\u504e\0\u5074\0\u509a\0\u057e\0\u50c0\0\u50e6\0\u510c\0\u5132"+
    "\0\u5158\0\u517e\0\u51a4\0\u51ca\0\u51f0\0\u5216\0\u523c\0\u5262"+
    "\0\u5288\0\u52ae\0\u52d4\0\u52fa\0\u5320\0\u5346\0\u536c\0\u5392"+
    "\0\u53b8\0\u53de\0\u5404\0\u542a\0\u5450\0\u5476\0\u549c\0\u54c2"+
    "\0\u54e8\0\u550e\0\u5534\0\u555a\0\u5580\0\u55a6\0\u55cc\0\u55f2"+
    "\0\u5618\0\u563e\0\u3868\0\u5664\0\u568a\0\u56b0\0\u56d6\0\u56fc"+
    "\0\u5722\0\u5748\0\u576e\0\u5794\0\u57ba\0\u57e0\0\u5806\0\u582c"+
    "\0\u5852\0\u5878\0\u589e\0\u58c4\0\u58ea\0\u5910\0\u5936\0\u595c"+
    "\0\u5982\0\u3784";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[618];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\6\4\1\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\3\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\3\1\41\1\42\1\43\1\44\1\43\1\44\1\45"+
    "\3\41\1\46\33\41\47\0\6\4\46\0\1\5\36\0"+
    "\2\7\1\0\2\7\1\0\40\7\15\0\1\47\1\50"+
    "\2\0\1\51\4\0\1\52\1\0\1\53\1\0\1\54"+
    "\1\0\1\55\1\56\1\57\1\60\2\0\1\61\16\0"+
    "\1\62\3\0\1\63\3\0\1\64\5\0\1\65\2\0"+
    "\1\66\6\0\1\67\15\0\1\70\3\0\1\71\2\0"+
    "\1\72\1\73\2\0\1\74\1\75\1\0\1\76\1\77"+
    "\1\0\1\100\1\0\1\101\1\102\3\0\1\103\15\0"+
    "\1\104\3\0\1\105\3\0\1\106\5\0\1\107\2\0"+
    "\1\110\2\0\1\111\23\0\1\112\2\0\1\113\5\0"+
    "\1\114\1\0\1\115\2\0\1\116\1\117\2\0\1\120"+
    "\1\121\1\0\1\122\16\0\1\123\7\0\1\124\2\0"+
    "\1\125\2\0\1\126\2\0\1\127\2\0\1\130\25\0"+
    "\1\131\7\0\1\67\4\0\1\132\24\0\1\133\3\0"+
    "\1\134\3\0\1\135\40\0\1\67\1\0\1\67\6\0"+
    "\1\136\1\137\4\0\1\67\34\0\1\67\51\0\1\67"+
    "\3\0\1\140\1\67\23\0\1\141\7\0\1\142\5\0"+
    "\1\143\27\0\1\144\3\0\1\145\3\0\1\146\5\0"+
    "\1\147\5\0\1\150\24\0\1\67\1\151\6\0\1\67"+
    "\1\0\1\152\1\153\1\67\4\0\1\154\22\0\1\155"+
    "\1\156\2\0\1\157\7\0\1\67\3\0\1\160\2\0"+
    "\1\161\21\0\1\162\1\0\1\163\1\0\1\164\2\0"+
    "\1\165\1\166\2\0\1\167\2\0\1\170\2\0\1\171"+
    "\2\0\1\172\21\0\1\173\1\174\1\67\1\0\1\175"+
    "\1\0\1\176\7\0\1\177\3\0\1\67\23\0\1\200"+
    "\1\0\1\201\1\202\1\203\2\0\1\204\3\0\1\205"+
    "\2\0\1\206\1\207\3\0\1\210\1\211\3\0\1\212"+
    "\15\0\1\213\3\0\1\214\2\0\1\215\1\216\2\0"+
    "\1\67\2\0\1\217\2\0\1\220\6\0\1\221\32\0"+
    "\1\222\1\0\1\223\32\0\1\224\3\0\1\225\3\0"+
    "\1\226\2\0\1\67\26\0\1\227\6\0\1\230\1\231"+
    "\37\0\1\63\1\232\1\0\1\233\16\0\1\234\24\0"+
    "\1\232\1\0\1\233\44\0\1\235\26\0\2\41\1\0"+
    "\1\41\1\0\5\41\1\236\34\41\1\42\1\45\1\237"+
    "\1\45\1\237\1\42\3\41\1\236\34\41\1\240\1\4"+
    "\1\240\1\4\2\240\3\41\1\236\33\41\1\0\2\45"+
    "\1\4\1\45\1\4\1\45\37\0\5\41\1\241\37\41"+
    "\23\0\1\242\13\0\1\243\25\0\1\67\46\0\1\67"+
    "\51\0\1\244\2\0\1\67\12\0\1\245\22\0\1\67"+
    "\2\0\1\246\56\0\1\247\26\0\1\250\3\0\1\67"+
    "\14\0\1\251\46\0\1\252\46\0\1\253\45\0\1\254"+
    "\32\0\1\133\50\0\1\255\6\0\1\51\27\0\1\152"+
    "\56\0\1\67\5\0\1\256\37\0\1\50\11\0\1\67"+
    "\22\0\1\257\3\0\1\260\5\0\1\261\42\0\1\262"+
    "\3\0\1\67\2\0\1\263\36\0\1\264\1\0\1\265"+
    "\54\0\1\266\42\0\1\267\30\0\1\270\11\0\1\271"+
    "\5\0\1\104\21\0\1\163\61\0\1\272\1\273\1\274"+
    "\31\0\1\275\43\0\1\276\3\0\1\277\62\0\1\67"+
    "\25\0\1\300\21\0\1\67\24\0\1\301\10\0\1\302"+
    "\46\0\1\303\36\0\1\304\5\0\1\305\1\0\1\306"+
    "\4\0\1\307\23\0\1\310\13\0\1\133\4\0\1\311"+
    "\1\312\37\0\1\313\61\0\1\67\36\0\1\314\33\0"+
    "\1\275\43\0\1\315\62\0\1\51\26\0\1\316\1\317"+
    "\65\0\1\320\37\0\1\321\42\0\1\322\36\0\1\323"+
    "\51\0\1\163\6\0\1\324\3\0\1\121\32\0\1\325"+
    "\2\0\1\114\45\0\1\326\6\0\1\327\4\0\1\67"+
    "\16\0\1\330\66\0\1\331\24\0\1\332\3\0\1\51"+
    "\3\0\1\333\5\0\1\334\42\0\1\335\1\0\1\333"+
    "\45\0\1\336\1\337\27\0\1\340\15\0\1\341\51\0"+
    "\1\67\33\0\1\342\50\0\1\255\6\0\1\343\42\0"+
    "\1\344\35\0\1\345\1\346\11\0\1\347\1\350\22\0"+
    "\1\250\67\0\1\163\27\0\1\351\10\0\1\352\4\0"+
    "\1\163\23\0\1\50\1\0\1\353\3\0\1\354\7\0"+
    "\1\303\41\0\1\51\10\0\1\355\3\0\1\356\16\0"+
    "\1\357\1\0\1\360\1\361\17\0\1\362\24\0\1\363"+
    "\1\364\45\0\1\365\55\0\1\366\32\0\1\101\25\0"+
    "\1\67\34\0\1\67\51\0\1\367\1\0\1\67\35\0"+
    "\1\255\1\370\54\0\1\371\24\0\1\372\50\0\1\67"+
    "\50\0\1\373\6\0\1\374\51\0\1\375\24\0\1\376"+
    "\21\0\1\114\44\0\1\67\23\0\1\377\17\0\1\u0100"+
    "\24\0\1\114\27\0\1\u0101\34\0\1\u0102\26\0\1\u0103"+
    "\15\0\1\163\37\0\1\323\2\0\1\u0104\5\0\1\u0105"+
    "\1\u0106\27\0\1\u0107\11\0\1\u0108\50\0\1\u0109\27\0"+
    "\1\u010a\11\0\1\u010b\5\0\1\u010c\35\0\1\u010d\40\0"+
    "\1\u010e\4\0\1\u010f\1\u0110\5\0\1\u0111\1\u0112\22\0"+
    "\1\303\70\0\1\u0113\47\0\1\51\20\0\1\246\51\0"+
    "\1\u0114\41\0\1\u0115\1\0\1\u0116\3\0\1\u0117\12\0"+
    "\1\u0118\1\0\1\u0119\22\0\1\u011a\3\0\1\u011b\57\0"+
    "\1\163\42\0\1\200\41\0\1\u011c\1\152\10\0\1\u011d"+
    "\24\0\1\u011e\3\0\1\303\3\0\1\u011f\5\0\1\303"+
    "\2\0\1\u0120\26\0\1\u0121\14\0\1\u0122\50\0\1\u0123"+
    "\24\0\1\246\60\0\1\u0124\1\u0125\34\0\1\u0126\14\0"+
    "\1\u0127\2\0\1\133\35\0\1\u0128\6\0\1\246\35\0"+
    "\1\u0129\56\0\1\u012a\40\0\1\u012b\27\0\1\u012c\6\0"+
    "\1\u012d\12\0\1\u012e\25\0\1\u012f\55\0\1\u0130\5\0"+
    "\1\u0131\24\0\1\67\3\0\1\u0132\41\0\1\u0133\60\0"+
    "\1\u0134\6\0\1\67\27\0\1\152\3\0\1\u0135\60\0"+
    "\1\u0136\32\0\1\u0137\53\0\1\u0138\27\0\1\u0139\66\0"+
    "\1\275\11\0\1\41\1\237\1\4\1\237\1\4\2\237"+
    "\3\41\1\236\37\41\1\0\5\41\1\236\33\41\23\0"+
    "\1\u013a\45\0\1\u013b\43\0\1\u013c\37\0\1\u013d\60\0"+
    "\1\51\45\0\1\u013e\55\0\1\u010c\22\0\1\110\51\0"+
    "\1\u013f\62\0\1\u0140\42\0\1\u0141\42\0\1\67\46\0"+
    "\1\176\31\0\1\u0142\47\0\1\u0143\55\0\1\63\46\0"+
    "\1\u0144\1\67\35\0\1\u0145\51\0\1\u0146\60\0\1\u0147"+
    "\44\0\1\u0148\25\0\1\u0149\43\0\1\u014a\47\0\1\u0143"+
    "\12\0\1\51\44\0\1\u014b\2\0\1\u014c\31\0\1\u014d"+
    "\1\0\1\u014e\14\0\1\u014f\1\u0150\43\0\1\u0151\42\0"+
    "\1\67\31\0\1\u0152\43\0\1\u0153\55\0\1\u0154\50\0"+
    "\1\u012b\42\0\1\u0155\54\0\1\67\26\0\1\u0156\7\0"+
    "\1\u0157\5\0\1\u0158\33\0\1\u0153\63\0\1\u0159\33\0"+
    "\1\u015a\12\0\1\u015b\36\0\1\u015c\35\0\1\333\60\0"+
    "\1\u015d\3\0\1\u015e\22\0\1\u015f\55\0\1\u0160\41\0"+
    "\1\u0161\43\0\1\u0162\5\0\1\u0163\2\0\1\u0164\6\0"+
    "\1\u0165\44\0\1\u0166\34\0\1\u0167\40\0\1\51\46\0"+
    "\1\101\56\0\1\163\30\0\1\u0168\15\0\1\u0169\42\0"+
    "\1\u016a\36\0\1\u016b\50\0\1\u016c\61\0\1\u016d\26\0"+
    "\1\u016e\43\0\1\u016f\3\0\1\u0170\41\0\1\u0116\57\0"+
    "\1\67\14\0\1\63\27\0\1\110\36\0\1\u0171\55\0"+
    "\1\u0172\41\0\1\u0173\14\0\1\u0159\44\0\1\303\27\0"+
    "\1\u0174\62\0\1\u0175\40\0\1\u0169\33\0\1\u0176\64\0"+
    "\1\u0177\32\0\1\321\41\0\1\u0178\11\0\1\67\56\0"+
    "\1\u0179\22\0\1\u017a\41\0\1\u017b\52\0\1\u017c\44\0"+
    "\1\u017d\51\0\1\u017e\52\0\1\67\4\0\1\u016a\32\0"+
    "\1\u017f\46\0\1\u0180\44\0\1\u0181\57\0\1\u0182\27\0"+
    "\1\246\46\0\1\255\17\0\1\u0183\44\0\1\u0184\36\0"+
    "\1\u0185\32\0\1\322\44\0\1\u0186\71\0\1\u0187\27\0"+
    "\1\u015f\46\0\1\u0188\42\0\1\101\15\0\1\347\35\0"+
    "\1\u0189\34\0\1\u018a\1\u018b\50\0\1\u018c\2\0\1\u018d"+
    "\57\0\1\u018e\27\0\1\133\56\0\1\51\5\0\1\63"+
    "\52\0\1\u018f\33\0\1\306\37\0\1\u0190\57\0\1\u0191"+
    "\31\0\1\u0192\2\0\1\u0193\5\0\1\u0194\7\0\1\u0195"+
    "\24\0\1\51\47\0\1\u0196\40\0\1\u0197\2\0\1\51"+
    "\47\0\1\275\53\0\1\260\37\0\1\u0198\35\0\1\u0199"+
    "\15\0\1\u019a\45\0\1\u019b\37\0\1\u019c\5\0\1\u019d"+
    "\4\0\1\u019e\1\u019f\45\0\1\u01a0\21\0\1\u01a1\72\0"+
    "\1\67\43\0\1\314\45\0\1\u01a2\36\0\1\u01a3\56\0"+
    "\1\275\37\0\1\51\26\0\1\101\51\0\1\u01a4\45\0"+
    "\1\u019a\47\0\1\51\6\0\1\u01a5\3\0\1\163\1\0"+
    "\1\u01a6\27\0\1\u01a7\40\0\1\u015f\3\0\1\u01a8\43\0"+
    "\1\u01a9\62\0\1\u01aa\51\0\1\u01ab\41\0\1\u01ac\50\0"+
    "\1\u017c\33\0\1\101\4\0\1\67\46\0\1\u01ad\33\0"+
    "\1\u01ae\45\0\1\u01af\45\0\1\67\10\0\1\u01b0\34\0"+
    "\1\u01b1\57\0\1\u01b2\45\0\1\152\37\0\1\255\35\0"+
    "\1\u01b3\63\0\1\u01b4\52\0\1\u01b5\50\0\1\67\46\0"+
    "\1\67\31\0\1\u01b1\34\0\1\u01b6\10\0\1\51\41\0"+
    "\1\u01b7\60\0\1\u01b8\44\0\1\u01b9\41\0\1\u01ba\34\0"+
    "\1\u01bb\66\0\1\u01bc\35\0\1\u01bd\60\0\1\133\25\0"+
    "\1\u01be\51\0\1\u01bf\41\0\1\u01c0\51\0\1\u01c1\43\0"+
    "\1\u01c2\45\0\1\67\34\0\1\u01c3\2\0\1\50\57\0"+
    "\1\u0163\27\0\1\u01c4\51\0\1\u01c5\51\0\1\u01c6\50\0"+
    "\1\51\10\0\1\u01c7\36\0\1\67\3\0\1\67\24\0"+
    "\1\u0168\66\0\1\u01c8\2\0\1\u0153\31\0\1\u0116\45\0"+
    "\1\u01c9\60\0\1\u01ca\22\0\1\u01cb\7\0\1\u01cc\40\0"+
    "\1\u01cd\54\0\1\u01b1\56\0\1\51\24\0\1\67\60\0"+
    "\1\u01ce\54\0\1\u019f\36\0\1\51\51\0\1\u01cf\34\0"+
    "\1\u01d0\56\0\1\u01bd\45\0\1\u01d1\30\0\1\u01d2\54\0"+
    "\1\u01d3\53\0\1\u01d4\34\0\1\152\52\0\1\u01d5\32\0"+
    "\1\u0199\43\0\1\114\15\0\1\u01d6\45\0\1\u01d7\35\0"+
    "\1\110\52\0\1\u01d8\47\0\1\50\51\0\1\163\50\0"+
    "\1\u01a4\36\0\1\u01d9\32\0\1\u01da\4\0\1\u01db\47\0"+
    "\1\u01dc\34\0\1\u01dd\70\0\1\u01de\36\0\1\121\52\0"+
    "\1\277\30\0\1\u01df\56\0\1\u01b1\37\0\1\163\54\0"+
    "\1\u01e0\50\0\1\u01e1\34\0\1\u01e2\56\0\1\u01e3\34\0"+
    "\1\67\35\0\1\u01e4\60\0\1\u01e5\42\0\1\246\56\0"+
    "\1\u01e6\40\0\1\u01e7\31\0\1\u01e8\45\0\1\152\63\0"+
    "\1\50\45\0\1\u01e9\42\0\1\u01ea\42\0\1\u01eb\35\0"+
    "\1\255\55\0\1\u013c\56\0\1\u015a\24\0\1\u01ec\45\0"+
    "\1\u0109\60\0\1\u0102\32\0\1\u01ed\63\0\1\u01ee\45\0"+
    "\1\u01ef\37\0\1\u01f0\40\0\1\u01f1\2\0\1\u012d\62\0"+
    "\1\u01f2\44\0\1\u016a\44\0\1\u01f3\30\0\1\u01f4\45\0"+
    "\1\u01f5\51\0\1\u01f6\35\0\1\255\23\0\1\133\37\0"+
    "\1\u01f7\45\0\1\152\3\0\1\u01d2\46\0\1\u01f8\22\0"+
    "\1\50\72\0\1\u01f9\23\0\1\u01fa\55\0\1\u01fb\50\0"+
    "\1\u01a4\2\0\1\u01fc\37\0\1\163\53\0\1\152\47\0"+
    "\1\u01fd\32\0\1\u012d\41\0\1\u01fe\62\0\1\51\27\0"+
    "\1\u01ff\46\0\1\67\3\0\1\u0154\42\0\1\u0200\55\0"+
    "\1\u0201\4\0\1\u0202\27\0\1\u0203\62\0\1\u0204\30\0"+
    "\1\u01f7\54\0\1\277\56\0\1\u0205\37\0\1\u0206\3\0"+
    "\1\u0207\44\0\1\u0208\26\0\1\277\60\0\1\u0209\53\0"+
    "\1\u01f9\24\0\1\u0159\53\0\1\u020a\44\0\1\67\55\0"+
    "\1\u020b\30\0\1\51\74\0\1\u020c\41\0\1\u01bd\20\0"+
    "\1\u0153\3\0\1\67\45\0\1\50\43\0\1\u020d\44\0"+
    "\1\u020e\45\0\1\u020f\44\0\1\u0210\45\0\1\u0109\21\0"+
    "\1\67\23\0\1\260\62\0\1\u0211\51\0\1\u01b1\36\0"+
    "\1\u020c\47\0\1\u0212\35\0\1\u0213\56\0\1\u0214\51\0"+
    "\1\u0215\26\0\1\u0216\60\0\1\u0217\40\0\1\u0218\40\0"+
    "\1\322\56\0\1\u0219\54\0\1\110\40\0\1\110\52\0"+
    "\1\322\22\0\1\u021a\55\0\1\u021b\43\0\1\67\53\0"+
    "\1\u021c\47\0\1\303\37\0\1\u021d\35\0\1\u021e\45\0"+
    "\1\u021f\45\0\1\u019f\63\0\1\u0220\31\0\1\u01b6\67\0"+
    "\1\u0221\44\0\1\u01e0\43\0\1\110\34\0\1\u0222\35\0"+
    "\1\u0223\62\0\1\u0185\7\0\1\u0185\41\0\1\u0224\27\0"+
    "\1\u0225\52\0\1\u0185\61\0\1\u01f7\36\0\1\u018e\52\0"+
    "\1\u0226\47\0\1\133\40\0\1\335\43\0\1\u0227\43\0"+
    "\1\u0228\53\0\1\u0229\27\0\1\300\44\0\1\u0185\53\0"+
    "\1\u022a\45\0\1\u022b\35\0\1\u01f7\47\0\1\163\64\0"+
    "\1\u01d0\40\0\1\u0159\45\0\1\67\41\0\1\200\41\0"+
    "\1\u022c\65\0\1\u0185\45\0\1\u0116\21\0\1\u0220\51\0"+
    "\1\67\3\0\1\u022d\52\0\1\u022e\30\0\1\u022f\62\0"+
    "\1\u0204\36\0\1\u0230\61\0\1\u0231\45\0\1\u0232\27\0"+
    "\1\u0233\47\0\1\u0234\63\0\1\163\44\0\1\u0235\22\0"+
    "\1\u0236\50\0\1\u0227\44\0\1\u0102\56\0\1\u0237\56\0"+
    "\1\u0180\21\0\1\u0116\60\0\1\u01f9\56\0\1\u0153\44\0"+
    "\1\300\30\0\1\u0238\44\0\1\u0239\62\0\1\u023a\27\0"+
    "\1\u0170\65\0\1\u01f4\44\0\1\u023b\46\0\1\51\36\0"+
    "\1\u020d\30\0\1\u023c\7\0\1\u0160\37\0\1\u0214\25\0"+
    "\1\u01bd\16\0\1\u023d\60\0\1\u014b\32\0\1\u023e\60\0"+
    "\1\51\44\0\1\255\42\0\1\323\56\0\1\u023f\47\0"+
    "\1\u0208\35\0\1\335\51\0\1\u0240\36\0\1\101\60\0"+
    "\1\u0241\24\0\1\u0242\57\0\1\314\53\0\1\u0243\41\0"+
    "\1\152\6\0\1\51\36\0\1\u0244\52\0\1\133\43\0"+
    "\1\50\47\0\1\u0245\51\0\1\u0133\1\110\37\0\1\u0246"+
    "\45\0\1\133\32\0\1\u0247\42\0\1\303\56\0\1\u01b9"+
    "\30\0\1\u0248\50\0\1\u0249\46\0\1\u024a\63\0\1\u01a2"+
    "\30\0\1\233\6\0\1\u024b\32\0\1\u024c\70\0\1\u024d"+
    "\42\0\1\u024e\30\0\1\u024f\42\0\1\u0250\65\0\1\u0251"+
    "\50\0\1\u01ac\40\0\1\u0252\43\0\1\u0253\37\0\1\u01b1"+
    "\43\0\1\u0254\46\0\1\u0255\41\0\1\u0214\53\0\1\u0256"+
    "\56\0\1\u0257\42\0\1\u0258\37\0\1\u0259\60\0\1\u025a"+
    "\32\0\1\u01e7\40\0\1\67\16\0\1\67\41\0\1\u0168"+
    "\53\0\1\u025b\25\0\1\u025c\65\0\1\255\37\0\1\314"+
    "\44\0\1\u025d\34\0\1\u025e\44\0\1\u025f\10\0\1\121"+
    "\44\0\1\u0159\36\0\1\67\3\0\1\u012d\37\0\1\u0260"+
    "\64\0\1\114\32\0\1\u0261\54\0\1\u0262\34\0\1\u0263"+
    "\64\0\1\u0264\52\0\1\u0179\40\0\1\u01e6\35\0\1\u0265"+
    "\56\0\1\u0266\35\0\1\u0267\52\0\1\u0185\30\0\1\u0268"+
    "\43\0\1\u0269\52\0\1\u026a\23\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[22952];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\40\1\4\0\1\1\3\0"+
    "\1\1\7\0\1\11\47\0\1\1\13\0\1\1\3\0"+
    "\2\1\13\0\1\1\22\0\1\1\17\0\3\1\42\0"+
    "\1\1\4\0\1\1\4\0\1\1\12\0\1\1\22\0"+
    "\1\1\1\0\1\1\44\0\1\1\5\0\1\1\14\0"+
    "\1\1\2\0\1\1\27\0\1\1\2\0\2\1\45\0"+
    "\2\1\2\0\1\1\5\0\1\1\11\0\1\1\25\0"+
    "\1\1\33\0\1\1\5\0\1\1\55\0\1\1\63\0"+
    "\1\1\12\0\1\1\2\0\1\1\4\0\1\1\4\0"+
    "\1\1\35\0\1\1\3\0\1\1\27\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[618];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SimpleLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 8: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 9: break;
          case 3:
            { yybegin(YYINITIAL); return SimpleTypes.VALUE;
            }
          // fall through
          case 10: break;
          case 4:
            { yybegin(WAITING_VALUE); return SimpleTypes.SEPARATOR;
            }
          // fall through
          case 11: break;
          case 5:
            { yybegin(YYINITIAL); return SimpleTypes.COMMENT;
            }
          // fall through
          case 12: break;
          case 6:
            { yybegin(YYINITIAL); return SimpleTypes.KEY;
            }
          // fall through
          case 13: break;
          case 7:
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
