// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
{
  parserClass="org.intellij.sdk.language.parser.SimpleParser"
  parserUtilClass="org.intellij.sdk.language.parser.SimpleParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Simple"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.sdk.language.psi"
  psiImplPackage="org.intellij.sdk.language.psi.impl"

  elementTypeHolderClass="org.intellij.sdk.language.psi.SimpleTypes"
  elementTypeClass="org.intellij.sdk.language.psi.SimpleElementType"
  tokenTypeClass="org.intellij.sdk.language.psi.SimpleTokenType"

  psiImplUtilClass="org.intellij.sdk.language.psi.impl.SimplePsiImplUtil"
}

simpleFile ::= outerItem*

private outerItem ::= (outerScopeStatement|functionDefinition|multilineComment|separator|crlf|commandStatement)

private functionDefinition ::= 'fish' 'define' functionName (left_parenthesis parameterList right_parenthesis)? controlStructure
private functionName ::= identifier
private parameterList ::= (parameter (comma_operator parameter)* )?
private parameter ::= identifier

private controlStructure ::= statementBlock
private statementBlock ::=  statement*

private statement ::= controlFlow | assignment | functionCall | multilineComment | variableDeclaration | commandStatement
private outerScopeStatement ::=  left_square_bracket statement right_square_bracket

private controlFlow ::= ifStatement | loopStatement | caseStatement

private ifStatement ::= 'if' expression 'then' statementBlock elseIfStatement* elseStatement? 'end_if'
private elseIfStatement ::= 'else' 'if' expression 'then' statementBlock
private elseStatement ::=  'else' statementBlock

private loopStatement ::= 'loop' statementBlock 'end_loop'
private caseStatement ::= 'case_of' expression caseClause* 'end_case'
private caseClause ::= 'case' expression statementBlock

private commandStatement ::= 'command' commandBlock* 'endcommand'
private anyInCommand ::= identifier | left_square_bracket | right_square_bracket | unary_operator | binary_operator| dot_operator|function_call_operator | literal | '-' | '...'
private commandBlock ::= anyInCommand+

private assignment ::= identifier '=' expression
private functionCall ::= identifier '(' argumentList ')'
private argumentList ::= (expression (',' expression)* )?

private localVariableDeclaration ::= 'local' identifier (',' identifier)* ('=' expression)?
private globalVariableDeclaration ::= 'global' identifier (',' identifier)* ('=' expression)?
private  variableDeclaration ::= localVariableDeclaration | globalVariableDeclaration

private expression ::= binaryExpression | unaryExpression | literal | identifier
private binaryExpression ::= expression binary_operator expression
private unaryExpression ::= binary_operator expression | variableDeclaration


private multilineComment ::= comment (crlf* comment)*

private literal ::= STRING_LITERAL | NUMBER_LITERAL
private comment ::= COMMENT
private binary_operator ::= BINARY_OPERATOR
private unary_operator ::= UNARY_OPERATOR
private assignment_operator ::= ASSIGNMENT_OPERATOR
private crlf ::= CRLF
//noinspection BnfUnusedRule
private keyword ::= KEYWORD

private function_call_operator ::= Function_Call_Operator
private comma_operator ::= Comma_Operator
private dot_operator ::= Dot_Operator

// Bracket Operators
private left_parenthesis ::= Left_Parenthesis
private right_parenthesis ::=  Right_Parenthesis
private left_square_bracket ::= Left_Square_Bracket
private right_square_bracket::= Right_Square_Bracket
private left_curly_bracket ::= Left_Curly_Bracket
private right_curly_bracket ::= Right_Curly_Bracket

private  identifier ::= IDENTIFIER


property ::= (identifier) {
//  pin=3
  recoverWhile="recover_property"
  mixin="org.intellij.sdk.language.psi.impl.SimpleNamedElementImpl"
  implements="org.intellij.sdk.language.psi.SimpleNamedElement"
  methods=[getKey getValue getName setName getNameIdentifier getPresentation]
}
private recover_property ::= !(KEY|SEPARATOR|COMMENT)
