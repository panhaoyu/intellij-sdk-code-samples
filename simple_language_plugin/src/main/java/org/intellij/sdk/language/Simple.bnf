// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
{
  parserClass="org.intellij.sdk.language.parser.SimpleParser"
  parserUtilClass="org.intellij.sdk.language.parser.SimpleParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Simple"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.sdk.language.psi"
  psiImplPackage="org.intellij.sdk.language.psi.impl"

  elementTypeHolderClass="org.intellij.sdk.language.psi.SimpleTypes"
  elementTypeClass="org.intellij.sdk.language.psi.SimpleElementType"
  tokenTypeClass="org.intellij.sdk.language.psi.SimpleTokenType"

  psiImplUtilClass="org.intellij.sdk.language.psi.impl.SimplePsiImplUtil"

  tokens = [
    space="regexp: +"
    NEWLINE='regexp:(\R( \t)*)'
//
//    FISH="fish"
//    DEFINE="define"
//    END="end"
//    CASEOF="caseof"
//    CASE="case"
//    ENDCASE="endcase"
//    COMMAND="command"
//    ENDCOMMAND="endcommand"
//    EXIT="exit"
//    ELLIPSIS="..."
//    GLOBAL="global"
//    LOCAL="local"
//    IF="if"
//    THEN="then"
//    ELSEIF="else if"
//    ELSE="else"
//    ENDIF="endif"
//    LOCK="lock"
//    LOOP="loop"
//    FOREACH="foreach"
//    ENDLOOP="endloop"
//    CONTINUE="continue"
//    BREAK="break"
//    WHILE="while"
//    FOR="for"
//    RETURN="return"
//    SECTION="section"
//    ENDSECTION="endsection"
//    STRUCT="struct"
//    ARRAY="[Aa]rray"
//
//    STRING_LITERAL="\".*?\""
//    NUMBER_LITERAL="[0-9][0-9*](\.[0-9])?"
//    COMMENT=";.*?"
//    ASSIGNMENT_OPERATOR="="
//    FUNCTION_CALL_OPERATOR="@"
//    COMMA_OPERATOR=","
//    DOT_OPERATOR="."
//    LEFT_PARENTHESIS="("
//    RIGHT_PARENTHESIS=")"
//    LEFT_SQUARE_BRACKET="["
//    RIGHT_SQUARE_BRACKET="]"
//    LEFT_CURLY_BRACKET="{"
//    RIGHT_CURLY_BRACKET="}"
//
//    identifier="regexp:[a-zA-Z_][a-zA-Z0-9_]*"
  ]
}

simpleFile ::= (eol? cmd_block)* eol?

//前缀为cmd的均表示作用于command作用域中
cmd_block ::= (
    cmd_stat_inline_fish |
    block_define |
    cmd_stat_func_call |
    cmd_stat_other
)
cmd_stat_inline_fish ::= cmd_expr_inline_fish
cmd_stat_other ::= cmd_tk_all+
private cmd_tk_all ::= (
     square_l | square_r | paren_l | paren_r | op_comma | op_assign | op_unary | op_binary| op_dot | op_at |
     tk_literal | cmd_tk_kw_all | tk_identifier
 )
private cmd_tk_kw_all ::= (kw_fish | kw_case_of | kw_case | kw_end_case | kw_def | kw_end | kw_exit | kw_global | kw_if | kw_then |
    kw_else_if | kw_else | kw_end_if | kw_local | kw_lock | kw_loop | kw_endloop | kw_continue | kw_return | kw_section | kw_end_section | kw_struct )
cmd_stat_func_call ::= cmd_expr_func_call
private cmd_expr_func_call ::= op_at tk_identifier expr_paren_csv?
private cmd_expr_inline_fish ::= square_l stat_fish square_r


block_define ::= (define_header (eol block_fish)? eol kw_end) {
    methods=[getName getPresentation]
}
define_header ::= kw_fish? kw_def tk_identifier define_params?
private define_params ::= (paren_l tk_identifier (op_comma tk_identifier)* paren_r)

block_fish ::=  block_single_fish (eol block_single_fish)*
block_single_fish ::= block_if | block_loop | block_case_of | block_section | block_cmd | stat_fish

block_if ::= kw_if expr kw_then?
             (eol block_fish)?
             (eol block_else_if)*
             (eol block_else)?
             eol kw_end_if
block_else_if ::= kw_else_if expr kw_then? (eol block_fish)?
block_else ::=  kw_else (eol block_fish)?

block_loop ::= block_header_loop (eol block_fish)? eol kw_endloop
block_header_loop ::= kw_loop (loop_each | loop_indexed | loop_for | loop_while)
private loop_indexed ::= assign_left_for_loop loop_indexed_range
private loop_indexed_range ::=
    paren_l expr op_comma
    expr (op_comma expr)? paren_r
private loop_while ::= kw_while expr
private loop_each ::= kw_foreach assign_left_for_loop expr
private loop_for ::= kw_for paren_l kw_local? expr op_comma expr op_comma expr paren_r


block_case_of ::= kw_case_of expr (eol block_fish)? (eol block_case_option)* eol kw_end_case
block_case_option ::= kw_case expr (eol block_fish)?

block_section ::= kw_section (eol block_fish)? eol kw_end_section

block_cmd ::= kw_command (eol body_cmd)? eol kw_end_command
body_cmd ::= cmd_stat_other (eol cmd_stat_other)*

stat_fish ::= (
    stat_array_declare |
    stat_assign |
    expr |
    kw_break |
    kw_continue |
    kw_exit |
    kw_exit_section
    )



stat_assign ::= (kw_local | kw_global)? expr_assign (op_comma expr_assign)*
private stat_array_declare ::= kw_array tk_identifier paren_l literal_number paren_r
private expr_assign ::= assign_target assign_right?
private assign_target ::= tk_identifier expr_paren_csv?
private assign_right ::= op_assign expr
private assign_left_for_loop ::= kw_local? tk_identifier


private expr ::= (square_l expr_binary square_r) |  expr_binary
private expr_paren ::= paren_l expr paren_r
private expr_func_call ::= tk_identifier expr_paren_csv
private expr_csv ::= expr (op_comma expr)*
private expr_paren_csv ::= paren_l expr_csv paren_r


private expr_binary ::= expr_non_binary (op_binary expr_non_binary)*
private expr_non_binary ::=  expr_paren | expr_func_call | expr_unary | tk_value
private expr_unary ::= op_unary expr

////词汇之间的组合
tk_value ::= tk_identifier | tk_literal
tk_literal ::= literal_string | literal_number
tk_identifier ::= IDENTIFIER {
////  pin=3
//  recoverWhile="recover_property"
  mixin="org.intellij.sdk.language.psi.impl.SimpleNamedElementImpl"
  implements="org.intellij.sdk.language.psi.SimpleNamedElement"
  methods=[getName setName getNameIdentifier getPresentation getReference getReferences getTextOffset]
}
//
//property ::= (tk_identifier) {
////  pin=3
//  recoverWhile="recover_property"
//  mixin="org.intellij.sdk.language.psi.impl.SimpleNamedElementImpl"
//  implements="org.intellij.sdk.language.psi.SimpleNamedElement"
//  methods=[getName setName getNameIdentifier getPresentation]
//}
//private recover_property ::= !(tk_identifier)
//



//以下为读取的原始token
private literal_string ::=  STRING_LITERAL
private literal_number ::= NUMBER_LITERAL
private op_binary ::= BINARY_OPERATOR | MINUS_OPERATOR | ASSIGNMENT_OPERATOR
private op_unary ::= UNARY_OPERATOR | MINUS_OPERATOR
private op_assign ::= ASSIGNMENT_OPERATOR
eol ::= ( NEWLINE | COMMENT )+

private op_at ::= FUNCTION_CALL_OPERATOR
private op_comma ::= COMMA_OPERATOR
private op_dot ::= DOT_OPERATOR

// Bracket Operators
private paren_l ::= LEFT_PARENTHESIS
private paren_r ::= RIGHT_PARENTHESIS
private square_l ::= LEFT_SQUARE_BRACKET
private square_r ::= RIGHT_SQUARE_BRACKET
private curly_l ::= LEFT_CURLY_BRACKET
private curly_r ::= RIGHT_CURLY_BRACKET

//keywords
private kw_fish ::= FISH
private kw_def ::= DEFINE
private kw_end ::= END

private kw_case_of ::= CASEOF
private kw_case ::= CASE
private kw_end_case ::= ENDCASE

private kw_command ::= COMMAND
private kw_end_command ::= ENDCOMMAND

private kw_exit ::= EXIT

private kw_global ::= GLOBAL
private kw_local ::= LOCAL

private kw_if ::= IF
private kw_then ::= THEN
private kw_else_if ::= ELSEIF | (kw_else kw_if)
private kw_else ::= ELSE
private kw_end_if ::= ENDIF

private kw_lock ::= LOCK

private kw_loop ::= LOOP
private kw_foreach ::= FOREACH
private kw_endloop ::= ENDLOOP
private kw_continue ::= CONTINUE
private kw_break ::= BREAK | (kw_exit kw_loop)
private kw_while ::= WHILE
private kw_for ::= FOR

private kw_return ::= RETURN

private kw_section ::= SECTION
private kw_end_section ::= ENDSECTION
private kw_exit_section ::= EXITSECTION

private kw_struct ::= STRUCT
private kw_array ::= ARRAY
