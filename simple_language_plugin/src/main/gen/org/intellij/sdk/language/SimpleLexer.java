// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Simple.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.intellij.sdk.language;

import com.intellij.formatting.WhiteSpace;import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import groovyjarjarantlr.Token;import org.bouncycastle.pqc.jcajce.interfaces.SABERKey;
import org.intellij.sdk.language.psi.SimpleTypes;
import com.intellij.psi.TokenType;


class SimpleLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u5100\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100\1\u5500"+
    "\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00"+
    "\1\u5900\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\42\u1f00"+
    "\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000\24\u1f00\1\u6100\1\u6200"+
    "\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600\2\u1f00\1\u6700\5\u1f00"+
    "\1\u6800\1\u6900\1\u6a00\5\u1f00\1\u6b00\1\u6c00\2\u1f00\1\u6d00"+
    "\1\u1f00\1\u6e00\14\u1f00\1\u6f00\4\u1f00\246\u0100\1\u7000\20\u0100"+
    "\1\u7100\1\u7200\25\u0100\1\u7300\34\u0100\1\u7400\14\u1f00\2\u0100"+
    "\1\u7500\5\u1f00\23\u0100\1\u7600\u0aec\u1f00\1\u7700\1\u7800\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\3\1\5\1\6\1\7\1\10\1\6\1\11"+
    "\1\12\1\13\2\10\1\14\1\15\1\16\1\17\12\20"+
    "\1\3\1\21\1\22\1\23\1\24\1\3\1\25\4\7"+
    "\1\26\25\7\1\27\1\3\1\30\1\6\1\31\1\3"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\7\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\7\1\51\1\52\1\53\1\54\2\7\1\55\2\7"+
    "\1\56\1\6\1\57\1\60\41\0\2\3\4\7\4\3"+
    "\1\7\2\3\1\0\7\3\1\7\4\3\1\7\5\3"+
    "\27\7\1\3\37\7\1\3\u01ca\7\4\3\14\7\16\3"+
    "\5\7\7\3\1\7\1\3\1\7\21\3\160\0\5\7"+
    "\1\3\2\7\2\3\4\7\1\3\1\7\6\3\1\7"+
    "\1\3\3\7\1\3\1\7\1\3\24\7\1\3\123\7"+
    "\1\3\213\7\1\3\5\0\2\3\246\7\1\3\46\7"+
    "\2\3\1\7\6\3\51\7\6\3\1\7\1\3\55\0"+
    "\1\3\1\0\1\3\2\0\1\3\2\0\1\3\1\0"+
    "\10\3\33\7\4\3\4\7\15\3\6\0\5\3\1\7"+
    "\4\3\13\0\1\3\1\0\3\3\53\7\37\0\4\3"+
    "\2\7\1\0\143\7\1\3\1\7\10\0\1\3\6\0"+
    "\2\7\2\0\1\3\4\0\2\7\12\0\3\7\2\3"+
    "\1\7\17\3\1\0\1\7\1\0\36\7\33\0\2\3"+
    "\131\7\13\0\1\7\16\3\12\0\41\7\11\0\2\7"+
    "\4\3\1\7\2\3\1\0\30\7\4\0\1\7\11\0"+
    "\1\7\3\0\1\7\5\0\22\3\31\7\3\0\4\3"+
    "\13\7\65\3\25\7\1\3\22\7\13\3\61\0\66\7"+
    "\3\0\1\7\22\0\1\7\7\0\12\7\2\0\2\3"+
    "\12\0\1\3\20\7\3\0\1\3\10\7\2\3\2\7"+
    "\2\3\26\7\1\3\7\7\1\3\1\7\3\3\4\7"+
    "\2\3\1\0\1\7\7\0\2\3\2\0\2\3\3\0"+
    "\1\7\10\3\1\0\4\3\2\7\1\3\3\7\2\0"+
    "\2\3\12\0\4\7\7\3\2\7\1\3\1\0\2\3"+
    "\3\0\1\3\6\7\4\3\2\7\2\3\26\7\1\3"+
    "\7\7\1\3\2\7\1\3\2\7\1\3\2\7\2\3"+
    "\1\0\1\3\5\0\4\3\2\0\2\3\3\0\3\3"+
    "\1\0\7\3\4\7\1\3\1\7\7\3\14\0\3\7"+
    "\1\0\13\3\3\0\1\3\11\7\1\3\3\7\1\3"+
    "\26\7\1\3\7\7\1\3\2\7\1\3\5\7\2\3"+
    "\1\0\1\7\10\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\7\17\3\2\7\2\0\2\3\12\0\1\3\1\7"+
    "\7\3\1\7\6\0\1\3\3\0\1\3\10\7\2\3"+
    "\2\7\2\3\26\7\1\3\7\7\1\3\2\7\1\3"+
    "\5\7\2\3\1\0\1\7\7\0\2\3\2\0\2\3"+
    "\3\0\7\3\3\0\4\3\2\7\1\3\3\7\2\0"+
    "\2\3\12\0\1\3\1\7\20\3\1\0\1\7\1\3"+
    "\6\7\3\3\3\7\1\3\4\7\3\3\2\7\1\3"+
    "\1\7\1\3\2\7\3\3\2\7\3\3\3\7\3\3"+
    "\14\7\4\3\5\0\3\3\3\0\1\3\4\0\2\3"+
    "\1\7\6\3\1\0\16\3\12\0\11\3\1\7\6\3"+
    "\5\0\10\7\1\3\3\7\1\3\27\7\1\3\20\7"+
    "\3\3\1\7\7\0\1\3\3\0\1\3\4\0\7\3"+
    "\2\0\1\3\3\7\5\3\2\7\2\0\2\3\12\0"+
    "\20\3\1\7\3\0\1\3\10\7\1\3\3\7\1\3"+
    "\27\7\1\3\12\7\1\3\5\7\2\3\1\0\1\7"+
    "\7\0\1\3\3\0\1\3\4\0\7\3\2\0\7\3"+
    "\1\7\1\3\2\7\2\0\2\3\12\0\1\3\2\7"+
    "\15\3\4\0\11\7\1\3\3\7\1\3\51\7\2\0"+
    "\1\7\7\0\1\3\3\0\1\3\4\0\1\7\5\3"+
    "\3\7\1\0\7\3\3\7\2\0\2\3\12\0\12\3"+
    "\6\7\1\3\3\0\1\3\22\7\3\3\30\7\1\3"+
    "\11\7\1\3\1\7\2\3\7\7\3\3\1\0\4\3"+
    "\6\0\1\3\1\0\1\3\10\0\6\3\12\0\2\3"+
    "\2\0\15\3\60\7\1\0\2\7\7\0\4\3\10\7"+
    "\10\0\1\3\12\0\47\3\2\7\1\3\1\7\1\3"+
    "\5\7\1\3\30\7\1\3\1\7\1\3\12\7\1\0"+
    "\2\7\11\0\1\7\2\3\5\7\1\3\1\7\1\3"+
    "\6\0\2\3\12\0\2\3\4\7\40\3\1\7\27\3"+
    "\2\0\6\3\12\0\13\3\1\0\1\3\1\0\1\3"+
    "\1\0\4\3\2\0\10\7\1\3\44\7\4\3\24\0"+
    "\1\3\2\0\5\7\13\0\1\3\44\0\11\3\1\0"+
    "\71\3\53\7\24\0\1\7\12\0\6\3\6\7\4\0"+
    "\4\7\3\0\1\7\3\0\2\7\7\0\3\7\4\0"+
    "\15\7\14\0\1\7\17\0\2\3\46\7\1\3\1\7"+
    "\5\3\1\7\2\3\53\7\1\3\115\7\1\3\4\7"+
    "\2\3\7\7\1\3\1\7\1\3\4\7\2\3\51\7"+
    "\1\3\4\7\2\3\41\7\1\3\4\7\2\3\7\7"+
    "\1\3\1\7\1\3\4\7\2\3\17\7\1\3\71\7"+
    "\1\3\4\7\2\3\103\7\2\3\3\0\40\3\20\7"+
    "\20\3\126\7\2\3\6\7\3\3\u016c\7\2\3\21\7"+
    "\1\3\32\7\5\3\113\7\3\3\13\7\7\3\15\7"+
    "\1\3\4\7\3\0\13\3\22\7\3\0\13\3\22\7"+
    "\2\0\14\3\15\7\1\3\3\7\1\3\2\0\14\3"+
    "\64\7\40\0\3\3\1\7\3\3\2\7\1\0\2\3"+
    "\12\0\41\3\4\0\1\3\12\0\6\3\131\7\7\3"+
    "\5\7\2\0\42\7\1\0\1\7\5\3\106\7\12\3"+
    "\37\7\1\3\14\0\4\3\14\0\12\3\12\0\36\7"+
    "\2\3\5\7\13\3\54\7\4\3\32\7\6\3\12\0"+
    "\46\3\27\7\5\0\4\3\65\7\12\0\1\3\35\0"+
    "\2\3\13\0\6\3\12\0\15\3\1\7\10\3\16\0"+
    "\1\3\2\0\77\3\5\0\57\7\21\0\7\7\4\3"+
    "\12\0\21\3\11\0\14\3\3\0\36\7\15\0\2\7"+
    "\12\0\54\7\16\0\14\3\44\7\24\0\10\3\12\0"+
    "\3\3\3\7\12\0\44\7\2\3\11\7\7\3\53\7"+
    "\2\3\3\7\20\3\3\0\1\3\25\0\4\7\1\0"+
    "\6\7\1\0\2\7\3\0\1\7\5\3\300\7\72\0"+
    "\1\3\5\0\26\7\2\3\6\7\2\3\46\7\2\3"+
    "\6\7\2\3\10\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\37\7\2\3\65\7\1\3\7\7\1\3"+
    "\1\7\3\3\3\7\1\3\7\7\3\3\4\7\2\3"+
    "\6\7\4\3\15\7\5\3\3\7\1\3\7\7\16\3"+
    "\5\0\32\3\5\0\20\3\2\7\23\3\1\7\13\3"+
    "\5\0\1\3\12\0\1\3\1\7\15\3\1\7\20\3"+
    "\15\7\3\3\40\7\20\3\15\0\4\3\1\0\3\3"+
    "\14\0\21\3\1\7\4\3\1\7\2\3\12\7\1\3"+
    "\1\7\3\3\5\7\6\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\4\7\1\3\13\7\2\3\4\7\5\3"+
    "\5\7\4\3\1\7\21\3\51\7\u0177\3\57\7\1\3"+
    "\57\7\1\3\205\7\6\3\4\7\3\0\2\7\14\3"+
    "\46\7\1\3\1\7\5\3\1\7\2\3\70\7\7\3"+
    "\1\7\17\3\1\0\27\7\11\3\7\7\1\3\7\7"+
    "\1\3\7\7\1\3\7\7\1\3\7\7\1\3\7\7"+
    "\1\3\7\7\1\3\7\7\1\3\40\0\57\3\1\7"+
    "\325\3\3\7\31\3\11\7\6\0\1\3\5\7\2\3"+
    "\5\7\4\3\126\7\2\3\2\0\2\3\3\7\1\3"+
    "\132\7\1\3\4\7\5\3\53\7\1\3\136\7\21\3"+
    "\40\7\60\3\320\7\100\3\375\7\3\3\215\7\103\3"+
    "\56\7\2\3\15\7\3\3\20\7\12\0\2\7\24\3"+
    "\57\7\1\0\4\3\12\0\1\3\37\7\2\0\120\7"+
    "\2\0\45\3\11\7\2\3\147\7\2\3\65\7\2\3"+
    "\11\7\52\3\15\7\1\0\3\7\1\0\4\7\1\0"+
    "\27\7\5\0\4\3\1\0\13\3\1\7\7\3\64\7"+
    "\14\3\2\0\62\7\22\0\12\3\12\0\6\3\22\0"+
    "\6\7\3\3\1\7\1\3\2\7\13\0\34\7\10\0"+
    "\2\3\27\7\15\0\14\3\35\7\3\3\4\0\57\7"+
    "\16\0\16\3\1\7\12\0\6\3\5\7\1\0\12\7"+
    "\12\0\5\7\1\3\51\7\16\0\11\3\3\7\1\0"+
    "\10\7\2\0\2\3\12\0\6\3\27\7\3\3\1\7"+
    "\3\0\62\7\1\0\1\7\3\0\2\7\2\0\5\7"+
    "\2\0\1\7\1\0\1\7\30\3\3\7\2\3\13\7"+
    "\5\0\2\3\3\7\2\0\12\3\6\7\2\3\6\7"+
    "\2\3\6\7\11\3\7\7\1\3\7\7\1\3\53\7"+
    "\1\3\16\7\6\3\163\7\10\0\1\3\2\0\2\3"+
    "\12\0\6\3\244\7\14\3\27\7\4\3\61\7\4\3"+
    "\156\7\2\3\152\7\46\3\7\7\14\3\5\7\5\3"+
    "\1\7\1\0\12\7\1\3\15\7\1\3\5\7\1\3"+
    "\1\7\1\3\2\7\1\3\2\7\1\3\154\7\41\3"+
    "\153\7\22\3\100\7\2\3\66\7\50\3\15\7\3\3"+
    "\20\0\20\3\20\0\3\3\2\7\30\3\3\7\31\3"+
    "\1\7\6\3\5\7\1\3\207\7\2\3\1\0\4\3"+
    "\1\7\13\3\12\0\7\3\32\7\4\3\1\7\1\3"+
    "\32\7\13\3\131\7\3\3\6\7\2\3\6\7\2\3"+
    "\6\7\2\3\3\7\3\3\2\7\3\3\2\7\22\3"+
    "\3\0\4\3\14\7\1\3\32\7\1\3\23\7\1\3"+
    "\2\7\1\3\17\7\2\3\16\7\42\3\173\7\105\3"+
    "\65\7\210\3\1\0\202\3\35\7\3\3\61\7\17\3"+
    "\1\0\37\3\40\7\15\3\36\7\5\3\46\7\5\0"+
    "\5\3\36\7\2\3\44\7\4\3\10\7\1\3\5\7"+
    "\52\3\236\7\2\3\12\0\6\3\44\7\4\3\44\7"+
    "\4\3\50\7\10\3\64\7\234\3\67\7\11\3\26\7"+
    "\12\3\10\7\230\3\6\7\2\3\1\7\1\3\54\7"+
    "\1\3\2\7\3\3\1\7\2\3\27\7\12\3\27\7"+
    "\11\3\37\7\101\3\23\7\1\3\2\7\12\3\26\7"+
    "\12\3\32\7\106\3\70\7\6\3\2\7\100\3\1\7"+
    "\3\0\1\3\2\0\5\3\4\0\4\7\1\3\3\7"+
    "\1\3\35\7\2\3\3\0\4\3\1\0\40\3\35\7"+
    "\3\3\35\7\43\3\10\7\1\3\34\7\2\0\31\3"+
    "\66\7\12\3\26\7\12\3\23\7\15\3\22\7\156\3"+
    "\111\7\67\3\63\7\15\3\63\7\15\3\44\7\4\0"+
    "\10\3\12\0\u0146\3\52\7\1\3\2\0\3\3\2\7"+
    "\116\3\35\7\12\3\1\7\10\3\26\7\13\0\137\3"+
    "\25\7\33\3\27\7\11\3\3\0\65\7\17\0\37\3"+
    "\12\0\17\3\4\0\55\7\13\0\2\3\1\0\17\3"+
    "\1\0\2\3\31\7\7\3\12\0\6\3\3\0\44\7"+
    "\16\0\1\3\12\0\4\3\1\7\2\0\1\7\10\3"+
    "\43\7\1\0\2\3\1\7\11\3\3\0\60\7\16\0"+
    "\4\7\4\3\4\0\1\3\14\0\1\7\1\3\1\7"+
    "\43\3\22\7\1\3\31\7\14\0\6\3\1\0\101\3"+
    "\7\7\1\3\1\7\1\3\4\7\1\3\17\7\1\3"+
    "\12\7\7\3\57\7\14\0\5\3\12\0\6\3\4\0"+
    "\1\3\10\7\2\3\2\7\2\3\26\7\1\3\7\7"+
    "\1\3\2\7\1\3\5\7\1\3\2\0\1\7\7\0"+
    "\2\3\2\0\2\3\3\0\2\3\1\7\6\3\1\0"+
    "\5\3\5\7\2\0\2\3\7\0\3\3\5\0\213\3"+
    "\65\7\22\0\4\7\5\3\12\0\4\3\1\0\3\7"+
    "\36\3\60\7\24\0\2\7\1\3\1\7\10\3\12\0"+
    "\246\3\57\7\7\0\2\3\11\0\27\3\4\7\2\0"+
    "\42\3\60\7\21\0\3\3\1\7\13\3\12\0\46\3"+
    "\53\7\15\0\1\7\7\3\12\0\66\3\33\7\2\3"+
    "\17\0\4\3\12\0\306\3\54\7\17\0\145\3\100\7"+
    "\12\0\25\3\10\7\2\3\1\7\2\3\10\7\1\3"+
    "\2\7\1\3\30\7\6\0\1\3\2\0\2\3\4\0"+
    "\1\7\1\0\1\7\2\0\14\3\12\0\106\3\10\7"+
    "\2\3\47\7\7\0\2\3\7\0\1\7\1\3\1\7"+
    "\1\0\33\3\1\7\12\0\50\7\7\0\1\7\4\0"+
    "\10\3\1\0\10\3\1\7\13\0\56\7\20\0\3\3"+
    "\1\7\42\3\71\7\7\3\11\7\1\3\45\7\10\0"+
    "\1\3\10\0\1\7\17\3\12\0\30\3\36\7\2\3"+
    "\26\0\1\3\16\0\111\3\7\7\1\3\2\7\1\3"+
    "\46\7\6\0\3\3\1\0\1\3\2\0\1\3\7\0"+
    "\1\7\1\0\10\3\12\0\6\3\6\7\1\3\2\7"+
    "\1\3\40\7\5\0\1\3\2\0\1\3\5\0\1\7"+
    "\7\3\12\0\u0136\3\23\7\4\0\271\3\1\7\54\3"+
    "\4\7\37\3\232\7\146\3\157\7\21\3\304\7\274\3"+
    "\57\7\1\3\11\0\307\3\107\7\271\3\71\7\7\3"+
    "\37\7\1\3\12\0\146\3\36\7\2\3\5\0\13\3"+
    "\60\7\7\0\11\3\4\7\14\3\12\0\11\3\25\7"+
    "\5\3\23\7\260\3\100\7\200\3\113\7\4\3\1\0"+
    "\1\7\67\0\7\3\4\0\15\7\100\3\2\7\1\3"+
    "\1\7\1\0\13\3\2\0\16\3\370\7\10\3\326\7"+
    "\52\3\11\7\367\3\37\7\61\3\3\7\21\3\4\7"+
    "\10\3\u018c\7\4\3\153\7\5\3\15\7\3\3\11\7"+
    "\7\3\12\7\3\3\2\0\1\3\4\0\301\3\5\0"+
    "\3\3\26\0\2\3\7\0\36\3\4\0\224\3\3\0"+
    "\273\3\125\7\1\3\107\7\1\3\2\7\2\3\1\7"+
    "\2\3\2\7\2\3\4\7\1\3\14\7\1\3\1\7"+
    "\1\3\7\7\1\3\101\7\1\3\4\7\2\3\10\7"+
    "\1\3\7\7\1\3\34\7\1\3\4\7\1\3\5\7"+
    "\1\3\1\7\3\3\7\7\1\3\u0154\7\2\3\31\7"+
    "\1\3\31\7\1\3\37\7\1\3\31\7\1\3\37\7"+
    "\1\3\31\7\1\3\37\7\1\3\31\7\1\3\37\7"+
    "\1\3\31\7\1\3\10\7\2\3\151\0\4\3\62\0"+
    "\10\3\1\0\16\3\1\0\26\3\5\0\1\3\17\0"+
    "\120\3\7\0\1\3\21\0\2\3\7\0\1\3\2\0"+
    "\1\3\5\0\325\3\55\7\3\3\7\0\7\7\2\3"+
    "\12\0\4\3\1\7\u0171\3\54\7\16\0\5\3\306\7"+
    "\13\3\7\0\51\3\104\7\7\0\1\7\4\3\12\0"+
    "\u0156\3\1\7\117\3\4\7\1\3\33\7\1\3\2\7"+
    "\1\3\1\7\2\3\1\7\1\3\12\7\1\3\4\7"+
    "\1\3\1\7\1\3\1\7\6\3\1\7\4\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\3\7\1\3\2\7"+
    "\1\3\1\7\2\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\2\7\1\3\1\7"+
    "\2\3\4\7\1\3\7\7\1\3\4\7\1\3\4\7"+
    "\1\3\1\7\1\3\12\7\1\3\21\7\5\3\3\7"+
    "\1\3\5\7\1\3\21\7\u0134\3\12\0\6\3\336\7"+
    "\42\3\65\7\13\3\336\7\2\3\u0182\7\16\3\u0131\7"+
    "\37\3\36\7\342\3\113\7\266\3\1\0\36\3\140\0"+
    "\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30976];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\1\4\1\5\1\4"+
    "\1\1\1\6\1\7\1\10\1\11\1\12\1\4\1\13"+
    "\1\3\1\4\1\14\1\15\1\16\1\17\12\5\1\20"+
    "\1\21\1\22\1\0\1\23\1\14\3\0\2\3\11\5"+
    "\1\24\5\5\1\25\1\0\1\13\5\5\1\26\12\5"+
    "\2\2\1\27\3\5\1\30\5\5\1\31\1\32\3\5"+
    "\1\33\1\34\3\5\1\35\11\5\1\36\5\5\1\37"+
    "\3\5\1\40\2\5\1\41\1\42\5\5\1\43\1\44"+
    "\1\5\1\45\1\46\1\5\1\47\1\5\1\50\1\5"+
    "\1\51\1\52\1\5\1\53\5\5\1\45\1\54\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\142\0\u0126"+
    "\0\u0157\0\u0188\0\142\0\142\0\142\0\u01b9\0\u01ea\0\u021b"+
    "\0\u024c\0\u027d\0\u02ae\0\u02ae\0\142\0\142\0\142\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\142\0\142\0\142\0\365\0\142\0\142\0\u0188"+
    "\0\u04c9\0\u04fa\0\142\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef"+
    "\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0126\0\u0715\0\u0746"+
    "\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u083b\0\u086c\0\u089d"+
    "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25"+
    "\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\142\0\u0b7c"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04"+
    "\0\u0d35\0\u0d66\0\u0d97\0\u0126\0\u0dc8\0\u0df9\0\u0e2a\0\u0126"+
    "\0\u0126\0\u0e5b\0\u0e8c\0\u0ebd\0\u0126\0\u0eee\0\u0f1f\0\u0f50"+
    "\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u0126\0\u10a7"+
    "\0\u10d8\0\u1109\0\u113a\0\u116b\0\u0126\0\u119c\0\u11cd\0\u11fe"+
    "\0\u0126\0\u122f\0\u1260\0\u0126\0\u0126\0\u1291\0\u12c2\0\u12f3"+
    "\0\u1324\0\u1355\0\u0126\0\u0126\0\u1386\0\u13b7\0\u0126\0\u13e8"+
    "\0\u0126\0\u1419\0\u0126\0\u144a\0\u0126\0\u0126\0\u147b\0\u0126"+
    "\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u0126\0\u0126\0\u0126";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\23\1\25\1\10\1\26"+
    "\1\27\3\10\1\30\1\31\1\32\1\33\1\34\1\10"+
    "\1\35\1\10\1\36\4\10\1\37\1\40\1\41\2\10"+
    "\1\42\1\43\1\44\61\3\62\0\1\4\61\0\1\5"+
    "\1\0\1\5\54\0\5\45\1\46\53\45\1\10\6\0"+
    "\1\10\6\0\1\10\1\0\1\10\5\0\1\10\2\0"+
    "\25\10\26\0\1\47\35\0\11\50\1\46\47\50\23\0"+
    "\1\47\1\7\52\0\1\51\61\0\1\7\3\0\1\47"+
    "\53\0\1\21\1\0\1\21\5\0\1\52\7\0\1\52"+
    "\22\0\2\22\1\53\1\22\1\54\54\22\23\0\1\7"+
    "\35\0\1\10\6\0\1\10\6\0\1\10\1\0\1\10"+
    "\5\0\1\10\2\0\1\10\1\55\14\10\1\56\6\10"+
    "\3\0\1\10\6\0\1\10\6\0\1\10\1\0\1\10"+
    "\5\0\1\10\2\0\5\10\1\57\17\10\3\0\1\10"+
    "\6\0\1\10\6\0\1\10\1\0\1\10\5\0\1\10"+
    "\2\0\13\10\1\60\1\10\1\61\6\10\1\62\3\0"+
    "\1\10\6\0\1\10\6\0\1\10\1\0\1\10\5\0"+
    "\1\10\2\0\11\10\1\63\4\10\1\64\6\10\3\0"+
    "\1\10\6\0\1\10\6\0\1\10\1\0\1\10\5\0"+
    "\1\10\2\0\13\10\1\65\11\10\3\0\1\10\6\0"+
    "\1\10\6\0\1\10\1\0\1\10\5\0\1\10\2\0"+
    "\6\10\1\66\16\10\3\0\1\10\6\0\1\10\6\0"+
    "\1\10\1\0\1\10\5\0\1\10\2\0\16\10\1\67"+
    "\6\10\3\0\1\10\6\0\1\10\6\0\1\10\1\0"+
    "\1\10\5\0\1\10\2\0\5\10\1\70\17\10\3\0"+
    "\1\10\6\0\1\10\6\0\1\10\1\0\1\10\5\0"+
    "\1\10\2\0\5\10\1\71\14\10\1\72\2\10\3\0"+
    "\1\10\6\0\1\10\6\0\1\10\1\0\1\10\5\0"+
    "\1\10\2\0\10\10\1\73\14\10\21\0\1\74\57\0"+
    "\1\75\2\0\1\76\42\0\1\53\56\0\1\10\6\0"+
    "\1\10\6\0\1\10\1\0\1\10\5\0\1\10\2\0"+
    "\21\10\1\77\3\10\3\0\1\10\6\0\1\10\6\0"+
    "\1\10\1\0\1\10\5\0\1\10\2\0\14\10\1\100"+
    "\1\101\7\10\3\0\1\10\6\0\1\10\6\0\1\10"+
    "\1\0\1\10\5\0\1\10\2\0\6\10\1\102\16\10"+
    "\3\0\1\10\6\0\1\10\6\0\1\10\1\0\1\10"+
    "\5\0\1\10\2\0\21\10\1\103\3\10\3\0\1\10"+
    "\6\0\1\10\6\0\1\10\1\0\1\10\5\0\1\10"+
    "\2\0\4\10\1\104\20\10\3\0\1\10\6\0\1\10"+
    "\6\0\1\10\1\0\1\10\5\0\1\10\2\0\11\10"+
    "\1\105\13\10\3\0\1\10\6\0\1\10\6\0\1\10"+
    "\1\0\1\10\5\0\1\10\2\0\21\10\1\106\3\10"+
    "\3\0\1\10\6\0\1\10\6\0\1\10\1\0\1\10"+
    "\5\0\1\10\2\0\20\10\1\107\4\10\3\0\1\10"+
    "\6\0\1\10\6\0\1\10\1\0\1\10\5\0\1\10"+
    "\2\0\16\10\1\110\6\10\3\0\1\10\6\0\1\10"+
    "\6\0\1\10\1\0\1\10\5\0\1\10\2\0\3\10"+
    "\1\111\12\10\1\112\6\10\3\0\1\10\6\0\1\10"+
    "\6\0\1\10\1\0\1\10\5\0\1\10\2\0\22\10"+
    "\1\113\2\10\3\0\1\10\6\0\1\10\6\0\1\10"+
    "\1\0\1\10\5\0\1\10\2\0\3\10\1\114\21\10"+
    "\3\0\1\10\6\0\1\10\6\0\1\10\1\0\1\10"+
    "\5\0\1\10\2\0\20\10\1\115\4\10\3\0\1\10"+
    "\6\0\1\10\6\0\1\10\1\0\1\10\5\0\1\10"+
    "\2\0\5\10\1\116\17\10\5\0\1\117\1\0\1\120"+
    "\74\0\1\76\40\0\1\10\6\0\1\10\6\0\1\10"+
    "\1\0\1\10\5\0\1\10\2\0\5\10\1\121\17\10"+
    "\3\0\1\10\6\0\1\10\6\0\1\10\1\0\1\10"+
    "\5\0\1\10\2\0\14\10\1\122\10\10\3\0\1\10"+
    "\6\0\1\10\6\0\1\10\1\0\1\10\5\0\1\10"+
    "\2\0\22\10\1\123\2\10\3\0\1\10\6\0\1\10"+
    "\6\0\1\10\1\0\1\10\5\0\1\10\2\0\11\10"+
    "\1\124\13\10\3\0\1\10\6\0\1\10\6\0\1\10"+
    "\1\0\1\10\5\0\1\10\2\0\5\10\1\125\17\10"+
    "\3\0\1\10\6\0\1\10\6\0\1\10\1\0\1\10"+
    "\5\0\1\10\2\0\1\126\2\10\1\127\5\10\1\130"+
    "\1\10\1\131\5\10\1\132\3\10\3\0\1\10\6\0"+
    "\1\10\6\0\1\10\1\0\1\10\5\0\1\10\2\0"+
    "\22\10\1\133\2\10\3\0\1\10\6\0\1\10\6\0"+
    "\1\10\1\0\1\10\5\0\1\10\2\0\10\10\1\134"+
    "\14\10\3\0\1\10\6\0\1\10\6\0\1\10\1\0"+
    "\1\10\5\0\1\10\2\0\5\10\1\135\17\10\3\0"+
    "\1\10\6\0\1\10\6\0\1\10\1\0\1\10\5\0"+
    "\1\10\2\0\2\10\1\136\22\10\3\0\1\10\6\0"+
    "\1\10\6\0\1\10\1\0\1\10\5\0\1\10\2\0"+
    "\1\10\1\137\10\10\1\140\12\10\3\0\1\10\6\0"+
    "\1\10\6\0\1\10\1\0\1\10\5\0\1\10\2\0"+
    "\17\10\1\141\5\10\3\0\1\10\6\0\1\10\6\0"+
    "\1\10\1\0\1\10\5\0\1\10\2\0\23\10\1\142"+
    "\1\10\3\0\1\10\6\0\1\10\6\0\1\10\1\0"+
    "\1\10\5\0\1\10\2\0\22\10\1\143\2\10\3\0"+
    "\1\10\6\0\1\10\6\0\1\10\1\0\1\10\5\0"+
    "\1\10\2\0\23\10\1\144\1\10\3\0\1\10\6\0"+
    "\1\10\6\0\1\10\1\0\1\10\5\0\1\10\2\0"+
    "\15\10\1\145\7\10\5\0\1\117\56\0\1\10\6\0"+
    "\1\10\6\0\1\10\1\0\1\10\5\0\1\10\2\0"+
    "\1\146\15\10\1\147\6\10\3\0\1\10\6\0\1\10"+
    "\6\0\1\10\1\0\1\10\5\0\1\10\2\0\1\10"+
    "\1\150\23\10\3\0\1\10\6\0\1\10\6\0\1\10"+
    "\1\0\1\10\5\0\1\10\2\0\11\10\1\151\13\10"+
    "\3\0\1\10\6\0\1\10\6\0\1\10\1\0\1\10"+
    "\5\0\1\10\2\0\15\10\1\152\7\10\3\0\1\10"+
    "\6\0\1\10\6\0\1\10\1\0\1\10\5\0\1\10"+
    "\2\0\1\153\10\10\1\154\13\10\3\0\1\10\6\0"+
    "\1\10\6\0\1\10\1\0\1\10\5\0\1\10\2\0"+
    "\3\10\1\127\5\10\1\130\1\10\1\131\5\10\1\132"+
    "\3\10\3\0\1\10\6\0\1\10\6\0\1\10\1\0"+
    "\1\10\5\0\1\10\2\0\1\10\1\155\14\10\1\156"+
    "\6\10\3\0\1\10\6\0\1\10\6\0\1\10\1\0"+
    "\1\10\5\0\1\10\2\0\6\10\1\157\16\10\3\0"+
    "\1\10\6\0\1\10\6\0\1\10\1\0\1\10\5\0"+
    "\1\10\2\0\16\10\1\160\6\10\3\0\1\10\6\0"+
    "\1\10\6\0\1\10\1\0\1\10\5\0\1\10\2\0"+
    "\5\10\1\161\17\10\3\0\1\10\6\0\1\10\6\0"+
    "\1\10\1\0\1\10\5\0\1\10\2\0\1\162\12\10"+
    "\1\131\5\10\1\132\3\10\3\0\1\10\6\0\1\10"+
    "\6\0\1\10\1\0\1\10\5\0\1\10\2\0\1\10"+
    "\1\163\23\10\3\0\1\10\6\0\1\10\6\0\1\10"+
    "\1\0\1\10\5\0\1\10\2\0\1\10\1\164\23\10"+
    "\3\0\1\10\6\0\1\10\6\0\1\10\1\0\1\10"+
    "\5\0\1\10\2\0\13\10\1\165\11\10\3\0\1\10"+
    "\6\0\1\10\6\0\1\10\1\0\1\10\5\0\1\10"+
    "\2\0\20\10\1\166\4\10\3\0\1\10\6\0\1\10"+
    "\6\0\1\10\1\0\1\10\5\0\1\10\2\0\11\10"+
    "\1\167\13\10\3\0\1\10\6\0\1\10\6\0\1\10"+
    "\1\0\1\10\5\0\1\10\2\0\3\10\1\170\21\10"+
    "\3\0\1\10\6\0\1\10\6\0\1\10\1\0\1\10"+
    "\5\0\1\10\2\0\16\10\1\147\6\10\3\0\1\10"+
    "\6\0\1\10\6\0\1\10\1\0\1\10\5\0\1\10"+
    "\2\0\6\10\1\171\16\10\3\0\1\10\6\0\1\10"+
    "\6\0\1\10\1\0\1\10\5\0\1\10\2\0\15\10"+
    "\1\172\7\10\3\0\1\10\6\0\1\10\6\0\1\10"+
    "\1\0\1\10\5\0\1\10\2\0\15\10\1\173\7\10"+
    "\3\0\1\10\6\0\1\10\6\0\1\10\1\0\1\10"+
    "\5\0\1\10\2\0\5\10\1\174\17\10\3\0\1\10"+
    "\6\0\1\10\6\0\1\10\1\0\1\10\5\0\1\10"+
    "\2\0\11\10\1\154\13\10\3\0\1\10\6\0\1\10"+
    "\6\0\1\10\1\0\1\10\5\0\1\10\2\0\6\10"+
    "\1\175\16\10\3\0\1\10\6\0\1\10\6\0\1\10"+
    "\1\0\1\10\5\0\1\10\2\0\21\10\1\176\3\10"+
    "\3\0\1\10\6\0\1\10\6\0\1\10\1\0\1\10"+
    "\5\0\1\10\2\0\14\10\1\177\10\10\3\0\1\10"+
    "\6\0\1\10\6\0\1\10\1\0\1\10\5\0\1\10"+
    "\2\0\16\10\1\200\6\10\3\0\1\10\6\0\1\10"+
    "\6\0\1\10\1\0\1\10\5\0\1\10\2\0\3\10"+
    "\1\201\21\10\3\0\1\10\6\0\1\10\6\0\1\10"+
    "\1\0\1\10\5\0\1\10\2\0\13\10\1\131\5\10"+
    "\1\132\3\10\3\0\1\10\6\0\1\10\6\0\1\10"+
    "\1\0\1\10\5\0\1\10\2\0\3\10\1\202\21\10"+
    "\3\0\1\10\6\0\1\10\6\0\1\10\1\0\1\10"+
    "\5\0\1\10\2\0\13\10\1\203\11\10\3\0\1\10"+
    "\6\0\1\10\6\0\1\10\1\0\1\10\5\0\1\10"+
    "\2\0\15\10\1\204\7\10\3\0\1\10\6\0\1\10"+
    "\6\0\1\10\1\0\1\10\5\0\1\10\2\0\16\10"+
    "\1\205\6\10\3\0\1\10\6\0\1\10\6\0\1\10"+
    "\1\0\1\10\5\0\1\10\2\0\22\10\1\206\2\10"+
    "\3\0\1\10\6\0\1\10\6\0\1\10\1\0\1\10"+
    "\5\0\1\10\2\0\4\10\1\207\20\10\3\0\1\10"+
    "\6\0\1\10\6\0\1\10\1\0\1\10\5\0\1\10"+
    "\2\0\23\10\1\210\1\10\3\0\1\10\6\0\1\10"+
    "\6\0\1\10\1\0\1\10\5\0\1\10\2\0\5\10"+
    "\1\211\17\10\3\0\1\10\6\0\1\10\6\0\1\10"+
    "\1\0\1\10\5\0\1\10\2\0\14\10\1\212\10\10"+
    "\3\0\1\10\6\0\1\10\6\0\1\10\1\0\1\10"+
    "\5\0\1\10\2\0\17\10\1\213\5\10\3\0\1\10"+
    "\6\0\1\10\6\0\1\10\1\0\1\10\5\0\1\10"+
    "\2\0\22\10\1\214\2\10\3\0\1\10\6\0\1\10"+
    "\6\0\1\10\1\0\1\10\5\0\1\10\2\0\10\10"+
    "\1\215\14\10\3\0\1\10\6\0\1\10\6\0\1\10"+
    "\1\0\1\10\5\0\1\10\2\0\15\10\1\216\7\10"+
    "\3\0\1\10\6\0\1\10\6\0\1\10\1\0\1\10"+
    "\5\0\1\10\2\0\23\10\1\217\1\10\3\0\1\10"+
    "\6\0\1\10\6\0\1\10\1\0\1\10\5\0\1\10"+
    "\2\0\5\10\1\220\17\10\3\0\1\10\6\0\1\10"+
    "\6\0\1\10\1\0\1\10\5\0\1\10\2\0\1\10"+
    "\1\221\23\10\3\0\1\10\6\0\1\10\6\0\1\10"+
    "\1\0\1\10\5\0\1\10\2\0\11\10\1\222\13\10"+
    "\3\0\1\10\6\0\1\10\6\0\1\10\1\0\1\10"+
    "\5\0\1\10\2\0\20\10\1\223\4\10\3\0\1\10"+
    "\6\0\1\10\6\0\1\10\1\0\1\10\5\0\1\10"+
    "\2\0\15\10\1\224\7\10\3\0\1\10\6\0\1\10"+
    "\6\0\1\10\1\0\1\10\5\0\1\10\2\0\16\10"+
    "\1\225\6\10\3\0\1\10\6\0\1\10\6\0\1\10"+
    "\1\0\1\10\5\0\1\10\2\0\5\10\1\226\17\10"+
    "\3\0\1\10\6\0\1\10\6\0\1\10\1\0\1\10"+
    "\5\0\1\10\2\0\4\10\1\227\20\10\3\0\1\10"+
    "\6\0\1\10\6\0\1\10\1\0\1\10\5\0\1\10"+
    "\2\0\15\10\1\230\7\10\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5537];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\3\1\3\11\7\1\3\11"+
    "\12\1\3\11\1\0\2\11\3\0\1\11\21\1\1\0"+
    "\21\1\1\11\111\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SimpleLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 46: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 47: break;
          case 3:
            { return SimpleTypes.NEWLINE;
            }
          // fall through
          case 48: break;
          case 4:
            { return SimpleTypes.BINARY_OPERATOR;
            }
          // fall through
          case 49: break;
          case 5:
            { return SimpleTypes.IDENTIFIER;
            }
          // fall through
          case 50: break;
          case 6:
            { return SimpleTypes.LEFT_PARENTHESIS;
            }
          // fall through
          case 51: break;
          case 7:
            { return SimpleTypes.RIGHT_PARENTHESIS;
            }
          // fall through
          case 52: break;
          case 8:
            { return SimpleTypes.COMMA_OPERATOR;
            }
          // fall through
          case 53: break;
          case 9:
            { return SimpleTypes.MINUS_OPERATOR;
            }
          // fall through
          case 54: break;
          case 10:
            { return SimpleTypes.DOT_OPERATOR;
            }
          // fall through
          case 55: break;
          case 11:
            { return SimpleTypes.NUMBER_LITERAL;
            }
          // fall through
          case 56: break;
          case 12:
            { return SimpleTypes.ASSIGNMENT_OPERATOR;
            }
          // fall through
          case 57: break;
          case 13:
            { return SimpleTypes.FUNCTION_CALL_OPERATOR;
            }
          // fall through
          case 58: break;
          case 14:
            { return SimpleTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 59: break;
          case 15:
            { return SimpleTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 60: break;
          case 16:
            { return SimpleTypes.RIGHT_CURLY_BRACKET;
            }
          // fall through
          case 61: break;
          case 17:
            { return SimpleTypes.LEFT_CURLY_BRACKET;
            }
          // fall through
          case 62: break;
          case 18:
            { return SimpleTypes.UNARY_OPERATOR;
            }
          // fall through
          case 63: break;
          case 19:
            { return SimpleTypes.STRING_LITERAL;
            }
          // fall through
          case 64: break;
          case 20:
            { return SimpleTypes.IF;
            }
          // fall through
          case 65: break;
          case 21:
            { return SimpleTypes.ELLIPSIS;
            }
          // fall through
          case 66: break;
          case 22:
            { return SimpleTypes.END;
            }
          // fall through
          case 67: break;
          case 23:
            { return SimpleTypes.CASE;
            }
          // fall through
          case 68: break;
          case 24:
            { return SimpleTypes.ELSE;
            }
          // fall through
          case 69: break;
          case 25:
            { return SimpleTypes.EXIT;
            }
          // fall through
          case 70: break;
          case 26:
            { return SimpleTypes.FISH;
            }
          // fall through
          case 71: break;
          case 27:
            { return SimpleTypes.LOCK;
            }
          // fall through
          case 72: break;
          case 28:
            { return SimpleTypes.LOOP;
            }
          // fall through
          case 73: break;
          case 29:
            { return SimpleTypes.THEN;
            }
          // fall through
          case 74: break;
          case 30:
            { return SimpleTypes.ENDIF;
            }
          // fall through
          case 75: break;
          case 31:
            { return SimpleTypes.LOCAL;
            }
          // fall through
          case 76: break;
          case 32:
            { return SimpleTypes.CASEOF;
            }
          // fall through
          case 77: break;
          case 33:
            { return SimpleTypes.DEFINE;
            }
          // fall through
          case 78: break;
          case 34:
            { return SimpleTypes.ELSEIF;
            }
          // fall through
          case 79: break;
          case 35:
            { return SimpleTypes.GLOBAL;
            }
          // fall through
          case 80: break;
          case 36:
            { return SimpleTypes.RETURN;
            }
          // fall through
          case 81: break;
          case 37:
            { return SimpleTypes.STRUCT;
            }
          // fall through
          case 82: break;
          case 38:
            { return SimpleTypes.COMMAND;
            }
          // fall through
          case 83: break;
          case 39:
            { return SimpleTypes.ENDCASE;
            }
          // fall through
          case 84: break;
          case 40:
            { return SimpleTypes.ENDLOOP;
            }
          // fall through
          case 85: break;
          case 41:
            { return SimpleTypes.FOREACH;
            }
          // fall through
          case 86: break;
          case 42:
            { return SimpleTypes.SECTION;
            }
          // fall through
          case 87: break;
          case 43:
            { return SimpleTypes.CONTINUE;
            }
          // fall through
          case 88: break;
          case 44:
            { return SimpleTypes.ENDCOMMAND;
            }
          // fall through
          case 89: break;
          case 45:
            { return SimpleTypes.ENDSECTION;
            }
          // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
