// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
{
  parserClass="org.intellij.sdk.language.parser.SimpleParser"
  parserUtilClass="org.intellij.sdk.language.parser.SimpleParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Simple"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.sdk.language.psi"
  psiImplPackage="org.intellij.sdk.language.psi.impl"

  elementTypeHolderClass="org.intellij.sdk.language.psi.SimpleTypes"
  elementTypeClass="org.intellij.sdk.language.psi.SimpleElementType"
  tokenTypeClass="org.intellij.sdk.language.psi.SimpleTokenType"

  psiImplUtilClass="org.intellij.sdk.language.psi.impl.SimplePsiImplUtil"

  tokens=[
    WHITESPACE="regexp: +"
    NEWLINE="regexp:(\R[ \t]*)"
  ]
}

simpleFile ::= tk_newline* command_block? tk_newline*

command_block ::= command_block_single (eol command_block_single)*
//前缀为cmd的均表示作用于command作用域中
command_block_single ::= (
    command_line_comment |
    command_block_define |
    command_line_inline_fish |
    command_line_func_call |
    command_line_other_words
)
command_line_comment ::= tk_comment (eol tk_comment)*
command_line_other_words ::= command_token_all+ tk_comment?
command_line_func_call ::= op_at tk_identifier expr_paren_csv? tk_comment?
command_line_inline_fish ::= square_l command_inline_fish_line square_r tk_comment?
command_token_all ::= (
     square_l | square_r | paren_l | paren_r | op_comma | op_assign | op_unary | op_binary| op_dot | op_at |
     tk_literal | command_token_keyword_all | tk_value
 )
// 可以在 Command 空间中作为普通字符串使用的关键字
command_token_keyword_all ::= (
    kw_return |
    kw_case_of | kw_case | kw_end_case |
    kw_exit | kw_global |  kw_local |
    kw_if | kw_then | kw_else_if | kw_else | kw_end_if |
    kw_lock |
    kw_loop | kw_endloop | kw_continue |
    kw_section | kw_end_section | kw_struct
)

//函数的定义是在command空间里面的，而不是fish空间里面
command_block_define ::= (
    fish_line_define_header
    (eol fish_block_body_define)?
    eol fish_line_define_footer
) {
    methods=[getName getPresentation]
}
fish_line_define_header ::= (kw_fish_define | kw_fish_operator) tk_identifier fish_expr_define_params? tk_comment?
fish_block_body_define ::= fish_block
fish_line_define_footer ::= kw_end tk_comment?
fish_expr_define_params ::= (paren_l tk_identifier (op_comma tk_identifier)* paren_r)

// 全部的可能的 Fish 语句块
fish_block ::= fish_block_single (eol fish_block_single)*
fish_block_single ::= (
    fish_block_if |
    fish_block_loop |
    fish_block_case_of |
    fish_block_section |
    fish_block_command |
    fish_line
)

// If 语法
fish_block_if ::= fish_line_if_block_header
             (eol fish_block_body_if)?
             (eol fish_line_if_block_else_if (eol fish_block_body_else_if)?)*
             (eol fish_line_if_block_else (eol fish_block_body_else)?)?
             eol fish_line_if_block_footer
fish_line_if_block_header ::= kw_if expr kw_then? tk_comment?
fish_line_if_block_else ::= kw_else tk_comment?
fish_line_if_block_else_if ::= kw_else_if expr kw_then? tk_comment?
fish_line_if_block_footer ::= kw_end_if tk_comment?
fish_block_body_if ::= fish_block
fish_block_body_else_if ::= fish_block
fish_block_body_else ::= fish_block

// Loop 语法
fish_block_loop ::= fish_line_loop_block_header (eol fish_block_body_loop)? eol fish_line_loop_block_footer
fish_line_loop_block_header ::= kw_loop (loop_each | fish_expr_loop_indexed | loop_for | loop_while) tk_comment?
fish_line_loop_block_footer ::= kw_endloop tk_comment?
fish_block_body_loop ::= fish_block
fish_expr_loop_indexed ::= fish_expr_assign_left_for_loop paren_l expr op_comma expr (op_comma expr)? paren_r
loop_while ::= kw_while expr
loop_each ::= kw_foreach fish_expr_assign_left_for_loop expr
loop_for ::= kw_for paren_l kw_local? expr op_comma expr op_comma expr paren_r

// Case of 语法
fish_block_case_of ::= (
    fish_line_case_of_block_header
    (eol fish_block_body_case_of)?
    (eol fish_line_case_of_block_option eol fish_block_body_case_of)*
    eol fish_line_case_of_block_footer)
fish_line_case_of_block_header ::= kw_case_of expr tk_comment?
fish_line_case_of_block_option ::= kw_case expr tk_comment?
fish_line_case_of_block_footer ::= kw_end_case tk_comment?
fish_block_body_case_of ::= fish_block

// Section 语法块
fish_block_section ::= fish_line_section_header (eol fish_block_body_section)? eol fish_line_section_footer
fish_line_section_header ::= kw_section tk_comment?
fish_line_section_footer ::= kw_end_section tk_comment?
fish_block_body_section ::= fish_block

// Command 语法块
fish_block_command ::= (
    fish_line_command_header
    (eol fish_block_body_command)?
    eol fish_line_command_footer
)
fish_line_command_header ::= kw_command tk_comment?
fish_line_command_footer ::= kw_end_command tk_comment?
fish_block_body_command ::= command_block

fish_line ::= (
    fish_line_break |
    fish_line_continue |
    fish_line_exit_section |
    fish_line_exit_loop |
    fish_line_exit |
    fish_line_array_declare |
    fish_line_assign |
    fish_line_return |
    fish_line_expr |
    fish_line_comment
    )
fish_line_break ::= kw_break tk_comment?
fish_line_continue ::= kw_continue tk_comment?
fish_line_exit ::= kw_exit tk_comment?
fish_line_exit_section ::= kw_exit_section tk_comment?
fish_line_exit_loop ::= kw_exit_loop tk_comment?
fish_line_return ::= kw_return expr? tk_comment?
fish_line_array_declare ::= kw_array tk_identifier paren_l literal_number paren_r tk_comment?
fish_line_assign ::= (kw_local | kw_global)? fish_expr_assign (op_comma fish_expr_assign)* tk_comment?
fish_line_expr ::= expr tk_comment?
fish_line_comment ::= tk_comment

// 在 Command 里面可以行内调用的语句
command_inline_fish_line ::= (
    command_inline_fish_line_array_declare |
    command_inline_fish_line_assign |
    command_inline_fish_line_expr
)
command_inline_fish_line_array_declare ::= kw_array tk_identifier paren_l literal_number paren_r
command_inline_fish_line_assign ::= (kw_local | kw_global)? fish_expr_assign (op_comma fish_expr_assign)*
command_inline_fish_line_expr ::= expr

fish_expr_assign ::= fish_expr_assign_target fish_expr_assign_right?
fish_expr_assign_target ::= tk_identifier expr_paren_csv?
fish_expr_assign_right ::= op_assign expr
fish_expr_assign_left_for_loop ::= kw_local? tk_identifier


private expr ::= (square_l expr_binary square_r) |  expr_binary
private expr_paren ::= paren_l expr paren_r
private expr_func_call ::= tk_identifier expr_paren_csv
private expr_csv ::= expr (op_comma expr)*
private expr_paren_csv ::= paren_l expr_csv paren_r


private expr_binary ::= expr_non_binary (op_binary expr_non_binary)*
private expr_non_binary ::=  expr_paren | expr_func_call | expr_unary | tk_value
private expr_unary ::= op_unary expr

////词汇之间的组合
tk_value ::= tk_identifier | tk_literal
tk_literal ::= literal_string | literal_number
tk_newline ::= NEWLINE+
tk_comment ::= COMMENT
tk_identifier ::= IDENTIFIER {
////  pin=3
//  recoverWhile="recover_property"
  mixin="org.intellij.sdk.language.psi.impl.SimpleNamedElementImpl"
  implements="org.intellij.sdk.language.psi.SimpleNamedElement"
  methods=[getName setName getNameIdentifier getPresentation getReference getReferences getTextOffset]
}
//
//property ::= (tk_identifier) {
////  pin=3
//  recoverWhile="recover_property"
//  mixin="org.intellij.sdk.language.psi.impl.SimpleNamedElementImpl"
//  implements="org.intellij.sdk.language.psi.SimpleNamedElement"
//  methods=[getName setName getNameIdentifier getPresentation]
//}
//private recover_property ::= !(tk_identifier)
//



//以下为读取的原始token
private literal_string ::=  STRING_LITERAL
private literal_number ::= NUMBER_LITERAL
private op_binary ::= BINARY_OPERATOR | MINUS_OPERATOR | ASSIGNMENT_OPERATOR
private op_unary ::= UNARY_OPERATOR | MINUS_OPERATOR
private op_assign ::= ASSIGNMENT_OPERATOR
eol ::= tk_newline

private op_at ::= FUNCTION_CALL_OPERATOR
private op_comma ::= COMMA_OPERATOR
private op_dot ::= DOT_OPERATOR

// Bracket Operators
private paren_l ::= LEFT_PARENTHESIS
private paren_r ::= RIGHT_PARENTHESIS
private square_l ::= LEFT_SQUARE_BRACKET
private square_r ::= RIGHT_SQUARE_BRACKET
private curly_l ::= LEFT_CURLY_BRACKET
private curly_r ::= RIGHT_CURLY_BRACKET

//keywords
private kw_fish_define ::= FISH_DEFINE
private kw_fish_operator ::= FISH_OPERATOR
private kw_end ::= END

private kw_case_of ::= CASEOF
private kw_case ::= CASE
private kw_end_case ::= ENDCASE

private kw_command ::= COMMAND
private kw_end_command ::= ENDCOMMAND

private kw_exit ::= EXIT

private kw_global ::= GLOBAL
private kw_local ::= LOCAL

private kw_if ::= IF
private kw_then ::= THEN
private kw_else_if ::= ELSEIF | (kw_else kw_if)
private kw_else ::= ELSE
private kw_end_if ::= ENDIF

private kw_lock ::= LOCK

private kw_loop ::= LOOP
private kw_foreach ::= FOREACH
private kw_endloop ::= ENDLOOP
private kw_exit_loop ::= EXITLOOP
private kw_continue ::= CONTINUE
private kw_break ::= BREAK | (kw_exit kw_loop)
private kw_while ::= WHILE
private kw_for ::= FOR

private kw_return ::= RETURN

private kw_section ::= SECTION
private kw_end_section ::= ENDSECTION
private kw_exit_section ::= EXITSECTION

private kw_struct ::= STRUCT
private kw_array ::= ARRAY
