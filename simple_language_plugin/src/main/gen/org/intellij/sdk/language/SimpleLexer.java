// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Simple.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.intellij.sdk.language;

// 导入 IntelliJ SDK 和其他库所需的类。
import com.intellij.formatting.WhiteSpace;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import groovyjarjarantlr.Token;
import org.bouncycastle.pqc.jcajce.interfaces.SABERKey;
import org.intellij.sdk.language.psi.SimpleTypes;
import com.intellij.psi.TokenType;

// FlexLexer 规范从这里开始。


class SimpleLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\10\u2e00"+
    "\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u1f00\1\u5500\4\u0100\1\u5600"+
    "\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900\2\u1f00"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u1f00"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\22\u1f00\1\u6300"+
    "\1\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\4\u1f00\1\u6b00\1\u6c00\1\u6d00\1\u6e00\1\u1f00"+
    "\1\u6f00\2\u1f00\1\u7000\1\u7100\1\u7200\2\u1f00\1\u7300\1\u1f00"+
    "\1\u7400\14\u1f00\1\u7500\4\u1f00\246\u0100\1\u7600\20\u0100\1\u7700"+
    "\1\u7800\25\u0100\1\u7900\34\u0100\1\u7a00\14\u1f00\2\u0100\1\u7b00"+
    "\5\u1f00\23\u0100\1\u7c00\17\u0100\1\u7d00\u0adc\u1f00\1\u7e00\1\u7f00"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\16\0\4\5\1\6"+
    "\1\5\1\7\1\10\1\11\1\12\1\10\1\13\1\14"+
    "\1\15\2\12\1\16\1\17\1\20\1\21\12\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\5\1\30\1\31\3\11"+
    "\1\32\6\11\1\33\6\11\1\34\7\11\1\35\1\5"+
    "\1\36\1\10\1\37\1\5\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\11\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\11\1\57\1\60\1\61"+
    "\1\62\1\11\1\63\1\64\1\65\1\11\1\66\1\10"+
    "\1\67\1\70\6\0\1\71\32\0\2\5\4\11\4\5"+
    "\1\11\2\5\1\0\7\5\1\11\4\5\1\11\5\5"+
    "\27\11\1\5\37\11\1\5\u01ca\11\4\5\14\11\16\5"+
    "\5\11\7\5\1\11\1\5\1\11\21\5\160\0\5\11"+
    "\1\5\2\11\2\5\4\11\1\5\1\11\6\5\1\11"+
    "\1\5\3\11\1\5\1\11\1\5\24\11\1\5\123\11"+
    "\1\5\213\11\1\5\5\0\2\5\246\11\1\5\46\11"+
    "\2\5\1\11\6\5\51\11\6\5\1\11\1\5\55\0"+
    "\1\5\1\0\1\5\2\0\1\5\2\0\1\5\1\0"+
    "\10\5\33\11\4\5\4\11\15\5\6\0\5\5\1\11"+
    "\4\5\13\0\1\5\1\0\3\5\53\11\37\0\4\5"+
    "\2\11\1\0\143\11\1\5\1\11\10\0\1\5\6\0"+
    "\2\11\2\0\1\5\4\0\2\11\12\0\3\11\2\5"+
    "\1\11\17\5\1\0\1\11\1\0\36\11\33\0\2\5"+
    "\131\11\13\0\1\11\16\5\12\0\41\11\11\0\2\11"+
    "\4\5\1\11\2\5\1\0\30\11\4\0\1\11\11\0"+
    "\1\11\3\0\1\11\5\0\22\5\31\11\3\0\4\5"+
    "\13\11\5\5\30\11\1\5\6\11\1\5\2\0\6\5"+
    "\10\0\52\11\72\0\66\11\3\0\1\11\22\0\1\11"+
    "\7\0\12\11\2\0\2\5\12\0\1\5\20\11\3\0"+
    "\1\5\10\11\2\5\2\11\2\5\26\11\1\5\7\11"+
    "\1\5\1\11\3\5\4\11\2\5\1\0\1\11\7\0"+
    "\2\5\2\0\2\5\3\0\1\11\10\5\1\0\4\5"+
    "\2\11\1\5\3\11\2\0\2\5\12\0\4\11\7\5"+
    "\2\11\1\5\1\0\2\5\3\0\1\5\6\11\4\5"+
    "\2\11\2\5\26\11\1\5\7\11\1\5\2\11\1\5"+
    "\2\11\1\5\2\11\2\5\1\0\1\5\5\0\4\5"+
    "\2\0\2\5\3\0\3\5\1\0\7\5\4\11\1\5"+
    "\1\11\7\5\14\0\3\11\1\0\13\5\3\0\1\5"+
    "\11\11\1\5\3\11\1\5\26\11\1\5\7\11\1\5"+
    "\2\11\1\5\5\11\2\5\1\0\1\11\10\0\1\5"+
    "\3\0\1\5\3\0\2\5\1\11\17\5\2\11\2\0"+
    "\2\5\12\0\1\5\1\11\7\5\1\11\6\0\1\5"+
    "\3\0\1\5\10\11\2\5\2\11\2\5\26\11\1\5"+
    "\7\11\1\5\2\11\1\5\5\11\2\5\1\0\1\11"+
    "\7\0\2\5\2\0\2\5\3\0\7\5\3\0\4\5"+
    "\2\11\1\5\3\11\2\0\2\5\12\0\1\5\1\11"+
    "\20\5\1\0\1\11\1\5\6\11\3\5\3\11\1\5"+
    "\4\11\3\5\2\11\1\5\1\11\1\5\2\11\3\5"+
    "\2\11\3\5\3\11\3\5\14\11\4\5\5\0\3\5"+
    "\3\0\1\5\4\0\2\5\1\11\6\5\1\0\16\5"+
    "\12\0\11\5\1\11\6\5\5\0\10\11\1\5\3\11"+
    "\1\5\27\11\1\5\20\11\2\5\1\0\1\11\7\0"+
    "\1\5\3\0\1\5\4\0\7\5\2\0\1\5\3\11"+
    "\2\5\1\11\2\5\2\11\2\0\2\5\12\0\20\5"+
    "\1\11\3\0\1\5\10\11\1\5\3\11\1\5\27\11"+
    "\1\5\12\11\1\5\5\11\2\5\1\0\1\11\7\0"+
    "\1\5\3\0\1\5\4\0\7\5\2\0\6\5\2\11"+
    "\1\5\2\11\2\0\2\5\12\0\1\5\2\11\1\0"+
    "\14\5\4\0\11\11\1\5\3\11\1\5\51\11\2\0"+
    "\1\11\7\0\1\5\3\0\1\5\4\0\1\11\5\5"+
    "\3\11\1\0\7\5\3\11\2\0\2\5\12\0\12\5"+
    "\6\11\1\5\3\0\1\5\22\11\3\5\30\11\1\5"+
    "\11\11\1\5\1\11\2\5\7\11\3\5\1\0\4\5"+
    "\6\0\1\5\1\0\1\5\10\0\6\5\12\0\2\5"+
    "\2\0\15\5\60\11\1\0\2\11\7\0\4\5\10\11"+
    "\10\0\1\5\12\0\47\5\2\11\1\5\1\11\1\5"+
    "\5\11\1\5\30\11\1\5\1\11\1\5\12\11\1\0"+
    "\2\11\11\0\1\11\2\5\5\11\1\5\1\11\1\5"+
    "\7\0\1\5\12\0\2\5\4\11\40\5\1\11\27\5"+
    "\2\0\6\5\12\0\13\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\2\0\10\11\1\5\44\11\4\5\24\0"+
    "\1\5\2\0\5\11\13\0\1\5\44\0\11\5\1\0"+
    "\71\5\53\11\24\0\1\11\12\0\6\5\6\11\4\0"+
    "\4\11\3\0\1\11\3\0\2\11\7\0\3\11\4\0"+
    "\15\11\14\0\1\11\17\0\2\5\46\11\1\5\1\11"+
    "\5\5\1\11\2\5\53\11\1\5\115\11\1\5\4\11"+
    "\2\5\7\11\1\5\1\11\1\5\4\11\2\5\51\11"+
    "\1\5\4\11\2\5\41\11\1\5\4\11\2\5\7\11"+
    "\1\5\1\11\1\5\4\11\2\5\17\11\1\5\71\11"+
    "\1\5\4\11\2\5\103\11\2\5\3\0\40\5\20\11"+
    "\20\5\126\11\2\5\6\11\3\5\u016c\11\2\5\21\11"+
    "\1\5\32\11\5\5\113\11\3\5\13\11\7\5\22\11"+
    "\4\0\11\5\23\11\3\0\13\5\22\11\2\0\14\5"+
    "\15\11\1\5\3\11\1\5\2\0\14\5\64\11\40\0"+
    "\3\5\1\11\3\5\2\11\1\0\2\5\12\0\41\5"+
    "\17\0\6\5\131\11\7\5\5\11\2\0\42\11\1\0"+
    "\1\11\5\5\106\11\12\5\37\11\1\5\14\0\4\5"+
    "\14\0\12\5\12\0\36\11\2\5\5\11\13\5\54\11"+
    "\4\5\32\11\6\5\12\0\46\5\27\11\5\0\4\5"+
    "\65\11\12\0\1\5\35\0\2\5\13\0\6\5\12\0"+
    "\15\5\1\11\10\5\16\0\1\5\20\0\61\5\5\0"+
    "\57\11\21\0\10\11\3\5\12\0\21\5\11\0\14\5"+
    "\3\0\36\11\15\0\2\11\12\0\54\11\16\0\14\5"+
    "\44\11\24\0\10\5\12\0\3\5\3\11\12\0\44\11"+
    "\2\5\11\11\7\5\53\11\2\5\3\11\20\5\3\0"+
    "\1\5\25\0\4\11\1\0\6\11\1\0\2\11\3\0"+
    "\1\11\5\5\300\11\100\0\26\11\2\5\6\11\2\5"+
    "\46\11\2\5\6\11\2\5\10\11\1\5\1\11\1\5"+
    "\1\11\1\5\1\11\1\5\37\11\2\5\65\11\1\5"+
    "\7\11\1\5\1\11\3\5\3\11\1\5\7\11\3\5"+
    "\4\11\2\5\6\11\4\5\15\11\5\5\3\11\1\5"+
    "\7\11\16\5\5\0\30\5\2\72\5\0\20\5\2\11"+
    "\23\5\1\11\13\5\5\0\1\5\12\0\1\5\1\11"+
    "\15\5\1\11\20\5\15\11\3\5\41\11\17\5\15\0"+
    "\4\5\1\0\3\5\14\0\21\5\1\11\4\5\1\11"+
    "\2\5\12\11\1\5\1\11\3\5\5\11\6\5\1\11"+
    "\1\5\1\11\1\5\1\11\1\5\4\11\1\5\13\11"+
    "\2\5\4\11\5\5\5\11\4\5\1\11\21\5\51\11"+
    "\u0177\5\345\11\6\5\4\11\3\0\2\11\14\5\46\11"+
    "\1\5\1\11\5\5\1\11\2\5\70\11\7\5\1\11"+
    "\17\5\1\0\27\11\11\5\7\11\1\5\7\11\1\5"+
    "\7\11\1\5\7\11\1\5\7\11\1\5\7\11\1\5"+
    "\7\11\1\5\7\11\1\5\40\0\57\5\1\11\325\5"+
    "\3\11\31\5\11\11\6\0\1\5\5\11\2\5\5\11"+
    "\4\5\126\11\2\5\2\0\2\5\3\11\1\5\132\11"+
    "\1\5\4\11\5\5\53\11\1\5\136\11\21\5\40\11"+
    "\60\5\320\11\100\5\215\11\103\5\56\11\2\5\15\11"+
    "\3\5\20\11\12\0\2\11\24\5\57\11\1\0\4\5"+
    "\12\0\1\5\37\11\2\0\120\11\2\0\45\5\11\11"+
    "\2\5\147\11\2\5\100\11\5\5\2\11\1\5\1\11"+
    "\1\5\5\11\30\5\20\11\1\0\3\11\1\0\4\11"+
    "\1\0\27\11\5\0\4\5\1\0\13\5\1\11\7\5"+
    "\64\11\14\5\2\0\62\11\22\0\12\5\12\0\6\5"+
    "\22\0\6\11\3\5\1\11\1\5\2\11\13\0\34\11"+
    "\10\0\2\5\27\11\15\0\14\5\35\11\3\5\4\0"+
    "\57\11\16\0\16\5\1\11\12\0\6\5\5\11\1\0"+
    "\12\11\12\0\5\11\1\5\51\11\16\0\11\5\3\11"+
    "\1\0\10\11\2\0\2\5\12\0\6\5\27\11\3\5"+
    "\1\11\3\0\62\11\1\0\1\11\3\0\2\11\2\0"+
    "\5\11\2\0\1\11\1\0\1\11\30\5\3\11\2\5"+
    "\13\11\5\0\2\5\3\11\2\0\12\5\6\11\2\5"+
    "\6\11\2\5\6\11\11\5\7\11\1\5\7\11\1\5"+
    "\53\11\1\5\16\11\6\5\163\11\10\0\1\5\2\0"+
    "\2\5\12\0\6\5\244\11\14\5\27\11\4\5\61\11"+
    "\4\5\u0100\73\156\11\2\5\152\11\46\5\7\11\14\5"+
    "\5\11\5\5\1\11\1\0\12\11\1\5\15\11\1\5"+
    "\5\11\1\5\1\11\1\5\2\11\1\5\2\11\1\5"+
    "\154\11\41\5\153\11\22\5\100\11\2\5\66\11\50\5"+
    "\15\11\3\5\20\0\20\5\20\0\3\5\2\11\30\5"+
    "\3\11\31\5\1\11\6\5\5\11\1\5\207\11\2\5"+
    "\1\0\4\5\1\11\13\5\12\0\7\5\32\11\4\5"+
    "\1\11\1\5\32\11\13\5\131\11\3\5\6\11\2\5"+
    "\6\11\2\5\6\11\2\5\3\11\3\5\2\11\3\5"+
    "\2\11\22\5\3\0\4\5\14\11\1\5\32\11\1\5"+
    "\23\11\1\5\2\11\1\5\17\11\2\5\16\11\42\5"+
    "\173\11\105\5\65\11\210\5\1\0\202\5\35\11\3\5"+
    "\61\11\17\5\1\0\37\5\40\11\15\5\36\11\5\5"+
    "\46\11\5\0\5\5\36\11\2\5\44\11\4\5\10\11"+
    "\1\5\5\11\52\5\236\11\2\5\12\0\6\5\44\11"+
    "\4\5\44\11\4\5\50\11\10\5\64\11\14\5\13\11"+
    "\1\5\17\11\1\5\7\11\1\5\2\11\1\5\13\11"+
    "\1\5\17\11\1\5\7\11\1\5\2\11\103\5\67\11"+
    "\11\5\26\11\12\5\10\11\30\5\6\11\1\5\52\11"+
    "\1\5\11\11\105\5\6\11\2\5\1\11\1\5\54\11"+
    "\1\5\2\11\3\5\1\11\2\5\27\11\12\5\27\11"+
    "\11\5\37\11\101\5\23\11\1\5\2\11\12\5\26\11"+
    "\12\5\32\11\106\5\70\11\6\5\2\11\100\5\1\11"+
    "\3\0\1\5\2\0\5\5\4\0\4\11\1\5\3\11"+
    "\1\5\35\11\2\5\3\0\4\5\1\0\40\5\35\11"+
    "\3\5\35\11\43\5\10\11\1\5\34\11\2\0\31\5"+
    "\66\11\12\5\26\11\12\5\23\11\15\5\22\11\156\5"+
    "\111\11\67\5\63\11\15\5\63\11\15\5\44\11\4\0"+
    "\10\5\12\0\u0146\5\52\11\1\5\2\0\3\5\2\11"+
    "\113\5\3\0\35\11\12\5\1\11\10\5\26\11\13\0"+
    "\37\5\22\11\4\0\52\5\25\11\33\5\27\11\11\5"+
    "\3\0\65\11\17\0\37\5\13\0\2\11\2\0\1\11"+
    "\11\5\4\0\55\11\13\0\2\5\1\0\4\5\1\0"+
    "\12\5\1\0\2\5\31\11\7\5\12\0\6\5\3\0"+
    "\44\11\16\0\1\5\12\0\4\5\1\11\2\0\1\11"+
    "\10\5\43\11\1\0\2\5\1\11\11\5\3\0\60\11"+
    "\16\0\4\11\4\5\4\0\1\5\14\0\1\11\1\5"+
    "\1\11\43\5\22\11\1\5\31\11\14\0\6\5\1\0"+
    "\2\11\1\0\76\5\7\11\1\5\1\11\1\5\4\11"+
    "\1\5\17\11\1\5\12\11\7\5\57\11\14\0\5\5"+
    "\12\0\6\5\4\0\1\5\10\11\2\5\2\11\2\5"+
    "\26\11\1\5\7\11\1\5\2\11\1\5\5\11\1\5"+
    "\2\0\1\11\7\0\2\5\2\0\2\5\3\0\2\5"+
    "\1\11\6\5\1\0\5\5\5\11\2\0\2\5\7\0"+
    "\3\5\5\0\213\5\65\11\22\0\4\11\5\5\12\0"+
    "\4\5\1\0\3\11\36\5\60\11\24\0\2\11\1\5"+
    "\1\11\10\5\12\0\246\5\57\11\7\0\2\5\11\0"+
    "\27\5\4\11\2\0\42\5\60\11\21\0\3\5\1\11"+
    "\13\5\12\0\46\5\53\11\15\0\1\11\7\5\12\0"+
    "\66\5\33\11\2\5\17\0\4\5\12\0\6\5\7\11"+
    "\271\5\54\11\17\0\145\5\100\11\12\0\25\5\10\11"+
    "\2\5\1\11\2\5\10\11\1\5\2\11\1\5\30\11"+
    "\6\0\1\5\2\0\2\5\4\0\1\11\1\0\1\11"+
    "\2\0\14\5\12\0\106\5\10\11\2\5\47\11\7\0"+
    "\2\5\7\0\1\11\1\5\1\11\1\0\33\5\1\11"+
    "\12\0\50\11\7\0\1\11\4\0\10\5\1\0\10\5"+
    "\1\11\13\0\56\11\20\0\3\5\1\11\22\5\111\11"+
    "\7\5\11\11\1\5\45\11\10\0\1\5\10\0\1\11"+
    "\17\5\12\0\30\5\36\11\2\5\26\0\1\5\16\0"+
    "\111\5\7\11\1\5\2\11\1\5\46\11\6\0\3\5"+
    "\1\0\1\5\2\0\1\5\7\0\1\11\1\0\10\5"+
    "\12\0\6\5\6\11\1\5\2\11\1\5\40\11\5\0"+
    "\1\5\2\0\1\5\5\0\1\11\7\5\12\0\u0136\5"+
    "\23\11\4\0\11\5\2\0\1\11\1\0\15\11\1\5"+
    "\42\11\7\0\3\5\5\0\15\5\12\0\126\5\1\11"+
    "\54\5\4\11\37\5\232\11\146\5\157\11\21\5\304\11"+
    "\u014c\5\141\11\17\5\60\11\21\0\6\11\17\0\252\5"+
    "\107\11\271\5\71\11\7\5\37\11\1\5\12\0\6\5"+
    "\117\11\1\5\12\0\6\5\36\11\2\5\5\0\13\5"+
    "\60\11\7\0\11\5\4\11\14\5\12\0\11\5\25\11"+
    "\5\5\23\11\260\5\100\11\200\5\113\11\4\5\1\0"+
    "\1\11\67\0\7\5\4\0\15\11\100\5\2\11\1\5"+
    "\1\11\1\0\13\5\2\0\16\5\370\11\10\5\326\11"+
    "\52\5\11\11\u01e7\5\4\11\1\5\7\11\1\5\2\11"+
    "\1\5\43\11\17\5\1\11\35\5\3\11\2\5\1\11"+
    "\16\5\4\11\10\5\u018c\11\4\5\153\11\5\5\15\11"+
    "\3\5\11\11\7\5\12\11\3\5\2\0\1\5\4\0"+
    "\134\5\56\0\2\5\27\0\u011e\5\5\0\3\5\26\0"+
    "\2\5\7\0\36\5\4\0\224\5\3\0\273\5\125\11"+
    "\1\5\107\11\1\5\2\11\2\5\1\11\2\5\2\11"+
    "\2\5\4\11\1\5\14\11\1\5\1\11\1\5\7\11"+
    "\1\5\101\11\1\5\4\11\2\5\10\11\1\5\7\11"+
    "\1\5\34\11\1\5\4\11\1\5\5\11\1\5\1\11"+
    "\3\5\7\11\1\5\u0154\11\2\5\31\11\1\5\31\11"+
    "\1\5\37\11\1\5\31\11\1\5\37\11\1\5\31\11"+
    "\1\5\37\11\1\5\31\11\1\5\37\11\1\5\31\11"+
    "\1\5\10\11\2\5\151\0\4\5\62\0\10\5\1\0"+
    "\16\5\1\0\26\5\5\0\1\5\17\0\120\5\37\11"+
    "\6\5\6\11\325\5\7\0\1\5\21\0\2\5\7\0"+
    "\1\5\2\0\1\5\5\0\5\5\76\11\41\5\1\0"+
    "\160\5\55\11\3\5\7\0\7\11\2\5\12\0\4\5"+
    "\1\11\u0141\5\36\11\1\0\21\5\54\11\16\0\5\5"+
    "\1\11\320\5\34\11\16\0\346\5\7\11\1\5\4\11"+
    "\1\5\2\11\1\5\17\11\1\5\305\11\13\5\7\0"+
    "\51\5\104\11\7\0\1\11\4\5\12\0\u0156\5\1\11"+
    "\117\5\4\11\1\5\33\11\1\5\2\11\1\5\1\11"+
    "\2\5\1\11\1\5\12\11\1\5\4\11\1\5\1\11"+
    "\1\5\1\11\6\5\1\11\4\5\1\11\1\5\1\11"+
    "\1\5\1\11\1\5\3\11\1\5\2\11\1\5\1\11"+
    "\2\5\1\11\1\5\1\11\1\5\1\11\1\5\1\11"+
    "\1\5\1\11\1\5\2\11\1\5\1\11\2\5\4\11"+
    "\1\5\7\11\1\5\4\11\1\5\4\11\1\5\1\11"+
    "\1\5\12\11\1\5\21\11\5\5\3\11\1\5\5\11"+
    "\1\5\21\11\u0134\5\12\0\6\5\340\11\40\5\72\11"+
    "\6\5\336\11\2\5\u0182\11\16\5\u0131\11\37\5\36\11"+
    "\342\5\113\11\5\5\u0160\11\121\5\1\0\36\5\140\0"+
    "\200\5\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\1\1\4\1\5\1\4"+
    "\1\1\1\6\1\7\1\10\1\11\1\12\1\4\1\13"+
    "\1\1\1\14\1\4\1\15\1\16\1\5\1\17\1\20"+
    "\14\5\1\21\1\22\1\23\1\0\1\24\1\15\3\0"+
    "\13\5\1\25\6\5\1\2\1\0\1\13\5\5\1\26"+
    "\1\5\1\27\2\5\1\30\10\5\1\0\3\2\2\5"+
    "\1\31\3\5\1\32\1\0\5\5\1\33\4\5\1\34"+
    "\1\35\3\5\1\36\1\5\1\37\1\40\7\5\1\0"+
    "\4\5\1\41\1\0\3\5\1\0\2\5\1\42\3\5"+
    "\1\43\1\44\2\5\1\26\1\45\1\0\4\5\1\0"+
    "\2\5\2\0\1\5\1\46\1\47\1\5\1\50\1\51"+
    "\1\5\1\0\1\52\1\5\1\53\1\5\1\0\2\5"+
    "\2\0\1\54\1\55\1\5\1\56\1\0\2\5\1\0"+
    "\1\57\1\5\2\0\1\5\1\0\2\5\1\0\1\5"+
    "\2\0\1\50\1\0\1\60\1\61\1\0\1\5\2\0"+
    "\1\60\1\0\1\62\1\26\1\0\1\62\1\0\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\170"+
    "\0\u01a4\0\u01e0\0\u021c\0\170\0\170\0\170\0\u0258\0\u0294"+
    "\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03c0\0\170\0\u03fc"+
    "\0\170\0\170\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\170\0\170"+
    "\0\170\0\u0168\0\170\0\170\0\u021c\0\u0708\0\u0744\0\u0780"+
    "\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960"+
    "\0\u099c\0\u09d8\0\u01a4\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04"+
    "\0\u0b40\0\u0b7c\0\u0bb8\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8"+
    "\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88"+
    "\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u0b7c"+
    "\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c"+
    "\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec"+
    "\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u01a4\0\u01a4\0\u1554"+
    "\0\u1590\0\u15cc\0\u01a4\0\u1608\0\u01a4\0\u01a4\0\u1644\0\u1680"+
    "\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860"+
    "\0\u189c\0\u18d8\0\u01a4\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04"+
    "\0\u1a40\0\u1a7c\0\u01a4\0\u1ab8\0\u1af4\0\u1b30\0\u01a4\0\u01a4"+
    "\0\u1b6c\0\u1ba8\0\u01a4\0\u01a4\0\u1be4\0\u1c20\0\u1c5c\0\u1c98"+
    "\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u01a4"+
    "\0\u01a4\0\u1e78\0\u1eb4\0\u01a4\0\u1ef0\0\u1f2c\0\u01a4\0\u1f68"+
    "\0\u01a4\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u01a4"+
    "\0\u01a4\0\u210c\0\u01a4\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u01a4"+
    "\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc"+
    "\0\u2418\0\u2454\0\u2490\0\u01a4\0\u24cc\0\u01a4\0\u01a4\0\u2508"+
    "\0\u2544\0\u2580\0\u25bc\0\170\0\u25f8\0\u01a4\0\170\0\u2634"+
    "\0\170\0\u2670\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\3\1\4\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\25"+
    "\1\27\1\30\3\11\1\31\1\32\2\11\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\11\1\41\1\11\1\42"+
    "\4\11\1\43\1\44\1\45\1\11\1\46\2\11\1\47"+
    "\1\50\1\51\2\5\75\3\75\0\1\4\1\0\1\4"+
    "\2\0\1\4\66\0\1\5\73\0\2\5\71\0\7\52"+
    "\1\53\64\52\1\11\10\0\1\11\6\0\1\11\1\0"+
    "\1\11\6\0\4\11\2\0\27\11\3\0\1\11\30\0"+
    "\1\54\45\0\13\55\1\53\60\55\26\0\1\54\1\10"+
    "\64\0\1\56\74\0\1\10\4\0\1\54\65\0\1\22"+
    "\1\0\1\22\7\0\1\57\11\0\1\57\52\0\1\51"+
    "\50\0\2\24\3\0\64\24\31\0\1\10\45\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\20\11\1\60\6\11\3\0\1\11\2\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\20\11\1\61\6\11\3\0\1\11\2\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\1\11\1\62\14\11\1\63\10\11\3\0\1\11"+
    "\2\0\1\11\10\0\1\11\6\0\1\11\1\0\1\11"+
    "\6\0\4\11\2\0\5\11\1\64\21\11\3\0\1\11"+
    "\2\0\1\11\10\0\1\11\6\0\1\11\1\0\1\11"+
    "\6\0\4\11\2\0\13\11\1\65\1\11\1\66\7\11"+
    "\1\67\1\11\3\0\1\11\2\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\11\11"+
    "\1\70\4\11\1\71\10\11\3\0\1\11\2\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\13\11\1\72\13\11\3\0\1\11\2\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\6\11\1\73\20\11\3\0\1\11\2\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\16\11\1\74\10\11\3\0\1\11\2\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\5\11\1\75\21\11\3\0\1\11\2\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\5\11\1\76\14\11\1\77\4\11\3\0\1\11"+
    "\2\0\1\11\10\0\1\11\6\0\1\11\1\0\1\11"+
    "\6\0\4\11\2\0\10\11\1\100\16\11\3\0\1\11"+
    "\2\0\1\11\10\0\1\11\6\0\1\11\1\0\1\11"+
    "\6\0\4\11\2\0\10\11\1\101\16\11\3\0\1\11"+
    "\22\0\1\102\72\0\1\103\2\0\1\104\51\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\20\11\1\105\6\11\3\0\1\11\2\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\5\11\1\106\21\11\3\0\1\11\2\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\21\11\1\107\5\11\3\0\1\11\2\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\14\11\1\110\1\111\11\11\3\0\1\11\2\0"+
    "\1\11\10\0\1\11\6\0\1\11\1\0\1\11\6\0"+
    "\4\11\2\0\6\11\1\112\20\11\3\0\1\11\2\0"+
    "\1\11\10\0\1\11\6\0\1\11\1\0\1\11\6\0"+
    "\4\11\2\0\21\11\1\113\5\11\3\0\1\11\2\0"+
    "\1\11\10\0\1\11\6\0\1\11\1\0\1\11\6\0"+
    "\4\11\2\0\4\11\1\114\22\11\3\0\1\11\2\0"+
    "\1\11\10\0\1\11\6\0\1\11\1\0\1\11\6\0"+
    "\4\11\2\0\11\11\1\115\15\11\3\0\1\11\2\0"+
    "\1\11\10\0\1\11\6\0\1\11\1\0\1\11\6\0"+
    "\4\11\2\0\21\11\1\116\5\11\3\0\1\11\2\0"+
    "\1\11\10\0\1\11\6\0\1\11\1\0\1\11\6\0"+
    "\4\11\2\0\20\11\1\117\6\11\3\0\1\11\2\0"+
    "\1\11\10\0\1\11\6\0\1\11\1\0\1\11\6\0"+
    "\4\11\2\0\16\11\1\120\10\11\3\0\1\11\2\0"+
    "\1\11\10\0\1\11\6\0\1\11\1\0\1\11\6\0"+
    "\4\11\2\0\3\11\1\121\12\11\1\122\10\11\3\0"+
    "\1\11\2\0\1\11\10\0\1\11\6\0\1\11\1\0"+
    "\1\11\6\0\4\11\2\0\22\11\1\123\4\11\3\0"+
    "\1\11\2\0\1\11\10\0\1\11\6\0\1\11\1\0"+
    "\1\11\6\0\4\11\2\0\3\11\1\124\23\11\3\0"+
    "\1\11\2\0\1\11\10\0\1\11\6\0\1\11\1\0"+
    "\1\11\6\0\4\11\2\0\20\11\1\125\6\11\3\0"+
    "\1\11\2\0\1\11\10\0\1\11\6\0\1\11\1\0"+
    "\1\11\6\0\4\11\2\0\5\11\1\126\21\11\3\0"+
    "\1\11\2\0\1\11\10\0\1\11\6\0\1\11\1\0"+
    "\1\11\6\0\4\11\2\0\11\11\1\127\15\11\3\0"+
    "\1\11\3\0\1\130\1\131\1\132\1\133\1\0\1\130"+
    "\62\0\2\131\23\0\1\104\51\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\1\11"+
    "\1\134\25\11\3\0\1\11\2\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\1\11"+
    "\1\135\25\11\3\0\1\11\2\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\5\11"+
    "\1\136\21\11\3\0\1\11\2\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\14\11"+
    "\1\137\12\11\3\0\1\11\2\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\22\11"+
    "\1\140\4\11\3\0\1\11\2\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\11\11"+
    "\1\141\15\11\3\0\1\11\2\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\5\11"+
    "\1\142\21\11\3\0\1\11\2\0\1\11\5\0\1\143"+
    "\2\0\1\11\6\0\1\11\1\0\1\11\6\0\2\11"+
    "\1\144\1\145\2\0\1\146\2\11\1\147\5\11\1\150"+
    "\1\11\1\144\5\11\1\145\5\11\3\0\1\11\2\0"+
    "\1\11\10\0\1\11\6\0\1\11\1\0\1\11\6\0"+
    "\4\11\2\0\22\11\1\151\4\11\3\0\1\11\2\0"+
    "\1\11\10\0\1\11\6\0\1\11\1\0\1\11\6\0"+
    "\4\11\2\0\10\11\1\152\16\11\3\0\1\11\2\0"+
    "\1\11\10\0\1\11\6\0\1\11\1\0\1\11\6\0"+
    "\4\11\2\0\5\11\1\153\21\11\3\0\1\11\2\0"+
    "\1\11\10\0\1\11\6\0\1\11\1\0\1\11\6\0"+
    "\4\11\2\0\2\11\1\154\24\11\3\0\1\11\2\0"+
    "\1\11\10\0\1\11\6\0\1\11\1\0\1\11\6\0"+
    "\4\11\2\0\1\11\1\155\10\11\1\156\14\11\3\0"+
    "\1\11\2\0\1\11\10\0\1\11\6\0\1\11\1\0"+
    "\1\11\6\0\4\11\2\0\17\11\1\157\7\11\3\0"+
    "\1\11\2\0\1\11\10\0\1\11\6\0\1\11\1\0"+
    "\1\11\6\0\4\11\2\0\23\11\1\160\3\11\3\0"+
    "\1\11\2\0\1\11\10\0\1\11\6\0\1\11\1\0"+
    "\1\11\6\0\4\11\2\0\22\11\1\161\4\11\3\0"+
    "\1\11\2\0\1\11\10\0\1\11\6\0\1\11\1\0"+
    "\1\11\6\0\4\11\2\0\23\11\1\162\3\11\3\0"+
    "\1\11\2\0\1\11\10\0\1\11\6\0\1\11\1\0"+
    "\1\11\6\0\4\11\2\0\15\11\1\163\11\11\3\0"+
    "\1\11\2\0\1\11\10\0\1\11\6\0\1\11\1\0"+
    "\1\11\6\0\4\11\2\0\13\11\1\164\13\11\3\0"+
    "\1\11\3\0\1\131\73\0\1\132\1\131\1\132\1\133"+
    "\1\0\1\130\62\0\2\131\2\0\2\131\71\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\26\11\1\165\3\0\1\11\2\0\1\11\10\0"+
    "\1\11\6\0\1\11\1\0\1\11\6\0\4\11\2\0"+
    "\12\11\1\166\14\11\3\0\1\11\2\0\1\11\10\0"+
    "\1\11\6\0\1\11\1\0\1\11\6\0\4\11\2\0"+
    "\1\167\15\11\1\170\10\11\3\0\1\11\2\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\1\11\1\171\25\11\3\0\1\11\2\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\11\11\1\172\15\11\3\0\1\11\2\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\15\11\1\173\11\11\3\0\1\11\2\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\1\174\10\11\1\175\15\11\3\0\1\11\62\0"+
    "\1\176\13\0\1\11\10\0\1\11\6\0\1\11\1\0"+
    "\1\11\6\0\4\11\2\0\16\11\1\177\10\11\3\0"+
    "\1\11\2\0\1\11\10\0\1\11\6\0\1\11\1\0"+
    "\1\11\6\0\4\11\2\0\5\11\1\200\21\11\3\0"+
    "\1\11\2\0\1\11\10\0\1\11\6\0\1\11\1\0"+
    "\1\11\6\0\4\11\2\0\3\11\1\147\5\11\1\150"+
    "\1\11\1\144\5\11\1\145\5\11\3\0\1\11\2\0"+
    "\1\11\10\0\1\11\6\0\1\11\1\0\1\11\6\0"+
    "\4\11\2\0\1\11\1\201\14\11\1\202\10\11\3\0"+
    "\1\11\2\0\1\11\10\0\1\11\6\0\1\11\1\0"+
    "\1\11\6\0\4\11\2\0\6\11\1\203\20\11\3\0"+
    "\1\11\2\0\1\11\5\0\1\204\2\0\1\11\6\0"+
    "\1\11\1\0\1\11\6\0\2\11\1\205\1\206\2\0"+
    "\1\207\12\11\1\205\5\11\1\206\5\11\3\0\1\11"+
    "\2\0\1\11\5\0\1\210\2\0\1\11\6\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\27\11\3\0\1\11"+
    "\2\0\1\11\10\0\1\11\6\0\1\11\1\0\1\11"+
    "\6\0\4\11\2\0\1\11\1\211\25\11\3\0\1\11"+
    "\2\0\1\11\10\0\1\11\6\0\1\11\1\0\1\11"+
    "\6\0\4\11\2\0\1\11\1\212\25\11\3\0\1\11"+
    "\2\0\1\11\10\0\1\11\6\0\1\11\1\0\1\11"+
    "\6\0\4\11\2\0\13\11\1\213\13\11\3\0\1\11"+
    "\2\0\1\11\10\0\1\11\6\0\1\11\1\0\1\11"+
    "\6\0\4\11\2\0\20\11\1\214\6\11\3\0\1\11"+
    "\2\0\1\11\10\0\1\11\6\0\1\11\1\0\1\11"+
    "\6\0\4\11\2\0\11\11\1\215\15\11\3\0\1\11"+
    "\2\0\1\11\10\0\1\11\6\0\1\11\1\0\1\11"+
    "\6\0\4\11\2\0\3\11\1\216\23\11\3\0\1\11"+
    "\2\0\1\11\10\0\1\11\6\0\1\11\1\0\1\11"+
    "\6\0\4\11\2\0\5\11\1\217\21\11\3\0\1\11"+
    "\2\0\1\11\10\0\1\11\6\0\1\11\1\0\1\11"+
    "\6\0\4\11\2\0\16\11\1\170\10\11\3\0\1\11"+
    "\2\0\1\11\10\0\1\11\6\0\1\11\1\0\1\11"+
    "\6\0\4\11\2\0\6\11\1\220\20\11\3\0\1\11"+
    "\2\0\1\11\10\0\1\11\6\0\1\11\1\0\1\11"+
    "\6\0\4\11\2\0\15\11\1\221\11\11\3\0\1\11"+
    "\2\0\1\11\10\0\1\11\6\0\1\11\1\0\1\11"+
    "\6\0\4\11\2\0\15\11\1\222\11\11\3\0\1\11"+
    "\2\0\1\11\10\0\1\11\6\0\1\11\1\0\1\11"+
    "\6\0\4\11\2\0\5\11\1\223\21\11\3\0\1\11"+
    "\2\0\1\11\10\0\1\11\6\0\1\11\1\0\1\11"+
    "\6\0\4\11\2\0\11\11\1\175\15\11\3\0\1\11"+
    "\2\0\1\11\10\0\1\11\6\0\1\11\1\0\1\11"+
    "\6\0\4\11\2\0\6\11\1\224\20\11\3\0\1\11"+
    "\46\0\1\225\27\0\1\11\10\0\1\11\6\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\16\11\1\226\10\11"+
    "\3\0\1\11\2\0\1\11\10\0\1\11\6\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\3\11\1\227\23\11"+
    "\3\0\1\11\2\0\1\11\10\0\1\11\6\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\21\11\1\230\5\11"+
    "\3\0\1\11\2\0\1\11\10\0\1\11\6\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\14\11\1\231\12\11"+
    "\3\0\1\11\62\0\1\232\13\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\16\11"+
    "\1\233\10\11\3\0\1\11\2\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\5\11"+
    "\1\234\21\11\3\0\1\11\2\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\13\11"+
    "\1\205\5\11\1\206\5\11\3\0\1\11\45\0\1\235"+
    "\11\0\1\236\16\0\1\11\10\0\1\11\6\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\3\11\1\237\23\11"+
    "\3\0\1\11\2\0\1\11\10\0\1\11\6\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\13\11\1\240\13\11"+
    "\3\0\1\11\2\0\1\11\10\0\1\11\6\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\15\11\1\241\11\11"+
    "\3\0\1\11\2\0\1\11\10\0\1\11\6\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\16\11\1\242\10\11"+
    "\3\0\1\11\2\0\1\11\10\0\1\11\6\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\22\11\1\243\4\11"+
    "\3\0\1\11\2\0\1\11\10\0\1\11\6\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\4\11\1\244\22\11"+
    "\3\0\1\11\2\0\1\11\10\0\1\11\6\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\23\11\1\245\3\11"+
    "\3\0\1\11\44\0\1\246\31\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\17\11"+
    "\1\247\7\11\3\0\1\11\2\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\22\11"+
    "\1\250\4\11\3\0\1\11\2\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\5\11"+
    "\1\251\21\11\3\0\1\11\2\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\14\11"+
    "\1\252\12\11\3\0\1\11\46\0\1\253\27\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\16\11\1\254\10\11\3\0\1\11\2\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\3\11\1\255\23\11\3\0\1\11\46\0\1\256"+
    "\105\0\1\257\15\0\1\11\10\0\1\11\6\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\10\11\1\260\16\11"+
    "\3\0\1\11\2\0\1\11\10\0\1\11\6\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\15\11\1\261\11\11"+
    "\3\0\1\11\2\0\1\11\10\0\1\11\6\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\23\11\1\262\3\11"+
    "\3\0\1\11\2\0\1\11\10\0\1\11\6\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\5\11\1\263\21\11"+
    "\3\0\1\11\63\0\1\264\12\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\11\11"+
    "\1\265\15\11\3\0\1\11\2\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\1\11"+
    "\1\266\25\11\3\0\1\11\44\0\1\267\31\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\17\11\1\270\7\11\3\0\1\11\2\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\22\11\1\271\4\11\3\0\1\11\47\0\1\272"+
    "\72\0\1\273\27\0\1\11\10\0\1\11\6\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\20\11\1\274\6\11"+
    "\3\0\1\11\52\0\1\275\23\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\16\11"+
    "\1\276\10\11\3\0\1\11\2\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\15\11"+
    "\1\277\11\11\3\0\1\11\63\0\1\300\12\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\11\11\1\301\15\11\3\0\1\11\52\0\1\302"+
    "\102\0\1\303\14\0\1\11\10\0\1\11\6\0\1\11"+
    "\1\0\1\11\6\0\4\11\2\0\5\11\1\304\21\11"+
    "\3\0\1\11\57\0\1\305\16\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\15\11"+
    "\1\306\11\11\3\0\1\11\2\0\1\11\10\0\1\11"+
    "\6\0\1\11\1\0\1\11\6\0\4\11\2\0\4\11"+
    "\1\307\22\11\3\0\1\11\52\0\1\310\23\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\16\11\1\311\10\11\3\0\1\11\56\0\1\312"+
    "\57\0\1\313\107\0\1\314\74\0\1\315\16\0\1\11"+
    "\10\0\1\11\6\0\1\11\1\0\1\11\6\0\4\11"+
    "\2\0\15\11\1\316\11\11\3\0\1\11\46\0\1\317"+
    "\110\0\1\320\66\0\1\321\74\0\1\322\75\0\1\323"+
    "\14\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9900];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\1\11\3\1\3\11\10\1\1\11"+
    "\1\1\2\11\14\1\3\11\1\0\2\11\3\0\23\1"+
    "\1\0\24\1\1\0\12\1\1\0\32\1\1\0\5\1"+
    "\1\0\3\1\1\0\14\1\1\0\4\1\1\0\2\1"+
    "\2\0\7\1\1\0\4\1\1\0\2\1\2\0\4\1"+
    "\1\0\2\1\1\0\2\1\2\0\1\1\1\0\2\1"+
    "\1\0\1\1\2\0\1\1\1\0\2\1\1\0\1\1"+
    "\2\0\1\11\1\0\1\1\1\11\1\0\1\11\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SimpleLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 52: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 53: break;
          case 3:
            { return SimpleTypes.NEWLINE;
            }
          // fall through
          case 54: break;
          case 4:
            { return SimpleTypes.BINARY_OPERATOR;
            }
          // fall through
          case 55: break;
          case 5:
            { return SimpleTypes.IDENTIFIER;
            }
          // fall through
          case 56: break;
          case 6:
            { return SimpleTypes.LEFT_PARENTHESIS;
            }
          // fall through
          case 57: break;
          case 7:
            { return SimpleTypes.RIGHT_PARENTHESIS;
            }
          // fall through
          case 58: break;
          case 8:
            { return SimpleTypes.COMMA_OPERATOR;
            }
          // fall through
          case 59: break;
          case 9:
            { return SimpleTypes.MINUS_OPERATOR;
            }
          // fall through
          case 60: break;
          case 10:
            { return SimpleTypes.DOT_OPERATOR;
            }
          // fall through
          case 61: break;
          case 11:
            { return SimpleTypes.NUMBER_LITERAL;
            }
          // fall through
          case 62: break;
          case 12:
            { return SimpleTypes.COMMENT;
            }
          // fall through
          case 63: break;
          case 13:
            { return SimpleTypes.ASSIGNMENT_OPERATOR;
            }
          // fall through
          case 64: break;
          case 14:
            { return SimpleTypes.FUNCTION_CALL_OPERATOR;
            }
          // fall through
          case 65: break;
          case 15:
            { return SimpleTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 66: break;
          case 16:
            { return SimpleTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 67: break;
          case 17:
            { return SimpleTypes.RIGHT_CURLY_BRACKET;
            }
          // fall through
          case 68: break;
          case 18:
            { return SimpleTypes.LEFT_CURLY_BRACKET;
            }
          // fall through
          case 69: break;
          case 19:
            { return SimpleTypes.UNARY_OPERATOR;
            }
          // fall through
          case 70: break;
          case 20:
            { return SimpleTypes.STRING_LITERAL;
            }
          // fall through
          case 71: break;
          case 21:
            { return SimpleTypes.IF;
            }
          // fall through
          case 72: break;
          case 22:
            { return SimpleTypes.FISH_DEFINE;
            }
          // fall through
          case 73: break;
          case 23:
            { return SimpleTypes.END;
            }
          // fall through
          case 74: break;
          case 24:
            { return SimpleTypes.FOR;
            }
          // fall through
          case 75: break;
          case 25:
            { return SimpleTypes.CASE;
            }
          // fall through
          case 76: break;
          case 26:
            { return SimpleTypes.ELSE;
            }
          // fall through
          case 77: break;
          case 27:
            { return SimpleTypes.EXIT;
            }
          // fall through
          case 78: break;
          case 28:
            { return SimpleTypes.LOCK;
            }
          // fall through
          case 79: break;
          case 29:
            { return SimpleTypes.LOOP;
            }
          // fall through
          case 80: break;
          case 30:
            { return SimpleTypes.THEN;
            }
          // fall through
          case 81: break;
          case 31:
            { return SimpleTypes.ARRAY;
            }
          // fall through
          case 82: break;
          case 32:
            { return SimpleTypes.BREAK;
            }
          // fall through
          case 83: break;
          case 33:
            { return SimpleTypes.ENDIF;
            }
          // fall through
          case 84: break;
          case 34:
            { return SimpleTypes.LOCAL;
            }
          // fall through
          case 85: break;
          case 35:
            { return SimpleTypes.WHILE;
            }
          // fall through
          case 86: break;
          case 36:
            { return SimpleTypes.CASEOF;
            }
          // fall through
          case 87: break;
          case 37:
            { return SimpleTypes.ELSEIF;
            }
          // fall through
          case 88: break;
          case 38:
            { return SimpleTypes.GLOBAL;
            }
          // fall through
          case 89: break;
          case 39:
            { return SimpleTypes.RETURN;
            }
          // fall through
          case 90: break;
          case 40:
            { return SimpleTypes.STRUCT;
            }
          // fall through
          case 91: break;
          case 41:
            { return SimpleTypes.COMMAND;
            }
          // fall through
          case 92: break;
          case 42:
            { return SimpleTypes.ENDLOOP;
            }
          // fall through
          case 93: break;
          case 43:
            { return SimpleTypes.ENDCASE;
            }
          // fall through
          case 94: break;
          case 44:
            { return SimpleTypes.FOREACH;
            }
          // fall through
          case 95: break;
          case 45:
            { return SimpleTypes.SECTION;
            }
          // fall through
          case 96: break;
          case 46:
            { return SimpleTypes.CONTINUE;
            }
          // fall through
          case 97: break;
          case 47:
            { return SimpleTypes.EXITLOOP;
            }
          // fall through
          case 98: break;
          case 48:
            { return SimpleTypes.ENDSECTION;
            }
          // fall through
          case 99: break;
          case 49:
            { return SimpleTypes.ENDCOMMAND;
            }
          // fall through
          case 100: break;
          case 50:
            { return SimpleTypes.EXITSECTION;
            }
          // fall through
          case 101: break;
          case 51:
            { return SimpleTypes.FISH_OPERATOR;
            }
          // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
