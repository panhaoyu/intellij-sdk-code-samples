// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
{
  parserClass="org.intellij.sdk.language.parser.SimpleParser"
  parserUtilClass="org.intellij.sdk.language.parser.SimpleParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Simple"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.sdk.language.psi"
  psiImplPackage="org.intellij.sdk.language.psi.impl"

  elementTypeHolderClass="org.intellij.sdk.language.psi.SimpleTypes"
  elementTypeClass="org.intellij.sdk.language.psi.SimpleElementType"
  tokenTypeClass="org.intellij.sdk.language.psi.SimpleTokenType"

  psiImplUtilClass="org.intellij.sdk.language.psi.impl.SimplePsiImplUtil"
}

simpleFile ::= item_*

private item_ ::= (statement|functionDefinition|comment|separator|crlf)

private functionDefinition ::= 'fish' 'define' functionName '(' parameterList ')' controlStructure
private functionName ::= IDENTIFIER
private parameterList ::= (parameter (',' parameter)* )?
private parameter ::= IDENTIFIER

private controlStructure ::= statementBlock
private statementBlock ::= '{' statement* '}'

private statement ::= controlFlow | assignment | functionCall | comment | variableDeclaration

private controlFlow ::= ifStatement | loopStatement | caseStatement

private ifStatement ::= 'if' expression 'then' statementBlock elseIfStatement* elseStatement? 'end_if'
private elseIfStatement ::= 'else' 'if' expression 'then' statementBlock
private elseStatement ::=  'else' statementBlock

private loopStatement ::= 'loop' statementBlock 'end_loop'
private caseStatement ::= 'case_of' expression caseClause* 'end_case'
private caseClause ::= 'case' expression statementBlock

private assignment ::= IDENTIFIER '=' expression
private functionCall ::= IDENTIFIER '(' argumentList ')'
private argumentList ::= (expression (',' expression)* )?

private variableDeclaration ::= 'local' IDENTIFIER ('=' expression)?

private expression ::= binaryExpression | unaryExpression | literal | IDENTIFIER
private binaryExpression ::= expression operator expression
private unaryExpression ::= operator expression
private literal ::= STRING_LITERAL | NUMBER_LITERAL

private operator ::= OPERATOR

private comment ::= COMMENT
private separator ::= SEPARATOR
private crlf ::= CRLF
//noinspection BnfUnusedRule
private keyword ::= KEYWORD
