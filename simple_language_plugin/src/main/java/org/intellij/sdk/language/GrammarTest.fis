[abc="abc"]
LEFT_SQUARE_BRACKET IDENTIFIER ASSIGNMENT_OPERATOR STRING_LITERAL RIGHT_SQUARE_BRACKET





[io.out('## mvMake (entering).')]
LEFT_SQUARE_BRACKET IDENTIFIER LEFT_PARENTHESIS STRING_LITERAL RIGHT_PARENTHESIS RIGHT_SQUARE_BRACKET



fish define mvMake
    io.out('## mvMake (entering).')
end

FISH DEFINE IDENTIFIER
    IDENTIFIER LEFT_PARENTHESIS STRING_LITERAL RIGHT_PARENTHESIS
END


fish define mvMake
    ft_setGrainWallBehavior( 'existing', 'linear' )
end

FISH DEFINE IDENTIFIER
    IDENTIFIER LEFT_PARENTHESIS STRING_LITERAL COMMA_OPERATOR STRING_LITERAL RIGHT_PARENTHESIS
END

fish define mvMake
    wall.pos(mvWp0x, 1) = "-0.5*mv_D"
end

FISH DEFINE IDENTIFIER
    IDENTIFIER LEFT_PARENTHESIS STRING_LITERAL COMMA_OPERATOR STRING_LITERAL RIGHT_PARENTHESIS ASSIGNMENT_OPERATOR STRING_LITERAL
END

fish define mvMake
    wall.pos(mvWp0x, 1) = -0.5*mv_D
end

FISH DEFINE IDENTIFIER
    IDENTIFIER LEFT_PARENTHESIS STRING_LITERAL COMMA_OPERATOR STRING_LITERAL RIGHT_PARENTHESIS ASSIGNMENT_OPERATOR UNARY_OPERATOR NUMBER_LITERAL BINARY_OPERATOR IDENTIFIER
END

[wall.pos(mvWp0x, 1) = -0.5*mv_D]
LEFT_SQUARE_BRACKET
IDENTIFIER
LEFT_PARENTHESIS
IDENTIFIER
COMMA_OPERATOR
NUMBER_LITERAL
RIGHT_PARENTHESIS
ASSIGNMENT_OPERATOR
MINUS_OPERATOR
NUMBER_LITERAL
BINARY_OPERATOR
IDENTIFIER
RIGHT_SQUARE_BRACKET

[mvWp0x = -0.5*mv_D]
LEFT_SQUARE_BRACKET
IDENTIFIER
ASSIGNMENT_OPERATOR
MINUS_OPERATOR
NUMBER_LITERAL
BINARY_OPERATOR
IDENTIFIER
RIGHT_SQUARE_BRACKET

fish define _mvMakeWalls
    if mv_shape == 0 then
        mvWp0x = 1
    else if mv_shape == 1 then
        mvWp1z  = 2
    else
        sphRad = 3
    end_if
end
FISH DEFINE IDENTIFIER NEWLINE
IF IDENTIFIER BINARY_OPERATOR NUMBER_LITERAL THEN NEWLINE
IDENTIFIER ASSIGNMENT_OPERATOR NUMBER_LITERAL NEWLINE
ELSE IF IDENTIFIER BINARY_OPERATOR NUMBER_LITERAL THEN NEWLINE
IDENTIFIER ASSIGNMENT_OPERATOR NUMBER_LITERAL NEWLINE
ELSE NEWLINE
IDENTIFIER ASSIGNMENT_OPERATOR NUMBER_LITERAL NEWLINE
ENDIF NEWLINE
END