// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Simple.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.intellij.sdk.language;

// 导入 IntelliJ SDK 和其他库所需的类。
import com.intellij.formatting.WhiteSpace;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import groovyjarjarantlr.Token;
import org.bouncycastle.pqc.jcajce.interfaces.SABERKey;
import org.intellij.sdk.language.psi.SimpleTypes;
import com.intellij.psi.TokenType;

// FlexLexer 规范从这里开始。


class SimpleLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\41\u1f00"+
    "\1\u0100\1\u2e00\1\u2f00\1\u0100\1\u3000\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00\1\u4f00\1\u5000\3\u0100"+
    "\1\u5100\1\u5200\1\u5300\11\u1f00\1\u5400\4\u0100\1\u5500\17\u1f00"+
    "\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00\1\u5900"+
    "\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\41\u1f00\1\u5e00"+
    "\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\22\u1f00\1\u6200\1\u1f00"+
    "\1\u6300\1\u6400\1\u1f00\1\u6500\1\u6600\1\u6700\1\u6800\2\u1f00"+
    "\1\u6900\4\u1f00\1\u6a00\1\u6b00\1\u6c00\1\u6d00\1\u1f00\1\u6e00"+
    "\2\u1f00\1\u6f00\1\u7000\1\u7100\2\u1f00\1\u7200\1\u1f00\1\u7300"+
    "\14\u1f00\1\u7400\4\u1f00\246\u0100\1\u7500\20\u0100\1\u7600\1\u7700"+
    "\25\u0100\1\u7800\34\u0100\1\u7900\14\u1f00\2\u0100\1\u7a00\5\u1f00"+
    "\23\u0100\1\u7b00\17\u0100\1\u7c00\u0adc\u1f00\1\u7d00\1\u7e00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\16\0\4\5\1\6"+
    "\1\5\1\7\1\10\1\11\1\12\1\10\1\13\1\14"+
    "\1\15\2\12\1\16\1\17\1\20\1\21\12\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\5\1\30\1\31\3\11"+
    "\1\32\6\11\1\33\6\11\1\34\7\11\1\35\1\5"+
    "\1\36\1\10\1\37\1\5\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\11\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\11\1\57\1\60\1\61"+
    "\1\62\1\11\1\63\1\64\1\65\1\11\1\66\1\10"+
    "\1\67\1\70\6\0\1\71\32\0\2\5\4\11\4\5"+
    "\1\11\2\5\1\0\7\5\1\11\4\5\1\11\5\5"+
    "\27\11\1\5\37\11\1\5\u01ca\11\4\5\14\11\16\5"+
    "\5\11\7\5\1\11\1\5\1\11\21\5\160\0\5\11"+
    "\1\5\2\11\2\5\4\11\1\5\1\11\6\5\1\11"+
    "\1\5\3\11\1\5\1\11\1\5\24\11\1\5\123\11"+
    "\1\5\213\11\1\5\5\0\2\5\246\11\1\5\46\11"+
    "\2\5\1\11\6\5\51\11\6\5\1\11\1\5\55\0"+
    "\1\5\1\0\1\5\2\0\1\5\2\0\1\5\1\0"+
    "\10\5\33\11\4\5\4\11\15\5\6\0\5\5\1\11"+
    "\4\5\13\0\1\5\1\0\3\5\53\11\37\0\4\5"+
    "\2\11\1\0\143\11\1\5\1\11\10\0\1\5\6\0"+
    "\2\11\2\0\1\5\4\0\2\11\12\0\3\11\2\5"+
    "\1\11\17\5\1\0\1\11\1\0\36\11\33\0\2\5"+
    "\131\11\13\0\1\11\16\5\12\0\41\11\11\0\2\11"+
    "\4\5\1\11\2\5\1\0\30\11\4\0\1\11\11\0"+
    "\1\11\3\0\1\11\5\0\22\5\31\11\3\0\4\5"+
    "\13\11\5\5\30\11\1\5\6\11\1\5\2\0\6\5"+
    "\10\0\52\11\72\0\66\11\3\0\1\11\22\0\1\11"+
    "\7\0\12\11\2\0\2\5\12\0\1\5\20\11\3\0"+
    "\1\5\10\11\2\5\2\11\2\5\26\11\1\5\7\11"+
    "\1\5\1\11\3\5\4\11\2\5\1\0\1\11\7\0"+
    "\2\5\2\0\2\5\3\0\1\11\10\5\1\0\4\5"+
    "\2\11\1\5\3\11\2\0\2\5\12\0\4\11\7\5"+
    "\2\11\1\5\1\0\2\5\3\0\1\5\6\11\4\5"+
    "\2\11\2\5\26\11\1\5\7\11\1\5\2\11\1\5"+
    "\2\11\1\5\2\11\2\5\1\0\1\5\5\0\4\5"+
    "\2\0\2\5\3\0\3\5\1\0\7\5\4\11\1\5"+
    "\1\11\7\5\14\0\3\11\1\0\13\5\3\0\1\5"+
    "\11\11\1\5\3\11\1\5\26\11\1\5\7\11\1\5"+
    "\2\11\1\5\5\11\2\5\1\0\1\11\10\0\1\5"+
    "\3\0\1\5\3\0\2\5\1\11\17\5\2\11\2\0"+
    "\2\5\12\0\1\5\1\11\7\5\1\11\6\0\1\5"+
    "\3\0\1\5\10\11\2\5\2\11\2\5\26\11\1\5"+
    "\7\11\1\5\2\11\1\5\5\11\2\5\1\0\1\11"+
    "\7\0\2\5\2\0\2\5\3\0\7\5\3\0\4\5"+
    "\2\11\1\5\3\11\2\0\2\5\12\0\1\5\1\11"+
    "\20\5\1\0\1\11\1\5\6\11\3\5\3\11\1\5"+
    "\4\11\3\5\2\11\1\5\1\11\1\5\2\11\3\5"+
    "\2\11\3\5\3\11\3\5\14\11\4\5\5\0\3\5"+
    "\3\0\1\5\4\0\2\5\1\11\6\5\1\0\16\5"+
    "\12\0\11\5\1\11\6\5\5\0\10\11\1\5\3\11"+
    "\1\5\27\11\1\5\20\11\2\5\1\0\1\11\7\0"+
    "\1\5\3\0\1\5\4\0\7\5\2\0\1\5\3\11"+
    "\2\5\1\11\2\5\2\11\2\0\2\5\12\0\20\5"+
    "\1\11\3\0\1\5\10\11\1\5\3\11\1\5\27\11"+
    "\1\5\12\11\1\5\5\11\2\5\1\0\1\11\7\0"+
    "\1\5\3\0\1\5\4\0\7\5\2\0\6\5\2\11"+
    "\1\5\2\11\2\0\2\5\12\0\1\5\2\11\1\0"+
    "\14\5\4\0\11\11\1\5\3\11\1\5\51\11\2\0"+
    "\1\11\7\0\1\5\3\0\1\5\4\0\1\11\5\5"+
    "\3\11\1\0\7\5\3\11\2\0\2\5\12\0\12\5"+
    "\6\11\1\5\3\0\1\5\22\11\3\5\30\11\1\5"+
    "\11\11\1\5\1\11\2\5\7\11\3\5\1\0\4\5"+
    "\6\0\1\5\1\0\1\5\10\0\6\5\12\0\2\5"+
    "\2\0\15\5\60\11\1\0\2\11\7\0\4\5\10\11"+
    "\10\0\1\5\12\0\47\5\2\11\1\5\1\11\1\5"+
    "\5\11\1\5\30\11\1\5\1\11\1\5\12\11\1\0"+
    "\2\11\11\0\1\11\2\5\5\11\1\5\1\11\1\5"+
    "\7\0\1\5\12\0\2\5\4\11\40\5\1\11\27\5"+
    "\2\0\6\5\12\0\13\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\2\0\10\11\1\5\44\11\4\5\24\0"+
    "\1\5\2\0\5\11\13\0\1\5\44\0\11\5\1\0"+
    "\71\5\53\11\24\0\1\11\12\0\6\5\6\11\4\0"+
    "\4\11\3\0\1\11\3\0\2\11\7\0\3\11\4\0"+
    "\15\11\14\0\1\11\17\0\2\5\46\11\1\5\1\11"+
    "\5\5\1\11\2\5\53\11\1\5\115\11\1\5\4\11"+
    "\2\5\7\11\1\5\1\11\1\5\4\11\2\5\51\11"+
    "\1\5\4\11\2\5\41\11\1\5\4\11\2\5\7\11"+
    "\1\5\1\11\1\5\4\11\2\5\17\11\1\5\71\11"+
    "\1\5\4\11\2\5\103\11\2\5\3\0\40\5\20\11"+
    "\20\5\126\11\2\5\6\11\3\5\u016c\11\2\5\21\11"+
    "\1\5\32\11\5\5\113\11\3\5\13\11\7\5\22\11"+
    "\4\0\11\5\23\11\3\0\13\5\22\11\2\0\14\5"+
    "\15\11\1\5\3\11\1\5\2\0\14\5\64\11\40\0"+
    "\3\5\1\11\3\5\2\11\1\0\2\5\12\0\41\5"+
    "\17\0\6\5\131\11\7\5\5\11\2\0\42\11\1\0"+
    "\1\11\5\5\106\11\12\5\37\11\1\5\14\0\4\5"+
    "\14\0\12\5\12\0\36\11\2\5\5\11\13\5\54\11"+
    "\4\5\32\11\6\5\12\0\46\5\27\11\5\0\4\5"+
    "\65\11\12\0\1\5\35\0\2\5\13\0\6\5\12\0"+
    "\15\5\1\11\10\5\16\0\1\5\20\0\61\5\5\0"+
    "\57\11\21\0\10\11\3\5\12\0\21\5\11\0\14\5"+
    "\3\0\36\11\15\0\2\11\12\0\54\11\16\0\14\5"+
    "\44\11\24\0\10\5\12\0\3\5\3\11\12\0\44\11"+
    "\2\5\11\11\7\5\53\11\2\5\3\11\20\5\3\0"+
    "\1\5\25\0\4\11\1\0\6\11\1\0\2\11\3\0"+
    "\1\11\5\5\300\11\100\0\26\11\2\5\6\11\2\5"+
    "\46\11\2\5\6\11\2\5\10\11\1\5\1\11\1\5"+
    "\1\11\1\5\1\11\1\5\37\11\2\5\65\11\1\5"+
    "\7\11\1\5\1\11\3\5\3\11\1\5\7\11\3\5"+
    "\4\11\2\5\6\11\4\5\15\11\5\5\3\11\1\5"+
    "\7\11\16\5\5\0\30\5\2\72\5\0\20\5\2\11"+
    "\23\5\1\11\13\5\5\0\1\5\12\0\1\5\1\11"+
    "\15\5\1\11\20\5\15\11\3\5\41\11\17\5\15\0"+
    "\4\5\1\0\3\5\14\0\21\5\1\11\4\5\1\11"+
    "\2\5\12\11\1\5\1\11\3\5\5\11\6\5\1\11"+
    "\1\5\1\11\1\5\1\11\1\5\4\11\1\5\13\11"+
    "\2\5\4\11\5\5\5\11\4\5\1\11\21\5\51\11"+
    "\u0177\5\345\11\6\5\4\11\3\0\2\11\14\5\46\11"+
    "\1\5\1\11\5\5\1\11\2\5\70\11\7\5\1\11"+
    "\17\5\1\0\27\11\11\5\7\11\1\5\7\11\1\5"+
    "\7\11\1\5\7\11\1\5\7\11\1\5\7\11\1\5"+
    "\7\11\1\5\7\11\1\5\40\0\57\5\1\11\325\5"+
    "\3\11\31\5\11\11\6\0\1\5\5\11\2\5\5\11"+
    "\4\5\126\11\2\5\2\0\2\5\3\11\1\5\132\11"+
    "\1\5\4\11\5\5\53\11\1\5\136\11\21\5\40\11"+
    "\60\5\320\11\100\5\215\11\103\5\56\11\2\5\15\11"+
    "\3\5\20\11\12\0\2\11\24\5\57\11\1\0\4\5"+
    "\12\0\1\5\37\11\2\0\120\11\2\0\45\5\11\11"+
    "\2\5\147\11\2\5\100\11\5\5\2\11\1\5\1\11"+
    "\1\5\5\11\30\5\20\11\1\0\3\11\1\0\4\11"+
    "\1\0\27\11\5\0\4\5\1\0\13\5\1\11\7\5"+
    "\64\11\14\5\2\0\62\11\22\0\12\5\12\0\6\5"+
    "\22\0\6\11\3\5\1\11\1\5\2\11\13\0\34\11"+
    "\10\0\2\5\27\11\15\0\14\5\35\11\3\5\4\0"+
    "\57\11\16\0\16\5\1\11\12\0\6\5\5\11\1\0"+
    "\12\11\12\0\5\11\1\5\51\11\16\0\11\5\3\11"+
    "\1\0\10\11\2\0\2\5\12\0\6\5\27\11\3\5"+
    "\1\11\3\0\62\11\1\0\1\11\3\0\2\11\2\0"+
    "\5\11\2\0\1\11\1\0\1\11\30\5\3\11\2\5"+
    "\13\11\5\0\2\5\3\11\2\0\12\5\6\11\2\5"+
    "\6\11\2\5\6\11\11\5\7\11\1\5\7\11\1\5"+
    "\53\11\1\5\16\11\6\5\163\11\10\0\1\5\2\0"+
    "\2\5\12\0\6\5\244\11\14\5\27\11\4\5\61\11"+
    "\4\5\156\11\2\5\152\11\46\5\7\11\14\5\5\11"+
    "\5\5\1\11\1\0\12\11\1\5\15\11\1\5\5\11"+
    "\1\5\1\11\1\5\2\11\1\5\2\11\1\5\154\11"+
    "\41\5\153\11\22\5\100\11\2\5\66\11\50\5\15\11"+
    "\3\5\20\0\20\5\20\0\3\5\2\11\30\5\3\11"+
    "\31\5\1\11\6\5\5\11\1\5\207\11\2\5\1\0"+
    "\4\5\1\11\13\5\12\0\7\5\32\11\4\5\1\11"+
    "\1\5\32\11\13\5\131\11\3\5\6\11\2\5\6\11"+
    "\2\5\6\11\2\5\3\11\3\5\2\11\3\5\2\11"+
    "\22\5\3\0\4\5\14\11\1\5\32\11\1\5\23\11"+
    "\1\5\2\11\1\5\17\11\2\5\16\11\42\5\173\11"+
    "\105\5\65\11\210\5\1\0\202\5\35\11\3\5\61\11"+
    "\17\5\1\0\37\5\40\11\15\5\36\11\5\5\46\11"+
    "\5\0\5\5\36\11\2\5\44\11\4\5\10\11\1\5"+
    "\5\11\52\5\236\11\2\5\12\0\6\5\44\11\4\5"+
    "\44\11\4\5\50\11\10\5\64\11\14\5\13\11\1\5"+
    "\17\11\1\5\7\11\1\5\2\11\1\5\13\11\1\5"+
    "\17\11\1\5\7\11\1\5\2\11\103\5\67\11\11\5"+
    "\26\11\12\5\10\11\30\5\6\11\1\5\52\11\1\5"+
    "\11\11\105\5\6\11\2\5\1\11\1\5\54\11\1\5"+
    "\2\11\3\5\1\11\2\5\27\11\12\5\27\11\11\5"+
    "\37\11\101\5\23\11\1\5\2\11\12\5\26\11\12\5"+
    "\32\11\106\5\70\11\6\5\2\11\100\5\1\11\3\0"+
    "\1\5\2\0\5\5\4\0\4\11\1\5\3\11\1\5"+
    "\35\11\2\5\3\0\4\5\1\0\40\5\35\11\3\5"+
    "\35\11\43\5\10\11\1\5\34\11\2\0\31\5\66\11"+
    "\12\5\26\11\12\5\23\11\15\5\22\11\156\5\111\11"+
    "\67\5\63\11\15\5\63\11\15\5\44\11\4\0\10\5"+
    "\12\0\u0146\5\52\11\1\5\2\0\3\5\2\11\113\5"+
    "\3\0\35\11\12\5\1\11\10\5\26\11\13\0\37\5"+
    "\22\11\4\0\52\5\25\11\33\5\27\11\11\5\3\0"+
    "\65\11\17\0\37\5\13\0\2\11\2\0\1\11\11\5"+
    "\4\0\55\11\13\0\2\5\1\0\4\5\1\0\12\5"+
    "\1\0\2\5\31\11\7\5\12\0\6\5\3\0\44\11"+
    "\16\0\1\5\12\0\4\5\1\11\2\0\1\11\10\5"+
    "\43\11\1\0\2\5\1\11\11\5\3\0\60\11\16\0"+
    "\4\11\4\5\4\0\1\5\14\0\1\11\1\5\1\11"+
    "\43\5\22\11\1\5\31\11\14\0\6\5\1\0\2\11"+
    "\1\0\76\5\7\11\1\5\1\11\1\5\4\11\1\5"+
    "\17\11\1\5\12\11\7\5\57\11\14\0\5\5\12\0"+
    "\6\5\4\0\1\5\10\11\2\5\2\11\2\5\26\11"+
    "\1\5\7\11\1\5\2\11\1\5\5\11\1\5\2\0"+
    "\1\11\7\0\2\5\2\0\2\5\3\0\2\5\1\11"+
    "\6\5\1\0\5\5\5\11\2\0\2\5\7\0\3\5"+
    "\5\0\213\5\65\11\22\0\4\11\5\5\12\0\4\5"+
    "\1\0\3\11\36\5\60\11\24\0\2\11\1\5\1\11"+
    "\10\5\12\0\246\5\57\11\7\0\2\5\11\0\27\5"+
    "\4\11\2\0\42\5\60\11\21\0\3\5\1\11\13\5"+
    "\12\0\46\5\53\11\15\0\1\11\7\5\12\0\66\5"+
    "\33\11\2\5\17\0\4\5\12\0\6\5\7\11\271\5"+
    "\54\11\17\0\145\5\100\11\12\0\25\5\10\11\2\5"+
    "\1\11\2\5\10\11\1\5\2\11\1\5\30\11\6\0"+
    "\1\5\2\0\2\5\4\0\1\11\1\0\1\11\2\0"+
    "\14\5\12\0\106\5\10\11\2\5\47\11\7\0\2\5"+
    "\7\0\1\11\1\5\1\11\1\0\33\5\1\11\12\0"+
    "\50\11\7\0\1\11\4\0\10\5\1\0\10\5\1\11"+
    "\13\0\56\11\20\0\3\5\1\11\22\5\111\11\7\5"+
    "\11\11\1\5\45\11\10\0\1\5\10\0\1\11\17\5"+
    "\12\0\30\5\36\11\2\5\26\0\1\5\16\0\111\5"+
    "\7\11\1\5\2\11\1\5\46\11\6\0\3\5\1\0"+
    "\1\5\2\0\1\5\7\0\1\11\1\0\10\5\12\0"+
    "\6\5\6\11\1\5\2\11\1\5\40\11\5\0\1\5"+
    "\2\0\1\5\5\0\1\11\7\5\12\0\u0136\5\23\11"+
    "\4\0\11\5\2\0\1\11\1\0\15\11\1\5\42\11"+
    "\7\0\3\5\5\0\15\5\12\0\126\5\1\11\54\5"+
    "\4\11\37\5\232\11\146\5\157\11\21\5\304\11\u014c\5"+
    "\141\11\17\5\60\11\21\0\6\11\17\0\252\5\107\11"+
    "\271\5\71\11\7\5\37\11\1\5\12\0\6\5\117\11"+
    "\1\5\12\0\6\5\36\11\2\5\5\0\13\5\60\11"+
    "\7\0\11\5\4\11\14\5\12\0\11\5\25\11\5\5"+
    "\23\11\260\5\100\11\200\5\113\11\4\5\1\0\1\11"+
    "\67\0\7\5\4\0\15\11\100\5\2\11\1\5\1\11"+
    "\1\0\13\5\2\0\16\5\370\11\10\5\326\11\52\5"+
    "\11\11\u01e7\5\4\11\1\5\7\11\1\5\2\11\1\5"+
    "\43\11\17\5\1\11\35\5\3\11\2\5\1\11\16\5"+
    "\4\11\10\5\u018c\11\4\5\153\11\5\5\15\11\3\5"+
    "\11\11\7\5\12\11\3\5\2\0\1\5\4\0\134\5"+
    "\56\0\2\5\27\0\u011e\5\5\0\3\5\26\0\2\5"+
    "\7\0\36\5\4\0\224\5\3\0\273\5\125\11\1\5"+
    "\107\11\1\5\2\11\2\5\1\11\2\5\2\11\2\5"+
    "\4\11\1\5\14\11\1\5\1\11\1\5\7\11\1\5"+
    "\101\11\1\5\4\11\2\5\10\11\1\5\7\11\1\5"+
    "\34\11\1\5\4\11\1\5\5\11\1\5\1\11\3\5"+
    "\7\11\1\5\u0154\11\2\5\31\11\1\5\31\11\1\5"+
    "\37\11\1\5\31\11\1\5\37\11\1\5\31\11\1\5"+
    "\37\11\1\5\31\11\1\5\37\11\1\5\31\11\1\5"+
    "\10\11\2\5\151\0\4\5\62\0\10\5\1\0\16\5"+
    "\1\0\26\5\5\0\1\5\17\0\120\5\37\11\6\5"+
    "\6\11\325\5\7\0\1\5\21\0\2\5\7\0\1\5"+
    "\2\0\1\5\5\0\5\5\76\11\41\5\1\0\160\5"+
    "\55\11\3\5\7\0\7\11\2\5\12\0\4\5\1\11"+
    "\u0141\5\36\11\1\0\21\5\54\11\16\0\5\5\1\11"+
    "\320\5\34\11\16\0\346\5\7\11\1\5\4\11\1\5"+
    "\2\11\1\5\17\11\1\5\305\11\13\5\7\0\51\5"+
    "\104\11\7\0\1\11\4\5\12\0\u0156\5\1\11\117\5"+
    "\4\11\1\5\33\11\1\5\2\11\1\5\1\11\2\5"+
    "\1\11\1\5\12\11\1\5\4\11\1\5\1\11\1\5"+
    "\1\11\6\5\1\11\4\5\1\11\1\5\1\11\1\5"+
    "\1\11\1\5\3\11\1\5\2\11\1\5\1\11\2\5"+
    "\1\11\1\5\1\11\1\5\1\11\1\5\1\11\1\5"+
    "\1\11\1\5\2\11\1\5\1\11\2\5\4\11\1\5"+
    "\7\11\1\5\4\11\1\5\4\11\1\5\1\11\1\5"+
    "\12\11\1\5\21\11\5\5\3\11\1\5\5\11\1\5"+
    "\21\11\u0134\5\12\0\6\5\340\11\40\5\72\11\6\5"+
    "\336\11\2\5\u0182\11\16\5\u0131\11\37\5\36\11\342\5"+
    "\113\11\5\5\u0160\11\121\5\1\0\36\5\140\0\200\5"+
    "\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\1\1\4\1\5\1\4"+
    "\1\1\1\6\1\7\1\10\1\11\1\12\1\4\1\13"+
    "\1\1\1\14\1\4\1\15\1\16\1\5\1\17\1\20"+
    "\14\5\1\21\1\22\1\23\1\24\1\25\1\0\1\26"+
    "\1\15\3\0\13\5\1\27\6\5\1\2\1\0\1\13"+
    "\5\5\1\30\1\5\1\31\2\5\1\32\10\5\1\0"+
    "\3\2\2\5\1\33\3\5\1\34\1\0\5\5\1\35"+
    "\4\5\1\36\1\37\3\5\1\40\1\5\1\41\1\42"+
    "\7\5\1\0\4\5\1\43\1\0\3\5\1\0\2\5"+
    "\1\44\3\5\1\45\1\46\2\5\1\30\1\47\1\0"+
    "\4\5\1\0\2\5\2\0\1\5\1\50\1\51\1\5"+
    "\1\52\1\53\1\5\1\0\1\54\1\5\1\55\1\5"+
    "\1\0\2\5\2\0\1\56\1\57\1\5\1\60\1\0"+
    "\2\5\1\0\1\61\1\5\2\0\1\5\1\0\2\5"+
    "\1\0\1\5\2\0\1\52\1\0\1\62\1\63\1\0"+
    "\1\5\2\0\1\62\1\0\1\64\1\30\1\0\1\64"+
    "\1\0\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\261\0\u01d8\0\u0213\0\u024e\0\261\0\261\0\261\0\u0289"+
    "\0\u02c4\0\u02ff\0\u033a\0\u0375\0\261\0\u03b0\0\u03b0\0\261"+
    "\0\u03eb\0\261\0\261\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512"+
    "\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\261"+
    "\0\261\0\261\0\u06ea\0\261\0\u019d\0\261\0\261\0\u024e"+
    "\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2"+
    "\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u01d8\0\u0a24\0\u0a5f"+
    "\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bc1\0\u0bfc"+
    "\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4"+
    "\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac"+
    "\0\u0fe7\0\u1022\0\u0b86\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149"+
    "\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321"+
    "\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9"+
    "\0\u01d8\0\u01d8\0\u1534\0\u156f\0\u15aa\0\u01d8\0\u15e5\0\u01d8"+
    "\0\u01d8\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782"+
    "\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u01d8\0\u18e4\0\u191f"+
    "\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u01d8\0\u1a81\0\u1abc"+
    "\0\u1af7\0\u01d8\0\u01d8\0\u1b32\0\u1b6d\0\u01d8\0\u01d8\0\u1ba8"+
    "\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80"+
    "\0\u1dbb\0\u1df6\0\u01d8\0\u01d8\0\u1e31\0\u1e6c\0\u01d8\0\u1ea7"+
    "\0\u1ee2\0\u01d8\0\u1f1d\0\u01d8\0\u1f58\0\u1f93\0\u1fce\0\u2009"+
    "\0\u2044\0\u207f\0\u01d8\0\u01d8\0\u20ba\0\u01d8\0\u20f5\0\u2130"+
    "\0\u216b\0\u21a6\0\u01d8\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd"+
    "\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u01d8\0\u246a"+
    "\0\u01d8\0\u01d8\0\u24a5\0\u24e0\0\u251b\0\u2556\0\261\0\u2591"+
    "\0\u01d8\0\261\0\u25cc\0\261\0\u2607\0\261";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\5\1\7\1\4\1\5\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\26"+
    "\1\30\1\31\3\12\1\32\1\33\2\12\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\12\1\42\1\12\1\43"+
    "\4\12\1\44\1\45\1\46\1\12\1\47\2\12\1\50"+
    "\1\51\1\52\2\6\73\4\2\53\1\54\70\53\74\0"+
    "\1\5\1\0\1\5\2\0\1\5\65\0\1\6\4\0"+
    "\1\6\65\0\2\6\3\0\1\6\64\0\7\55\1\56"+
    "\63\55\1\12\10\0\1\12\6\0\1\12\1\0\1\12"+
    "\6\0\4\12\2\0\27\12\3\0\1\12\27\0\1\57"+
    "\44\0\13\60\1\56\57\60\26\0\1\57\1\11\63\0"+
    "\1\61\73\0\1\11\4\0\1\57\64\0\1\23\1\0"+
    "\1\23\7\0\1\62\11\0\1\62\51\0\1\52\75\0"+
    "\1\11\44\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\20\12\1\63\6\12\3\0"+
    "\1\12\1\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\20\12\1\64\6\12\3\0"+
    "\1\12\1\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\1\12\1\65\14\12\1\66"+
    "\10\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\5\12\1\67"+
    "\21\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\13\12\1\70"+
    "\1\12\1\71\7\12\1\72\1\12\3\0\1\12\1\0"+
    "\1\12\10\0\1\12\6\0\1\12\1\0\1\12\6\0"+
    "\4\12\2\0\11\12\1\73\4\12\1\74\10\12\3\0"+
    "\1\12\1\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\13\12\1\75\13\12\3\0"+
    "\1\12\1\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\6\12\1\76\20\12\3\0"+
    "\1\12\1\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\16\12\1\77\10\12\3\0"+
    "\1\12\1\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\5\12\1\100\21\12\3\0"+
    "\1\12\1\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\5\12\1\101\14\12\1\102"+
    "\4\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\10\12\1\103"+
    "\16\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\10\12\1\104"+
    "\16\12\3\0\1\12\1\0\2\53\1\0\70\53\20\0"+
    "\1\105\71\0\1\106\2\0\1\107\50\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\20\12\1\110\6\12\3\0\1\12\1\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\5\12\1\111\21\12\3\0\1\12\1\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\21\12\1\112\5\12\3\0\1\12\1\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\14\12\1\113\1\114\11\12\3\0\1\12\1\0\1\12"+
    "\10\0\1\12\6\0\1\12\1\0\1\12\6\0\4\12"+
    "\2\0\6\12\1\115\20\12\3\0\1\12\1\0\1\12"+
    "\10\0\1\12\6\0\1\12\1\0\1\12\6\0\4\12"+
    "\2\0\21\12\1\116\5\12\3\0\1\12\1\0\1\12"+
    "\10\0\1\12\6\0\1\12\1\0\1\12\6\0\4\12"+
    "\2\0\4\12\1\117\22\12\3\0\1\12\1\0\1\12"+
    "\10\0\1\12\6\0\1\12\1\0\1\12\6\0\4\12"+
    "\2\0\11\12\1\120\15\12\3\0\1\12\1\0\1\12"+
    "\10\0\1\12\6\0\1\12\1\0\1\12\6\0\4\12"+
    "\2\0\21\12\1\121\5\12\3\0\1\12\1\0\1\12"+
    "\10\0\1\12\6\0\1\12\1\0\1\12\6\0\4\12"+
    "\2\0\20\12\1\122\6\12\3\0\1\12\1\0\1\12"+
    "\10\0\1\12\6\0\1\12\1\0\1\12\6\0\4\12"+
    "\2\0\16\12\1\123\10\12\3\0\1\12\1\0\1\12"+
    "\10\0\1\12\6\0\1\12\1\0\1\12\6\0\4\12"+
    "\2\0\3\12\1\124\12\12\1\125\10\12\3\0\1\12"+
    "\1\0\1\12\10\0\1\12\6\0\1\12\1\0\1\12"+
    "\6\0\4\12\2\0\22\12\1\126\4\12\3\0\1\12"+
    "\1\0\1\12\10\0\1\12\6\0\1\12\1\0\1\12"+
    "\6\0\4\12\2\0\3\12\1\127\23\12\3\0\1\12"+
    "\1\0\1\12\10\0\1\12\6\0\1\12\1\0\1\12"+
    "\6\0\4\12\2\0\20\12\1\130\6\12\3\0\1\12"+
    "\1\0\1\12\10\0\1\12\6\0\1\12\1\0\1\12"+
    "\6\0\4\12\2\0\5\12\1\131\21\12\3\0\1\12"+
    "\1\0\1\12\10\0\1\12\6\0\1\12\1\0\1\12"+
    "\6\0\4\12\2\0\11\12\1\132\15\12\3\0\1\12"+
    "\2\0\1\133\1\134\1\135\1\136\1\0\1\133\62\0"+
    "\2\134\22\0\1\107\50\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\1\12\1\137"+
    "\25\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\1\12\1\140"+
    "\25\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\5\12\1\141"+
    "\21\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\14\12\1\142"+
    "\12\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\22\12\1\143"+
    "\4\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\11\12\1\144"+
    "\15\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\5\12\1\145"+
    "\21\12\3\0\1\12\1\0\1\12\5\0\1\146\2\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\2\12\1\147"+
    "\1\150\2\0\1\151\2\12\1\152\5\12\1\153\1\12"+
    "\1\147\5\12\1\150\5\12\3\0\1\12\1\0\1\12"+
    "\10\0\1\12\6\0\1\12\1\0\1\12\6\0\4\12"+
    "\2\0\22\12\1\154\4\12\3\0\1\12\1\0\1\12"+
    "\10\0\1\12\6\0\1\12\1\0\1\12\6\0\4\12"+
    "\2\0\10\12\1\155\16\12\3\0\1\12\1\0\1\12"+
    "\10\0\1\12\6\0\1\12\1\0\1\12\6\0\4\12"+
    "\2\0\5\12\1\156\21\12\3\0\1\12\1\0\1\12"+
    "\10\0\1\12\6\0\1\12\1\0\1\12\6\0\4\12"+
    "\2\0\2\12\1\157\24\12\3\0\1\12\1\0\1\12"+
    "\10\0\1\12\6\0\1\12\1\0\1\12\6\0\4\12"+
    "\2\0\1\12\1\160\10\12\1\161\14\12\3\0\1\12"+
    "\1\0\1\12\10\0\1\12\6\0\1\12\1\0\1\12"+
    "\6\0\4\12\2\0\17\12\1\162\7\12\3\0\1\12"+
    "\1\0\1\12\10\0\1\12\6\0\1\12\1\0\1\12"+
    "\6\0\4\12\2\0\23\12\1\163\3\12\3\0\1\12"+
    "\1\0\1\12\10\0\1\12\6\0\1\12\1\0\1\12"+
    "\6\0\4\12\2\0\22\12\1\164\4\12\3\0\1\12"+
    "\1\0\1\12\10\0\1\12\6\0\1\12\1\0\1\12"+
    "\6\0\4\12\2\0\23\12\1\165\3\12\3\0\1\12"+
    "\1\0\1\12\10\0\1\12\6\0\1\12\1\0\1\12"+
    "\6\0\4\12\2\0\15\12\1\166\11\12\3\0\1\12"+
    "\1\0\1\12\10\0\1\12\6\0\1\12\1\0\1\12"+
    "\6\0\4\12\2\0\13\12\1\167\13\12\3\0\1\12"+
    "\2\0\1\134\4\0\1\134\65\0\1\135\1\134\1\135"+
    "\1\136\1\0\1\135\62\0\2\134\1\0\2\134\3\0"+
    "\1\134\64\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\26\12\1\170\3\0\1\12"+
    "\1\0\1\12\10\0\1\12\6\0\1\12\1\0\1\12"+
    "\6\0\4\12\2\0\12\12\1\171\14\12\3\0\1\12"+
    "\1\0\1\12\10\0\1\12\6\0\1\12\1\0\1\12"+
    "\6\0\4\12\2\0\1\172\15\12\1\173\10\12\3\0"+
    "\1\12\1\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\1\12\1\174\25\12\3\0"+
    "\1\12\1\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\11\12\1\175\15\12\3\0"+
    "\1\12\1\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\15\12\1\176\11\12\3\0"+
    "\1\12\1\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\1\177\10\12\1\200\15\12"+
    "\3\0\1\12\61\0\1\201\12\0\1\12\10\0\1\12"+
    "\6\0\1\12\1\0\1\12\6\0\4\12\2\0\16\12"+
    "\1\202\10\12\3\0\1\12\1\0\1\12\10\0\1\12"+
    "\6\0\1\12\1\0\1\12\6\0\4\12\2\0\5\12"+
    "\1\203\21\12\3\0\1\12\1\0\1\12\10\0\1\12"+
    "\6\0\1\12\1\0\1\12\6\0\4\12\2\0\3\12"+
    "\1\152\5\12\1\153\1\12\1\147\5\12\1\150\5\12"+
    "\3\0\1\12\1\0\1\12\10\0\1\12\6\0\1\12"+
    "\1\0\1\12\6\0\4\12\2\0\1\12\1\204\14\12"+
    "\1\205\10\12\3\0\1\12\1\0\1\12\10\0\1\12"+
    "\6\0\1\12\1\0\1\12\6\0\4\12\2\0\6\12"+
    "\1\206\20\12\3\0\1\12\1\0\1\12\5\0\1\207"+
    "\2\0\1\12\6\0\1\12\1\0\1\12\6\0\2\12"+
    "\1\210\1\211\2\0\1\212\12\12\1\210\5\12\1\211"+
    "\5\12\3\0\1\12\1\0\1\12\5\0\1\213\2\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\27\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\1\12\1\214"+
    "\25\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\1\12\1\215"+
    "\25\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\13\12\1\216"+
    "\13\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\20\12\1\217"+
    "\6\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\11\12\1\220"+
    "\15\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\3\12\1\221"+
    "\23\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\5\12\1\222"+
    "\21\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\16\12\1\173"+
    "\10\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\6\12\1\223"+
    "\20\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\15\12\1\224"+
    "\11\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\15\12\1\225"+
    "\11\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\5\12\1\226"+
    "\21\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\11\12\1\200"+
    "\15\12\3\0\1\12\1\0\1\12\10\0\1\12\6\0"+
    "\1\12\1\0\1\12\6\0\4\12\2\0\6\12\1\227"+
    "\20\12\3\0\1\12\45\0\1\230\26\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\16\12\1\231\10\12\3\0\1\12\1\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\3\12\1\232\23\12\3\0\1\12\1\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\21\12\1\233\5\12\3\0\1\12\1\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\14\12\1\234\12\12\3\0\1\12\61\0\1\235\12\0"+
    "\1\12\10\0\1\12\6\0\1\12\1\0\1\12\6\0"+
    "\4\12\2\0\16\12\1\236\10\12\3\0\1\12\1\0"+
    "\1\12\10\0\1\12\6\0\1\12\1\0\1\12\6\0"+
    "\4\12\2\0\5\12\1\237\21\12\3\0\1\12\1\0"+
    "\1\12\10\0\1\12\6\0\1\12\1\0\1\12\6\0"+
    "\4\12\2\0\13\12\1\210\5\12\1\211\5\12\3\0"+
    "\1\12\44\0\1\240\11\0\1\241\15\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\3\12\1\242\23\12\3\0\1\12\1\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\13\12\1\243\13\12\3\0\1\12\1\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\15\12\1\244\11\12\3\0\1\12\1\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\16\12\1\245\10\12\3\0\1\12\1\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\22\12\1\246\4\12\3\0\1\12\1\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\4\12\1\247\22\12\3\0\1\12\1\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\23\12\1\250\3\12\3\0\1\12\43\0\1\251\30\0"+
    "\1\12\10\0\1\12\6\0\1\12\1\0\1\12\6\0"+
    "\4\12\2\0\17\12\1\252\7\12\3\0\1\12\1\0"+
    "\1\12\10\0\1\12\6\0\1\12\1\0\1\12\6\0"+
    "\4\12\2\0\22\12\1\253\4\12\3\0\1\12\1\0"+
    "\1\12\10\0\1\12\6\0\1\12\1\0\1\12\6\0"+
    "\4\12\2\0\5\12\1\254\21\12\3\0\1\12\1\0"+
    "\1\12\10\0\1\12\6\0\1\12\1\0\1\12\6\0"+
    "\4\12\2\0\14\12\1\255\12\12\3\0\1\12\45\0"+
    "\1\256\26\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\16\12\1\257\10\12\3\0"+
    "\1\12\1\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\3\12\1\260\23\12\3\0"+
    "\1\12\45\0\1\261\104\0\1\262\14\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\10\12\1\263\16\12\3\0\1\12\1\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\15\12\1\264\11\12\3\0\1\12\1\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\23\12\1\265\3\12\3\0\1\12\1\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\5\12\1\266\21\12\3\0\1\12\62\0\1\267\11\0"+
    "\1\12\10\0\1\12\6\0\1\12\1\0\1\12\6\0"+
    "\4\12\2\0\11\12\1\270\15\12\3\0\1\12\1\0"+
    "\1\12\10\0\1\12\6\0\1\12\1\0\1\12\6\0"+
    "\4\12\2\0\1\12\1\271\25\12\3\0\1\12\43\0"+
    "\1\272\30\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\17\12\1\273\7\12\3\0"+
    "\1\12\1\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\22\12\1\274\4\12\3\0"+
    "\1\12\46\0\1\275\71\0\1\276\26\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\20\12\1\277\6\12\3\0\1\12\51\0\1\300\22\0"+
    "\1\12\10\0\1\12\6\0\1\12\1\0\1\12\6\0"+
    "\4\12\2\0\16\12\1\301\10\12\3\0\1\12\1\0"+
    "\1\12\10\0\1\12\6\0\1\12\1\0\1\12\6\0"+
    "\4\12\2\0\15\12\1\302\11\12\3\0\1\12\62\0"+
    "\1\303\11\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\11\12\1\304\15\12\3\0"+
    "\1\12\51\0\1\305\101\0\1\306\13\0\1\12\10\0"+
    "\1\12\6\0\1\12\1\0\1\12\6\0\4\12\2\0"+
    "\5\12\1\307\21\12\3\0\1\12\56\0\1\310\15\0"+
    "\1\12\10\0\1\12\6\0\1\12\1\0\1\12\6\0"+
    "\4\12\2\0\15\12\1\311\11\12\3\0\1\12\1\0"+
    "\1\12\10\0\1\12\6\0\1\12\1\0\1\12\6\0"+
    "\4\12\2\0\4\12\1\312\22\12\3\0\1\12\51\0"+
    "\1\313\22\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\16\12\1\314\10\12\3\0"+
    "\1\12\55\0\1\315\56\0\1\316\106\0\1\317\73\0"+
    "\1\320\15\0\1\12\10\0\1\12\6\0\1\12\1\0"+
    "\1\12\6\0\4\12\2\0\15\12\1\321\11\12\3\0"+
    "\1\12\45\0\1\322\107\0\1\323\65\0\1\324\73\0"+
    "\1\325\74\0\1\326\13\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9794];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\3\1\3\11\5\1\1\11"+
    "\2\1\1\11\1\1\2\11\14\1\3\11\1\1\1\11"+
    "\1\0\2\11\3\0\23\1\1\0\24\1\1\0\12\1"+
    "\1\0\32\1\1\0\5\1\1\0\3\1\1\0\14\1"+
    "\1\0\4\1\1\0\2\1\2\0\7\1\1\0\4\1"+
    "\1\0\2\1\2\0\4\1\1\0\2\1\1\0\2\1"+
    "\2\0\1\1\1\0\2\1\1\0\1\1\2\0\1\1"+
    "\1\0\2\1\1\0\1\1\2\0\1\11\1\0\1\1"+
    "\1\11\1\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SimpleLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case COMMENT: {
              yybegin(YYINITIAL);
        return null;
        // 代表注释到文件末尾都没有再出现换行，
        // 或者根据你自己的需求定义返回啥 token
            }  // fall though
            case 215: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 54: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 55: break;
          case 3:
            { return SimpleTypes.NEWLINE;
            }
          // fall through
          case 56: break;
          case 4:
            { return SimpleTypes.BINARY_OPERATOR;
            }
          // fall through
          case 57: break;
          case 5:
            { return SimpleTypes.IDENTIFIER;
            }
          // fall through
          case 58: break;
          case 6:
            { return SimpleTypes.LEFT_PARENTHESIS;
            }
          // fall through
          case 59: break;
          case 7:
            { return SimpleTypes.RIGHT_PARENTHESIS;
            }
          // fall through
          case 60: break;
          case 8:
            { return SimpleTypes.COMMA_OPERATOR;
            }
          // fall through
          case 61: break;
          case 9:
            { return SimpleTypes.MINUS_OPERATOR;
            }
          // fall through
          case 62: break;
          case 10:
            { return SimpleTypes.DOT_OPERATOR;
            }
          // fall through
          case 63: break;
          case 11:
            { return SimpleTypes.NUMBER_LITERAL;
            }
          // fall through
          case 64: break;
          case 12:
            { yybegin(COMMENT);
          return SimpleTypes.COMMENT_OPERATOR;
            }
          // fall through
          case 65: break;
          case 13:
            { return SimpleTypes.ASSIGNMENT_OPERATOR;
            }
          // fall through
          case 66: break;
          case 14:
            { return SimpleTypes.FUNCTION_CALL_OPERATOR;
            }
          // fall through
          case 67: break;
          case 15:
            { return SimpleTypes.LEFT_SQUARE_BRACKET;
            }
          // fall through
          case 68: break;
          case 16:
            { return SimpleTypes.RIGHT_SQUARE_BRACKET;
            }
          // fall through
          case 69: break;
          case 17:
            { return SimpleTypes.LEFT_CURLY_BRACKET;
            }
          // fall through
          case 70: break;
          case 18:
            { return SimpleTypes.RIGHT_CURLY_BRACKET;
            }
          // fall through
          case 71: break;
          case 19:
            { return SimpleTypes.UNARY_OPERATOR;
            }
          // fall through
          case 72: break;
          case 20:
            { // 把这段文字当成注释文本 token
        return SimpleTypes.COMMENT_TEXT;
            }
          // fall through
          case 73: break;
          case 21:
            { yybegin(YYINITIAL);
        // 如果你想把换行本身也视作一个 token，可以在这里 return SimpleTypes.NEWLINE
        // 也可以什么都不返回，让它自动跳过（在 IntelliJ 平台的 Lexer 通常必须 return 一个token，
        // 或者将它识别为 white space，看你的需求）
        return SimpleTypes.NEWLINE;
            }
          // fall through
          case 74: break;
          case 22:
            { return SimpleTypes.STRING_LITERAL;
            }
          // fall through
          case 75: break;
          case 23:
            { return SimpleTypes.IF;
            }
          // fall through
          case 76: break;
          case 24:
            { return SimpleTypes.FISH_DEFINE;
            }
          // fall through
          case 77: break;
          case 25:
            { return SimpleTypes.END;
            }
          // fall through
          case 78: break;
          case 26:
            { return SimpleTypes.FOR;
            }
          // fall through
          case 79: break;
          case 27:
            { return SimpleTypes.CASE;
            }
          // fall through
          case 80: break;
          case 28:
            { return SimpleTypes.ELSE;
            }
          // fall through
          case 81: break;
          case 29:
            { return SimpleTypes.EXIT;
            }
          // fall through
          case 82: break;
          case 30:
            { return SimpleTypes.LOCK;
            }
          // fall through
          case 83: break;
          case 31:
            { return SimpleTypes.LOOP;
            }
          // fall through
          case 84: break;
          case 32:
            { return SimpleTypes.THEN;
            }
          // fall through
          case 85: break;
          case 33:
            { return SimpleTypes.ARRAY;
            }
          // fall through
          case 86: break;
          case 34:
            { return SimpleTypes.BREAK;
            }
          // fall through
          case 87: break;
          case 35:
            { return SimpleTypes.ENDIF;
            }
          // fall through
          case 88: break;
          case 36:
            { return SimpleTypes.LOCAL;
            }
          // fall through
          case 89: break;
          case 37:
            { return SimpleTypes.WHILE;
            }
          // fall through
          case 90: break;
          case 38:
            { return SimpleTypes.CASEOF;
            }
          // fall through
          case 91: break;
          case 39:
            { return SimpleTypes.ELSEIF;
            }
          // fall through
          case 92: break;
          case 40:
            { return SimpleTypes.GLOBAL;
            }
          // fall through
          case 93: break;
          case 41:
            { return SimpleTypes.RETURN;
            }
          // fall through
          case 94: break;
          case 42:
            { return SimpleTypes.STRUCT;
            }
          // fall through
          case 95: break;
          case 43:
            { return SimpleTypes.COMMAND;
            }
          // fall through
          case 96: break;
          case 44:
            { return SimpleTypes.ENDLOOP;
            }
          // fall through
          case 97: break;
          case 45:
            { return SimpleTypes.ENDCASE;
            }
          // fall through
          case 98: break;
          case 46:
            { return SimpleTypes.FOREACH;
            }
          // fall through
          case 99: break;
          case 47:
            { return SimpleTypes.SECTION;
            }
          // fall through
          case 100: break;
          case 48:
            { return SimpleTypes.CONTINUE;
            }
          // fall through
          case 101: break;
          case 49:
            { return SimpleTypes.EXITLOOP;
            }
          // fall through
          case 102: break;
          case 50:
            { return SimpleTypes.ENDSECTION;
            }
          // fall through
          case 103: break;
          case 51:
            { return SimpleTypes.ENDCOMMAND;
            }
          // fall through
          case 104: break;
          case 52:
            { return SimpleTypes.EXITSECTION;
            }
          // fall through
          case 105: break;
          case 53:
            { return SimpleTypes.FISH_OPERATOR;
            }
          // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
