// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Simple.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.psi.SimpleTypes;
import com.intellij.psi.TokenType;


class SimpleLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\0\1\7\4\0\1\10\1\11\1\12\1\13\2\0"+
    "\1\14\1\15\1\0\12\16\1\17\1\20\1\0\1\17"+
    "\35\0\1\21\1\22\1\23\1\24\2\0\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\0\1\57\10\0\1\3\u01a2\0\2\3\326\0\u0100\60";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\1\1\3\1\4\1\5\2\6"+
    "\25\1\1\6\1\1\1\3\2\7\1\3\1\7\1\1"+
    "\1\0\1\3\5\0\1\6\3\0\1\6\7\0\1\6"+
    "\47\0\1\6\13\0\1\6\3\0\2\6\13\0\1\6"+
    "\22\0\1\6\17\0\1\3\1\2\1\3\43\0\1\6"+
    "\4\0\1\6\4\0\1\6\12\0\1\6\22\0\1\6"+
    "\1\0\1\6\44\0\1\6\5\0\1\6\14\0\1\6"+
    "\2\0\1\6\30\0\1\6\2\0\2\6\45\0\2\6"+
    "\2\0\1\6\5\0\1\6\12\0\1\6\25\0\1\6"+
    "\33\0\1\6\5\0\1\6\56\0\1\6\64\0\1\6"+
    "\12\0\1\6\2\0\1\6\4\0\1\6\4\0\1\6"+
    "\37\0\1\6\3\0\1\6\31\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[632];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\142"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be"+
    "\0\u05ef\0\u0620\0\u0651\0\u0682\0\223\0\u06b3\0\u06e4\0\u0715"+
    "\0\304\0\142\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b"+
    "\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3"+
    "\0\u09f4\0\u0a25\0\u0a56\0\142\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2"+
    "\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a"+
    "\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2"+
    "\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a"+
    "\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2"+
    "\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a"+
    "\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2"+
    "\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a"+
    "\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2"+
    "\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a"+
    "\0\u1dab\0\u1ddc\0\u0715\0\u1e0d\0\u06b3\0\u1e3e\0\u1e6f\0\u1ea0"+
    "\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u2028"+
    "\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0"+
    "\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307\0\u2338"+
    "\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0"+
    "\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648"+
    "\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0"+
    "\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958"+
    "\0\u2989\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0"+
    "\0\u2b11\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68"+
    "\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0"+
    "\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47\0\u2f78"+
    "\0\u2fa9\0\u2fda\0\u300b\0\u303c\0\u306d\0\u309e\0\u30cf\0\u3100"+
    "\0\u3131\0\u3162\0\u3193\0\u31c4\0\u31f5\0\u3226\0\u3257\0\u3288"+
    "\0\u32b9\0\u32ea\0\u331b\0\u334c\0\u337d\0\u33ae\0\u33df\0\u3410"+
    "\0\u3441\0\u3472\0\u34a3\0\u34d4\0\u3505\0\u3536\0\u34a3\0\u3567"+
    "\0\u3598\0\u35c9\0\u35fa\0\u362b\0\u365c\0\u368d\0\u36be\0\u36ef"+
    "\0\u3720\0\u3751\0\u3782\0\u37b3\0\u37e4\0\u3815\0\u3846\0\u3877"+
    "\0\u38a8\0\u38d9\0\u390a\0\u393b\0\u396c\0\u399d\0\u39ce\0\u39ff"+
    "\0\u3a30\0\u3a61\0\u3a92\0\u3ac3\0\u3af4\0\u3b25\0\u3b56\0\u3b87"+
    "\0\u3bb8\0\u3be9\0\u3c1a\0\u3c4b\0\u3c7c\0\u3cad\0\u3cde\0\u3d0f"+
    "\0\u3d40\0\u3d71\0\u3da2\0\u3dd3\0\u3e04\0\u3e35\0\u3e66\0\u3e97"+
    "\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b\0\u3f8c\0\u3fbd\0\u3fee\0\u401f"+
    "\0\u4050\0\u4081\0\u40b2\0\u40e3\0\u4114\0\u4145\0\u4176\0\u41a7"+
    "\0\u41d8\0\u4209\0\u423a\0\u426b\0\u429c\0\u42cd\0\u42fe\0\u432f"+
    "\0\u4360\0\u150e\0\u4391\0\u2617\0\u43c2\0\u43f3\0\u4424\0\u4455"+
    "\0\u4486\0\u44b7\0\u44e8\0\u4519\0\u454a\0\u457b\0\u45ac\0\u45dd"+
    "\0\u460e\0\u463f\0\u4670\0\u46a1\0\u46d2\0\u4703\0\u4734\0\u4765"+
    "\0\u4796\0\u47c7\0\u47f8\0\u4829\0\u485a\0\u488b\0\u48bc\0\u48ed"+
    "\0\u491e\0\u494f\0\u4980\0\u49b1\0\u49e2\0\u4a13\0\u4a44\0\u4a75"+
    "\0\u4aa6\0\u4ad7\0\u4b08\0\u4b39\0\u4b6a\0\u4b9b\0\u4bcc\0\u4bfd"+
    "\0\u4c2e\0\u4c5f\0\u4c90\0\u4cc1\0\u4cf2\0\u4d23\0\u4d54\0\u4d85"+
    "\0\u4db6\0\u4de7\0\u4e18\0\u4e49\0\u4e7a\0\u4eab\0\u4edc\0\u4f0d"+
    "\0\u4f3e\0\u4f6f\0\u4fa0\0\u4fd1\0\u5002\0\u5033\0\u5064\0\u5095"+
    "\0\u50c6\0\u50f7\0\u5128\0\u5159\0\u518a\0\u51bb\0\u51ec\0\u521d"+
    "\0\u113a\0\u524e\0\u527f\0\u52b0\0\u52e1\0\u5312\0\u42cd\0\u5343"+
    "\0\u5374\0\u53a5\0\u53d6\0\u5407\0\u5438\0\u5469\0\u549a\0\u54cb"+
    "\0\u54fc\0\u552d\0\u555e\0\u558f\0\u55c0\0\u55f1\0\u5622\0\u5653"+
    "\0\u5684\0\u56b5\0\u56e6\0\u5717\0\u5748\0\u5779\0\u57aa\0\u57db"+
    "\0\u580c\0\u583d\0\u586e\0\u589f\0\u58d0\0\u5901\0\u5932\0\u5963"+
    "\0\u5994\0\u59c5\0\u59f6\0\u5a27\0\u5a58\0\u5a89\0\u5aba\0\u5aeb"+
    "\0\u5b1c\0\u5b4d\0\u5b7e\0\u5baf\0\u5be0\0\u5c11\0\u5c42\0\u5c73"+
    "\0\u5ca4\0\u5cd5\0\u5d06\0\u5d37\0\u5d68\0\u5d99\0\u5dca\0\u5dfb"+
    "\0\u5e2c\0\u5e5d\0\u5e8e\0\u5ebf\0\u5ef0\0\u5f21\0\u5f52\0\u5f83"+
    "\0\u5fb4\0\u5fe5\0\u6016\0\u6047\0\u6078\0\u60a9\0\u60da\0\u610b"+
    "\0\u613c\0\u616d\0\u619e\0\u61cf\0\u6200\0\u6231\0\u6262\0\u6293"+
    "\0\u62c4\0\u62f5\0\u6326\0\u6357\0\u6388\0\u63b9\0\u63ea\0\u641b"+
    "\0\u644c\0\u647d\0\u64ae\0\u64df\0\u6510\0\u6541\0\u6572\0\u65a3"+
    "\0\u65d4\0\u6605\0\u6636\0\u6667\0\u6698\0\u66c9\0\u66fa\0\u672b"+
    "\0\u675c\0\u678d\0\u67be\0\u67ef\0\u6820\0\u6851\0\u6882\0\u68b3"+
    "\0\u5469\0\u68e4\0\u6915\0\u6946\0\u6977\0\u07a8\0\u69a8\0\u69d9"+
    "\0\u6a0a\0\u6a3b\0\u6a6c\0\u6a9d\0\u6ace\0\u6aff\0\u6b30\0\u6b61"+
    "\0\u6b92\0\u6bc3\0\u6bf4\0\u6c25\0\u6c56\0\u6c87\0\u6cb8\0\u6ce9"+
    "\0\u6d1a\0\u6d4b\0\u6d7c\0\u6dad\0\u6dde\0\u6e0f\0\u6e40\0\u6e71"+
    "\0\u6ea2\0\u6ed3\0\u6f04\0\u6f35\0\u6f66\0\u6f97\0\u6fc8\0\u6ff9"+
    "\0\u702a\0\u705b\0\u708c\0\u70bd\0\u70ee\0\u711f\0\u49e2\0\u7150"+
    "\0\u7181\0\u71b2\0\u71e3\0\u7214\0\u7245\0\u7276\0\u72a7\0\u72d8"+
    "\0\u7309\0\u733a\0\u736b\0\u739c\0\u73cd\0\u73fe\0\u742f\0\u7460"+
    "\0\u7491\0\u74c2\0\u74f3\0\u7524\0\u7555\0\u7586\0\u75b7\0\u48bc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[632];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\6\4\1\3\1\5\1\6\2\3\3\7\1\10"+
    "\1\11\4\3\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\3\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\2\3\1\43\1\44\1\45"+
    "\1\46\1\45\1\46\1\47\13\43\1\50\36\43\62\0"+
    "\6\4\52\0\10\51\1\52\50\51\21\0\1\53\53\0"+
    "\3\7\42\0\2\11\1\0\2\11\1\0\53\11\27\0"+
    "\1\54\1\55\2\0\1\56\4\0\1\57\1\0\1\60"+
    "\1\0\1\61\1\0\1\62\1\63\1\64\1\65\2\0"+
    "\1\66\31\0\1\67\3\0\1\70\3\0\1\71\5\0"+
    "\1\72\2\0\1\73\6\0\1\74\30\0\1\75\3\0"+
    "\1\76\2\0\1\77\1\100\2\0\1\101\1\102\1\0"+
    "\1\103\1\104\1\0\1\105\1\0\1\106\1\107\3\0"+
    "\1\110\30\0\1\111\3\0\1\112\3\0\1\113\5\0"+
    "\1\114\2\0\1\115\2\0\1\116\36\0\1\117\2\0"+
    "\1\120\5\0\1\121\1\0\1\122\2\0\1\123\1\124"+
    "\2\0\1\125\1\126\1\0\1\127\31\0\1\130\7\0"+
    "\1\131\2\0\1\132\2\0\1\133\2\0\1\134\2\0"+
    "\1\135\40\0\1\136\7\0\1\74\4\0\1\137\37\0"+
    "\1\140\3\0\1\141\3\0\1\142\53\0\1\74\1\0"+
    "\1\74\6\0\1\143\1\144\4\0\1\74\47\0\1\74"+
    "\64\0\1\74\3\0\1\145\1\74\36\0\1\146\7\0"+
    "\1\147\5\0\1\150\42\0\1\151\3\0\1\152\3\0"+
    "\1\153\5\0\1\154\5\0\1\155\37\0\1\74\1\156"+
    "\6\0\1\74\1\0\1\157\1\160\1\74\4\0\1\161"+
    "\35\0\1\162\1\163\2\0\1\164\7\0\1\74\3\0"+
    "\1\165\2\0\1\166\34\0\1\167\1\0\1\170\1\0"+
    "\1\171\2\0\1\172\1\173\2\0\1\174\2\0\1\175"+
    "\2\0\1\176\2\0\1\177\34\0\1\200\1\201\1\74"+
    "\1\0\1\202\1\0\1\203\7\0\1\204\3\0\1\74"+
    "\36\0\1\205\1\0\1\206\1\207\1\210\2\0\1\211"+
    "\3\0\1\212\2\0\1\213\1\214\3\0\1\215\1\216"+
    "\3\0\1\217\30\0\1\220\3\0\1\221\2\0\1\222"+
    "\1\223\2\0\1\74\2\0\1\224\2\0\1\225\6\0"+
    "\1\226\45\0\1\227\1\0\1\230\45\0\1\231\3\0"+
    "\1\232\3\0\1\233\2\0\1\74\41\0\1\234\6\0"+
    "\1\235\1\236\52\0\1\70\1\237\1\0\1\240\16\0"+
    "\1\241\37\0\1\237\1\0\1\240\57\0\1\242\27\0"+
    "\2\43\1\0\1\43\1\0\15\43\1\243\37\43\1\44"+
    "\1\47\1\244\1\47\1\244\1\44\13\43\1\243\37\43"+
    "\1\245\1\4\1\245\1\4\2\245\13\43\1\243\36\43"+
    "\1\0\2\47\1\4\1\47\1\4\1\47\52\0\5\43"+
    "\1\246\52\43\25\0\1\247\70\0\1\250\13\0\1\251"+
    "\40\0\1\74\61\0\1\74\64\0\1\252\2\0\1\74"+
    "\12\0\1\253\35\0\1\74\2\0\1\254\71\0\1\255"+
    "\41\0\1\256\3\0\1\74\14\0\1\257\61\0\1\260"+
    "\61\0\1\261\60\0\1\262\45\0\1\140\63\0\1\263"+
    "\6\0\1\56\42\0\1\157\71\0\1\74\5\0\1\264"+
    "\52\0\1\55\11\0\1\74\35\0\1\265\3\0\1\266"+
    "\5\0\1\267\55\0\1\270\3\0\1\74\2\0\1\271"+
    "\51\0\1\272\1\0\1\273\67\0\1\274\55\0\1\275"+
    "\43\0\1\276\11\0\1\277\5\0\1\111\34\0\1\170"+
    "\74\0\1\300\1\301\1\302\44\0\1\303\56\0\1\304"+
    "\3\0\1\305\75\0\1\74\40\0\1\306\21\0\1\74"+
    "\37\0\1\307\10\0\1\310\61\0\1\311\51\0\1\312"+
    "\5\0\1\313\1\0\1\314\4\0\1\315\36\0\1\316"+
    "\13\0\1\140\4\0\1\317\1\320\52\0\1\321\74\0"+
    "\1\74\51\0\1\322\46\0\1\303\56\0\1\323\75\0"+
    "\1\56\41\0\1\324\1\325\100\0\1\326\52\0\1\327"+
    "\55\0\1\330\51\0\1\331\64\0\1\170\6\0\1\332"+
    "\3\0\1\126\45\0\1\333\2\0\1\121\60\0\1\334"+
    "\6\0\1\335\4\0\1\74\31\0\1\336\101\0\1\337"+
    "\37\0\1\340\3\0\1\56\3\0\1\341\5\0\1\342"+
    "\55\0\1\343\1\0\1\341\60\0\1\344\1\345\42\0"+
    "\1\346\15\0\1\347\64\0\1\74\46\0\1\350\63\0"+
    "\1\263\6\0\1\351\55\0\1\352\50\0\1\353\1\354"+
    "\11\0\1\355\1\356\35\0\1\256\102\0\1\170\42\0"+
    "\1\357\10\0\1\360\4\0\1\170\36\0\1\55\1\0"+
    "\1\361\3\0\1\362\7\0\1\311\54\0\1\56\10\0"+
    "\1\363\3\0\1\364\31\0\1\365\1\0\1\366\1\367"+
    "\17\0\1\370\37\0\1\371\1\372\60\0\1\373\70\0"+
    "\1\374\45\0\1\106\25\0\1\74\47\0\1\74\64\0"+
    "\1\375\1\0\1\74\50\0\1\263\1\376\67\0\1\377"+
    "\37\0\1\u0100\63\0\1\74\63\0\1\u0101\6\0\1\u0102"+
    "\64\0\1\u0103\37\0\1\u0104\21\0\1\121\57\0\1\74"+
    "\36\0\1\u0105\17\0\1\u0106\37\0\1\121\27\0\1\u0107"+
    "\47\0\1\u0108\41\0\1\u0109\15\0\1\170\52\0\1\331"+
    "\2\0\1\u010a\5\0\1\u010b\1\u010c\42\0\1\u010d\11\0"+
    "\1\u010e\63\0\1\u010f\42\0\1\u0110\11\0\1\u0111\5\0"+
    "\1\u0112\50\0\1\u0113\53\0\1\u0114\4\0\1\u0115\1\u0116"+
    "\5\0\1\u0117\1\u0118\35\0\1\311\103\0\1\u0119\62\0"+
    "\1\56\33\0\1\254\64\0\1\u011a\54\0\1\u011b\1\0"+
    "\1\u011c\3\0\1\u011d\12\0\1\u011e\1\0\1\u011f\35\0"+
    "\1\u0120\3\0\1\u0121\72\0\1\170\55\0\1\205\54\0"+
    "\1\u0122\1\157\10\0\1\u0123\37\0\1\u0124\3\0\1\311"+
    "\3\0\1\u0125\5\0\1\311\2\0\1\u0126\41\0\1\u0127"+
    "\14\0\1\u0128\63\0\1\u0129\37\0\1\254\73\0\1\u012a"+
    "\1\u012b\47\0\1\u012c\14\0\1\u012d\2\0\1\140\50\0"+
    "\1\u012e\6\0\1\254\50\0\1\u012f\71\0\1\u0130\53\0"+
    "\1\u0131\42\0\1\u0132\6\0\1\u0133\12\0\1\u0134\40\0"+
    "\1\u0135\70\0\1\u0136\5\0\1\u0137\37\0\1\74\3\0"+
    "\1\u0138\54\0\1\u0139\73\0\1\u013a\6\0\1\74\42\0"+
    "\1\157\3\0\1\u013b\73\0\1\u013c\45\0\1\u013d\66\0"+
    "\1\u013e\42\0\1\u013f\101\0\1\303\12\0\1\43\1\244"+
    "\1\4\1\244\1\4\2\244\13\43\1\243\42\43\1\0"+
    "\15\43\1\243\36\43\7\0\1\u0140\106\0\1\u0141\60\0"+
    "\1\u0142\56\0\1\u0143\52\0\1\u0144\73\0\1\56\60\0"+
    "\1\u0145\70\0\1\u0112\35\0\1\115\64\0\1\u0146\75\0"+
    "\1\u0147\55\0\1\u0148\55\0\1\74\61\0\1\203\44\0"+
    "\1\u0149\62\0\1\u014a\70\0\1\70\61\0\1\u014b\1\74"+
    "\50\0\1\u014c\64\0\1\u014d\73\0\1\u014e\57\0\1\u014f"+
    "\40\0\1\u0150\56\0\1\u0151\62\0\1\u014a\12\0\1\56"+
    "\57\0\1\u0152\2\0\1\u0153\44\0\1\u0154\1\0\1\u0155"+
    "\14\0\1\u0156\1\u0157\56\0\1\u0158\55\0\1\74\44\0"+
    "\1\u0159\56\0\1\u015a\70\0\1\u015b\63\0\1\u0131\55\0"+
    "\1\u015c\67\0\1\74\41\0\1\u015d\7\0\1\u015e\5\0"+
    "\1\u015f\46\0\1\u015a\76\0\1\u0160\46\0\1\u0161\12\0"+
    "\1\u0162\51\0\1\u0163\50\0\1\341\73\0\1\u0164\3\0"+
    "\1\u0165\35\0\1\u0166\70\0\1\u0167\54\0\1\u0168\56\0"+
    "\1\u0169\5\0\1\u016a\2\0\1\u016b\6\0\1\u016c\57\0"+
    "\1\u016d\47\0\1\u016e\53\0\1\56\61\0\1\106\71\0"+
    "\1\170\43\0\1\u016f\15\0\1\u0170\55\0\1\u0171\51\0"+
    "\1\u0172\63\0\1\u0173\74\0\1\u0174\41\0\1\u0175\56\0"+
    "\1\u0176\3\0\1\u0177\54\0\1\u011c\72\0\1\74\14\0"+
    "\1\70\42\0\1\115\51\0\1\u0178\70\0\1\u0179\54\0"+
    "\1\u017a\14\0\1\u0160\57\0\1\311\42\0\1\u017b\75\0"+
    "\1\u017c\53\0\1\u0170\46\0\1\u017d\77\0\1\u017e\45\0"+
    "\1\327\54\0\1\u017f\11\0\1\74\71\0\1\u0180\35\0"+
    "\1\u0181\54\0\1\u0182\47\0\1\u0183\15\0\1\u0184\57\0"+
    "\1\u0185\64\0\1\u0186\65\0\1\74\4\0\1\u0171\45\0"+
    "\1\u0187\61\0\1\u0188\57\0\1\u0189\72\0\1\u018a\42\0"+
    "\1\254\61\0\1\263\17\0\1\u018b\57\0\1\u018c\51\0"+
    "\1\u018d\45\0\1\330\57\0\1\u018e\104\0\1\u018f\42\0"+
    "\1\u0166\61\0\1\u0190\55\0\1\106\15\0\1\355\50\0"+
    "\1\u0191\47\0\1\u0192\1\u0193\63\0\1\u0194\2\0\1\u0195"+
    "\72\0\1\u0196\42\0\1\140\71\0\1\56\5\0\1\70"+
    "\65\0\1\u0197\46\0\1\314\52\0\1\u0198\72\0\1\u0199"+
    "\44\0\1\u019a\2\0\1\u019b\5\0\1\u019c\7\0\1\u019d"+
    "\37\0\1\56\62\0\1\u019e\53\0\1\u019f\2\0\1\56"+
    "\62\0\1\303\66\0\1\266\52\0\1\u01a0\50\0\1\u01a1"+
    "\15\0\1\u01a2\60\0\1\u01a3\52\0\1\u01a4\5\0\1\u01a5"+
    "\4\0\1\u01a6\1\u01a7\60\0\1\u01a8\34\0\1\u01a9\105\0"+
    "\1\74\56\0\1\322\60\0\1\u01aa\51\0\1\u01ab\71\0"+
    "\1\303\52\0\1\56\41\0\1\106\64\0\1\u01ac\60\0"+
    "\1\u01a2\62\0\1\56\6\0\1\u01ad\3\0\1\170\1\0"+
    "\1\u01ae\42\0\1\u01af\53\0\1\u0166\3\0\1\u01b0\56\0"+
    "\1\u01b1\75\0\1\u01b2\64\0\1\u01b3\54\0\1\u01b4\63\0"+
    "\1\u0184\46\0\1\106\4\0\1\74\61\0\1\u01b5\46\0"+
    "\1\u01b6\60\0\1\u01b7\60\0\1\74\10\0\1\u01b8\47\0"+
    "\1\u01b9\72\0\1\u01ba\60\0\1\157\52\0\1\263\50\0"+
    "\1\u01bb\76\0\1\u01bc\65\0\1\u01bd\63\0\1\74\61\0"+
    "\1\74\44\0\1\u01b9\47\0\1\u01be\10\0\1\56\54\0"+
    "\1\u01bf\73\0\1\u01c0\57\0\1\u01c1\54\0\1\u01c2\41\0"+
    "\1\u01c3\66\0\1\u01c4\101\0\1\u01c5\50\0\1\u01c6\73\0"+
    "\1\140\40\0\1\u01c7\64\0\1\u01c8\54\0\1\u01c9\64\0"+
    "\1\u01ca\56\0\1\u01cb\60\0\1\74\47\0\1\u01cc\2\0"+
    "\1\55\72\0\1\u016a\42\0\1\u01cd\64\0\1\u01ce\64\0"+
    "\1\u01cf\63\0\1\56\10\0\1\u01d0\51\0\1\74\3\0"+
    "\1\74\37\0\1\u016f\101\0\1\u01d1\2\0\1\u015a\44\0"+
    "\1\u011c\60\0\1\u01d2\73\0\1\u01d3\35\0\1\u01d4\7\0"+
    "\1\u01d5\53\0\1\u01d6\67\0\1\u01b9\71\0\1\56\37\0"+
    "\1\74\73\0\1\u01d7\67\0\1\u01a7\51\0\1\56\64\0"+
    "\1\u01d8\47\0\1\u01d9\71\0\1\u01c6\60\0\1\u01da\43\0"+
    "\1\u01db\67\0\1\u01dc\66\0\1\u01dd\47\0\1\157\65\0"+
    "\1\u01de\45\0\1\u01a1\56\0\1\121\15\0\1\u01df\60\0"+
    "\1\u01e0\50\0\1\115\65\0\1\u01e1\62\0\1\55\64\0"+
    "\1\170\63\0\1\u01ac\51\0\1\u01e2\45\0\1\u01e3\4\0"+
    "\1\u01e4\62\0\1\u01e5\47\0\1\u01e6\103\0\1\u01e7\51\0"+
    "\1\126\65\0\1\305\43\0\1\u01e8\71\0\1\u01b9\52\0"+
    "\1\170\67\0\1\u01e9\63\0\1\u01ea\47\0\1\u01eb\71\0"+
    "\1\u01ec\47\0\1\74\50\0\1\u01ed\73\0\1\u01ee\52\0"+
    "\1\u0184\63\0\1\254\71\0\1\u01ef\53\0\1\u01f0\44\0"+
    "\1\u01f1\60\0\1\157\76\0\1\55\60\0\1\u01f2\55\0"+
    "\1\u01f3\55\0\1\u01f4\50\0\1\263\70\0\1\u0143\71\0"+
    "\1\u0161\37\0\1\u01f5\60\0\1\u010f\73\0\1\u0108\45\0"+
    "\1\u01f6\76\0\1\u01f7\60\0\1\u01f8\52\0\1\u01f9\53\0"+
    "\1\u01fa\2\0\1\u0133\75\0\1\u01fb\57\0\1\u0171\57\0"+
    "\1\u01fc\43\0\1\u01fd\60\0\1\u01fe\64\0\1\u01ff\50\0"+
    "\1\263\23\0\1\140\52\0\1\u0200\60\0\1\157\3\0"+
    "\1\u01db\61\0\1\u0201\35\0\1\55\105\0\1\u0202\36\0"+
    "\1\u0203\70\0\1\u0204\63\0\1\u01ac\2\0\1\u0205\52\0"+
    "\1\170\66\0\1\157\62\0\1\u0206\45\0\1\u0133\54\0"+
    "\1\u0207\75\0\1\56\42\0\1\u0208\61\0\1\74\3\0"+
    "\1\u015b\55\0\1\u0209\70\0\1\u020a\4\0\1\u020b\42\0"+
    "\1\u020c\75\0\1\u020d\43\0\1\u0200\67\0\1\305\71\0"+
    "\1\u020e\52\0\1\u020f\3\0\1\u0210\57\0\1\u0211\41\0"+
    "\1\305\73\0\1\u0212\66\0\1\u0202\37\0\1\u0160\66\0"+
    "\1\u0213\57\0\1\74\70\0\1\u0214\43\0\1\56\107\0"+
    "\1\u0215\61\0\1\u0216\53\0\1\u01c6\33\0\1\u015a\3\0"+
    "\1\74\60\0\1\55\56\0\1\u0217\57\0\1\u0218\60\0"+
    "\1\u0219\57\0\1\u021a\60\0\1\u010f\21\0\1\74\36\0"+
    "\1\266\75\0\1\u021b\64\0\1\u01b9\51\0\1\u0215\62\0"+
    "\1\u021c\50\0\1\u021d\71\0\1\u021e\64\0\1\u021f\41\0"+
    "\1\u0220\73\0\1\u0221\53\0\1\u0222\53\0\1\330\71\0"+
    "\1\u0223\67\0\1\115\53\0\1\115\65\0\1\330\35\0"+
    "\1\u0224\70\0\1\u0225\56\0\1\74\66\0\1\u0226\62\0"+
    "\1\311\52\0\1\u0227\50\0\1\u0228\60\0\1\u0229\60\0"+
    "\1\u01a7\76\0\1\u022a\44\0\1\u01be\102\0\1\u022b\57\0"+
    "\1\u01e9\56\0\1\115\47\0\1\u022c\50\0\1\u022d\75\0"+
    "\1\u018d\7\0\1\u018d\54\0\1\u022e\42\0\1\u022f\65\0"+
    "\1\u018d\74\0\1\u0200\51\0\1\u0196\65\0\1\u0230\62\0"+
    "\1\140\53\0\1\343\56\0\1\u0231\56\0\1\u0232\66\0"+
    "\1\u0233\42\0\1\306\57\0\1\u018d\66\0\1\u0234\60\0"+
    "\1\u0235\50\0\1\u0200\62\0\1\170\77\0\1\u01d9\53\0"+
    "\1\u0160\60\0\1\74\54\0\1\205\54\0\1\u0236\100\0"+
    "\1\u018d\60\0\1\u011c\34\0\1\u022a\64\0\1\74\3\0"+
    "\1\u0237\65\0\1\u0238\43\0\1\u0239\75\0\1\u020d\51\0"+
    "\1\u023a\74\0\1\u023b\60\0\1\u023c\42\0\1\u023d\62\0"+
    "\1\u023e\76\0\1\170\57\0\1\u023f\35\0\1\u0240\63\0"+
    "\1\u0231\57\0\1\u0108\71\0\1\u0241\71\0\1\u0188\20\0"+
    "\1\u0242\74\0\1\u011c\73\0\1\u0202\71\0\1\u015a\57\0"+
    "\1\306\43\0\1\u0243\57\0\1\u0244\75\0\1\u0245\42\0"+
    "\1\u0177\100\0\1\u01fd\57\0\1\u0246\61\0\1\56\51\0"+
    "\1\u0217\43\0\1\u0247\7\0\1\u0167\52\0\1\u021e\25\0"+
    "\1\u01c6\31\0\1\u0248\73\0\1\u0152\45\0\1\u0249\73\0"+
    "\1\56\57\0\1\263\55\0\1\331\71\0\1\u024a\62\0"+
    "\1\u0211\50\0\1\343\64\0\1\u024b\51\0\1\106\73\0"+
    "\1\u024c\37\0\1\u024d\72\0\1\322\66\0\1\u024e\54\0"+
    "\1\157\6\0\1\56\51\0\1\u024f\65\0\1\140\56\0"+
    "\1\55\62\0\1\u0250\64\0\1\u0139\1\115\52\0\1\u0251"+
    "\60\0\1\140\45\0\1\u0252\55\0\1\311\71\0\1\u01c1"+
    "\43\0\1\u0253\50\0\1\u0254\73\0\1\u0255\61\0\1\u0256"+
    "\76\0\1\u01aa\43\0\1\240\6\0\1\u0257\45\0\1\u0258"+
    "\103\0\1\u0259\55\0\1\u025a\43\0\1\u025b\55\0\1\u025c"+
    "\100\0\1\u025d\63\0\1\u01b4\53\0\1\u025e\56\0\1\u025f"+
    "\52\0\1\u01b9\56\0\1\u0260\61\0\1\u0261\54\0\1\u021e"+
    "\43\0\1\u0262\103\0\1\u0263\71\0\1\u0264\55\0\1\u0265"+
    "\52\0\1\u0266\73\0\1\u0267\45\0\1\u01f0\53\0\1\74"+
    "\16\0\1\74\54\0\1\u016f\66\0\1\u0268\40\0\1\u0269"+
    "\100\0\1\263\52\0\1\322\27\0\1\u026a\110\0\1\u026b"+
    "\47\0\1\u026c\57\0\1\u026d\10\0\1\126\57\0\1\u0160"+
    "\51\0\1\74\3\0\1\u0133\52\0\1\u026e\77\0\1\121"+
    "\25\0\1\52\100\0\1\u026f\67\0\1\u0270\47\0\1\u0271"+
    "\77\0\1\u0272\65\0\1\u0180\53\0\1\u01ef\50\0\1\u0273"+
    "\71\0\1\u0274\50\0\1\u0275\65\0\1\u018d\43\0\1\u0276"+
    "\56\0\1\u0277\65\0\1\u0278\24\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[30184];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\1\11\40\1\1\0\1\11\5\0"+
    "\1\1\3\0\1\1\7\0\1\11\47\0\1\1\13\0"+
    "\1\1\3\0\2\1\13\0\1\1\22\0\1\1\17\0"+
    "\3\1\43\0\1\1\4\0\1\1\4\0\1\1\12\0"+
    "\1\1\22\0\1\1\1\0\1\1\44\0\1\1\5\0"+
    "\1\1\14\0\1\1\2\0\1\1\30\0\1\1\2\0"+
    "\2\1\45\0\2\1\2\0\1\1\5\0\1\1\12\0"+
    "\1\1\25\0\1\1\33\0\1\1\5\0\1\1\56\0"+
    "\1\1\64\0\1\1\12\0\1\1\2\0\1\1\4\0"+
    "\1\1\4\0\1\1\37\0\1\1\3\0\1\1\31\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[632];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SimpleLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 8: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 9: break;
          case 3:
            { yybegin(YYINITIAL); return SimpleTypes.VALUE;
            }
          // fall through
          case 10: break;
          case 4:
            { yybegin(WAITING_VALUE); return SimpleTypes.SEPARATOR;
            }
          // fall through
          case 11: break;
          case 5:
            { yybegin(YYINITIAL); return SimpleTypes.COMMENT;
            }
          // fall through
          case 12: break;
          case 6:
            { yybegin(YYINITIAL); return SimpleTypes.KEY;
            }
          // fall through
          case 13: break;
          case 7:
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
