// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Simple.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.psi.SimpleTypes;
import com.intellij.psi.TokenType;


class SimpleLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\1\7\1\0\1\7\1\0\1\11\1\12"+
    "\1\13\1\14\1\7\1\0\1\15\1\16\1\7\12\17"+
    "\1\7\1\20\3\7\1\0\1\7\32\0\1\21\1\22"+
    "\1\23\1\24\1\25\1\0\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\0\1\60"+
    "\10\0\1\3\u01a2\0\2\3\326\0\u0100\61";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\2\5\25\1\1\5\1\1\1\4\2\7\1\4\1\7"+
    "\1\1\1\0\1\4\1\0\1\4\4\0\1\5\3\0"+
    "\1\5\7\0\1\5\50\0\1\5\14\0\1\5\3\0"+
    "\2\5\13\0\1\5\22\0\1\5\20\0\1\4\1\2"+
    "\1\4\1\0\1\5\44\0\1\5\4\0\1\5\4\0"+
    "\1\5\12\0\1\5\26\0\1\5\1\0\1\5\44\0"+
    "\1\5\5\0\1\5\14\0\1\5\2\0\1\5\31\0"+
    "\2\5\2\0\2\5\51\0\2\5\2\0\1\5\6\0"+
    "\1\5\14\0\1\5\25\0\1\5\34\0\1\5\6\0"+
    "\1\5\61\0\1\5\67\0\1\5\13\0\1\5\2\0"+
    "\1\5\4\0\1\5\4\0\1\5\2\0\1\5\40\0"+
    "\1\5\4\0\1\5\32\0\1\5\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[675];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\144\0\310\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc"+
    "\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\226\0\u0708\0\u073a"+
    "\0\u076c\0\310\0\144\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866"+
    "\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6"+
    "\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\144\0\u0b22\0\u0b54"+
    "\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4"+
    "\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74"+
    "\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004"+
    "\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194"+
    "\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324"+
    "\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4"+
    "\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644"+
    "\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4"+
    "\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964"+
    "\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4"+
    "\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84"+
    "\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14"+
    "\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u076c"+
    "\0\u1fa4\0\u0708\0\u1fd6\0\u2008\0\u012c\0\u203a\0\u206c\0\u209e"+
    "\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e"+
    "\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be"+
    "\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e"+
    "\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac\0\u26de"+
    "\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u286e"+
    "\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a\0\u29cc\0\u29fe"+
    "\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e"+
    "\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba\0\u2cec\0\u2d1e"+
    "\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a\0\u2e7c\0\u2eae"+
    "\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e"+
    "\0\u3070\0\u30a2\0\u30d4\0\u3106\0\u3138\0\u316a\0\u319c\0\u31ce"+
    "\0\u3200\0\u3232\0\u3264\0\u3296\0\u32c8\0\u32fa\0\u332c\0\u335e"+
    "\0\u3390\0\u33c2\0\u33f4\0\u3426\0\u3458\0\u348a\0\u34bc\0\u34ee"+
    "\0\u3520\0\u3552\0\u3584\0\u35b6\0\u35e8\0\u361a\0\u364c\0\u367e"+
    "\0\u36b0\0\u36e2\0\u3714\0\u3746\0\u3778\0\u37aa\0\u37dc\0\u380e"+
    "\0\u3840\0\u3872\0\u37dc\0\u38a4\0\u38d6\0\u3908\0\u393a\0\u396c"+
    "\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\u3a66\0\u3a98\0\u3aca\0\u3afc"+
    "\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4\0\u3bf6\0\u3c28\0\u3c5a\0\u3c8c"+
    "\0\u3cbe\0\u3cf0\0\u3d22\0\u3d54\0\u3d86\0\u3db8\0\u3dea\0\u3e1c"+
    "\0\u3e4e\0\u3e80\0\u3eb2\0\u3ee4\0\u3f16\0\u3f48\0\u3f7a\0\u3fac"+
    "\0\u3fde\0\u4010\0\u4042\0\u4074\0\u40a6\0\u40d8\0\u410a\0\u413c"+
    "\0\u416e\0\u41a0\0\u41d2\0\u4204\0\u4236\0\u4268\0\u429a\0\u42cc"+
    "\0\u42fe\0\u4330\0\u4362\0\u4394\0\u43c6\0\u43f8\0\u442a\0\u445c"+
    "\0\u448e\0\u44c0\0\u44f2\0\u4524\0\u4556\0\u4588\0\u45ba\0\u45ec"+
    "\0\u461e\0\u4650\0\u4682\0\u46b4\0\u46e6\0\u4718\0\u474a\0\u477c"+
    "\0\u47ae\0\u47e0\0\u4812\0\u1644\0\u4844\0\u283c\0\u4876\0\u48a8"+
    "\0\u48da\0\u490c\0\u493e\0\u4970\0\u49a2\0\u49d4\0\u4a06\0\u4a38"+
    "\0\u4a6a\0\u4a9c\0\u4ace\0\u4b00\0\u4b32\0\u4b64\0\u4b96\0\u4bc8"+
    "\0\u4bfa\0\u4c2c\0\u4c5e\0\u4c90\0\u4cc2\0\u4cf4\0\u4d26\0\u4d58"+
    "\0\u4d8a\0\u4dbc\0\u4dee\0\u4e20\0\u4e52\0\u4e84\0\u4eb6\0\u4ee8"+
    "\0\u4f1a\0\u4f4c\0\u4f7e\0\u4fb0\0\u4fe2\0\u5014\0\u5046\0\u5078"+
    "\0\u50aa\0\u50dc\0\u510e\0\u5140\0\u5172\0\u51a4\0\u51d6\0\u5208"+
    "\0\u523a\0\u526c\0\u529e\0\u52d0\0\u5302\0\u5334\0\u5366\0\u5398"+
    "\0\u53ca\0\u53fc\0\u542e\0\u5460\0\u5492\0\u54c4\0\u54f6\0\u5528"+
    "\0\u555a\0\u558c\0\u55be\0\u55f0\0\u5622\0\u5654\0\u5686\0\u56b8"+
    "\0\u56ea\0\u571c\0\u574e\0\u5780\0\u57b2\0\u57e4\0\u122a\0\u5816"+
    "\0\u5848\0\u587a\0\u58ac\0\u58de\0\u5910\0\u474a\0\u5942\0\u5974"+
    "\0\u59a6\0\u59d8\0\u5a0a\0\u5a3c\0\u5a6e\0\u5aa0\0\u5ad2\0\u5b04"+
    "\0\u5b36\0\u5b68\0\u5b9a\0\u5bcc\0\u5bfe\0\u5c30\0\u5c62\0\u5c94"+
    "\0\u5cc6\0\u5cf8\0\u5d2a\0\u5d5c\0\u5d8e\0\u5dc0\0\u5df2\0\u5e24"+
    "\0\u5e56\0\u5e88\0\u5eba\0\u5eec\0\u5f1e\0\u5f50\0\u5f82\0\u5fb4"+
    "\0\u5fe6\0\u6018\0\u604a\0\u607c\0\u60ae\0\u60e0\0\u6112\0\u6144"+
    "\0\u6176\0\u61a8\0\u61da\0\u620c\0\u623e\0\u6270\0\u62a2\0\u62d4"+
    "\0\u6306\0\u6338\0\u636a\0\u639c\0\u63ce\0\u6400\0\u6432\0\u6464"+
    "\0\u6496\0\u64c8\0\u64fa\0\u652c\0\u655e\0\u6590\0\u65c2\0\u65f4"+
    "\0\u6626\0\u6658\0\u668a\0\u66bc\0\u66ee\0\u6720\0\u6752\0\u6784"+
    "\0\u67b6\0\u67e8\0\u681a\0\u684c\0\u687e\0\u68b0\0\u68e2\0\u6914"+
    "\0\u6946\0\u6978\0\u69aa\0\u69dc\0\u6a0e\0\u6a40\0\u6a72\0\u6aa4"+
    "\0\u6ad6\0\u6b08\0\u6b3a\0\u6b6c\0\u6b9e\0\u6bd0\0\u6c02\0\u6c34"+
    "\0\u6c66\0\u6c98\0\u6cca\0\u6cfc\0\u6d2e\0\u6d60\0\u6d92\0\u6dc4"+
    "\0\u6df6\0\u6e28\0\u6e5a\0\u6e8c\0\u6ebe\0\u6ef0\0\u6f22\0\u6f54"+
    "\0\u6f86\0\u6fb8\0\u6fea\0\u701c\0\u704e\0\u7080\0\u5a6e\0\u70b2"+
    "\0\u70e4\0\u7116\0\u7148\0\u0834\0\u717a\0\u71ac\0\u71de\0\u7210"+
    "\0\u7242\0\u7274\0\u72a6\0\u72d8\0\u730a\0\u733c\0\u736e\0\u73a0"+
    "\0\u73d2\0\u7404\0\u7436\0\u7468\0\u749a\0\u74cc\0\u74fe\0\u7530"+
    "\0\u7562\0\u7594\0\u75c6\0\u75f8\0\u762a\0\u765c\0\u768e\0\u76c0"+
    "\0\u76f2\0\u7724\0\u7756\0\u7788\0\u77ba\0\u77ec\0\u781e\0\u7850"+
    "\0\u7882\0\u78b4\0\u78e6\0\u7918\0\u794a\0\u797c\0\u79ae\0\u79e0"+
    "\0\u7a12\0\u4f4c\0\u7a44\0\u7a76\0\u7aa8\0\u7ada\0\u7b0c\0\u7b3e"+
    "\0\u7b70\0\u7ba2\0\u7bd4\0\u7c06\0\u7c38\0\u7c6a\0\u7c9c\0\u7cce"+
    "\0\u7d00\0\u7d32\0\u7d64\0\u7d96\0\u7dc8\0\u7dfa\0\u7e2c\0\u7e5e"+
    "\0\u7e90\0\u7ec2\0\u7ef4\0\u7f26\0\u7f58\0\u7f8a\0\u7fbc\0\u7fee"+
    "\0\u8020\0\u8052\0\u8084";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[675];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\6\4\1\5\1\3\1\6\1\7\1\3\1\5"+
    "\1\10\1\11\1\10\1\12\5\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\3\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\2\3"+
    "\1\44\1\45\1\46\1\47\1\46\1\47\1\50\13\44"+
    "\1\51\37\44\63\0\6\4\53\0\11\52\1\53\50\52"+
    "\21\0\1\54\55\0\3\10\57\0\1\10\1\55\1\10"+
    "\42\0\2\12\1\0\2\12\1\0\54\12\30\0\1\56"+
    "\1\57\2\0\1\60\4\0\1\61\1\0\1\62\1\0"+
    "\1\63\1\0\1\64\1\65\1\66\1\67\2\0\1\70"+
    "\32\0\1\71\3\0\1\72\3\0\1\73\5\0\1\74"+
    "\2\0\1\75\6\0\1\76\31\0\1\77\3\0\1\100"+
    "\2\0\1\101\1\102\2\0\1\103\1\104\1\0\1\105"+
    "\1\106\1\0\1\107\1\0\1\110\1\111\3\0\1\112"+
    "\31\0\1\113\3\0\1\114\3\0\1\115\5\0\1\116"+
    "\2\0\1\117\2\0\1\120\37\0\1\121\2\0\1\122"+
    "\5\0\1\123\1\0\1\124\2\0\1\125\1\126\2\0"+
    "\1\127\1\130\1\0\1\131\32\0\1\132\7\0\1\133"+
    "\2\0\1\134\2\0\1\135\2\0\1\136\2\0\1\137"+
    "\41\0\1\140\6\0\1\141\1\76\4\0\1\142\40\0"+
    "\1\143\3\0\1\144\3\0\1\145\54\0\1\76\1\0"+
    "\1\76\6\0\1\146\1\147\1\150\3\0\1\76\50\0"+
    "\1\76\65\0\1\76\3\0\1\151\1\76\37\0\1\152"+
    "\7\0\1\153\5\0\1\154\43\0\1\155\3\0\1\156"+
    "\3\0\1\157\5\0\1\160\5\0\1\161\40\0\1\76"+
    "\1\162\6\0\1\76\1\0\1\163\1\164\1\76\4\0"+
    "\1\165\36\0\1\166\1\167\2\0\1\170\7\0\1\76"+
    "\3\0\1\171\2\0\1\172\35\0\1\173\1\0\1\174"+
    "\1\0\1\175\2\0\1\176\1\177\2\0\1\200\2\0"+
    "\1\201\2\0\1\202\2\0\1\203\35\0\1\204\1\205"+
    "\1\76\1\0\1\206\1\0\1\207\7\0\1\210\3\0"+
    "\1\76\37\0\1\211\1\0\1\212\1\213\1\214\2\0"+
    "\1\215\3\0\1\216\2\0\1\217\1\220\3\0\1\221"+
    "\1\222\3\0\1\223\31\0\1\224\3\0\1\225\2\0"+
    "\1\226\1\227\2\0\1\76\2\0\1\230\2\0\1\231"+
    "\6\0\1\232\46\0\1\233\1\0\1\234\46\0\1\235"+
    "\3\0\1\236\3\0\1\237\2\0\1\76\32\0\1\240"+
    "\7\0\1\241\6\0\1\242\1\243\53\0\1\72\1\244"+
    "\1\0\1\245\16\0\1\246\40\0\1\244\1\0\1\245"+
    "\60\0\1\247\27\0\2\44\1\0\1\44\1\0\15\44"+
    "\1\250\40\44\1\45\1\50\1\251\1\50\1\251\1\45"+
    "\13\44\1\250\40\44\1\252\1\4\1\252\1\4\2\252"+
    "\13\44\1\250\37\44\1\0\2\50\1\4\1\50\1\4"+
    "\1\50\53\0\5\44\1\253\53\44\25\0\1\254\52\0"+
    "\1\10\1\255\1\10\77\0\1\256\13\0\1\257\41\0"+
    "\1\76\62\0\1\76\65\0\1\260\2\0\1\76\12\0"+
    "\1\261\36\0\1\76\2\0\1\262\72\0\1\263\42\0"+
    "\1\264\3\0\1\76\14\0\1\265\62\0\1\266\62\0"+
    "\1\267\61\0\1\270\46\0\1\143\64\0\1\271\6\0"+
    "\1\60\43\0\1\163\72\0\1\76\5\0\1\272\53\0"+
    "\1\57\11\0\1\76\36\0\1\273\3\0\1\274\5\0"+
    "\1\275\56\0\1\276\3\0\1\76\2\0\1\277\52\0"+
    "\1\300\1\0\1\301\70\0\1\302\56\0\1\303\44\0"+
    "\1\304\11\0\1\305\5\0\1\306\35\0\1\174\65\0"+
    "\1\307\7\0\1\310\1\311\1\312\45\0\1\313\57\0"+
    "\1\314\3\0\1\315\76\0\1\76\41\0\1\316\21\0"+
    "\1\76\40\0\1\317\10\0\1\320\62\0\1\321\52\0"+
    "\1\322\5\0\1\323\1\0\1\324\4\0\1\325\37\0"+
    "\1\326\13\0\1\143\4\0\1\327\1\330\53\0\1\331"+
    "\75\0\1\76\52\0\1\332\47\0\1\313\57\0\1\333"+
    "\76\0\1\60\42\0\1\334\1\335\101\0\1\336\53\0"+
    "\1\337\56\0\1\340\52\0\1\341\65\0\1\174\6\0"+
    "\1\342\3\0\1\130\46\0\1\343\2\0\1\123\61\0"+
    "\1\344\6\0\1\345\4\0\1\76\32\0\1\346\102\0"+
    "\1\347\40\0\1\350\3\0\1\60\3\0\1\351\5\0"+
    "\1\352\56\0\1\353\1\0\1\351\61\0\1\354\1\355"+
    "\61\0\1\356\43\0\1\357\15\0\1\360\65\0\1\76"+
    "\47\0\1\361\64\0\1\362\6\0\1\363\56\0\1\364"+
    "\51\0\1\365\1\366\1\367\10\0\1\370\1\371\26\0"+
    "\1\372\71\0\1\264\103\0\1\174\43\0\1\373\10\0"+
    "\1\374\4\0\1\174\37\0\1\57\1\0\1\375\3\0"+
    "\1\376\7\0\1\321\55\0\1\60\10\0\1\377\3\0"+
    "\1\u0100\32\0\1\u0101\1\0\1\u0102\1\u0103\17\0\1\u0104"+
    "\40\0\1\u0105\1\u0106\61\0\1\u0107\71\0\1\u0108\46\0"+
    "\1\110\25\0\1\76\50\0\1\76\65\0\1\u0109\1\0"+
    "\1\76\51\0\1\362\1\u010a\70\0\1\u010b\40\0\1\u010c"+
    "\64\0\1\76\64\0\1\u010d\6\0\1\u010e\65\0\1\u010f"+
    "\40\0\1\u0110\21\0\1\123\60\0\1\76\37\0\1\u0111"+
    "\17\0\1\u0112\40\0\1\123\27\0\1\u0113\50\0\1\u0114"+
    "\42\0\1\u0115\15\0\1\174\53\0\1\341\2\0\1\u0116"+
    "\5\0\1\u0117\1\u0118\43\0\1\u0119\11\0\1\u011a\64\0"+
    "\1\u011b\43\0\1\u011c\11\0\1\u011d\5\0\1\u011e\51\0"+
    "\1\u011f\54\0\1\u0120\4\0\1\u0121\1\u0122\5\0\1\u0123"+
    "\1\u0124\36\0\1\321\104\0\1\u0125\63\0\1\60\34\0"+
    "\1\262\65\0\1\u0126\55\0\1\u0127\1\0\1\u0128\3\0"+
    "\1\u0129\12\0\1\u012a\1\0\1\u012b\36\0\1\u012c\3\0"+
    "\1\u012d\73\0\1\174\56\0\1\211\55\0\1\u012e\1\163"+
    "\10\0\1\u012f\40\0\1\u0130\3\0\1\321\3\0\1\u0131"+
    "\5\0\1\321\2\0\1\u0132\42\0\1\u0133\14\0\1\u0134"+
    "\64\0\1\u0135\40\0\1\262\74\0\1\u0136\1\u0137\50\0"+
    "\1\u0138\14\0\1\u0139\2\0\1\143\51\0\1\u013a\6\0"+
    "\1\262\51\0\1\u013b\72\0\1\u013c\54\0\1\u013d\43\0"+
    "\1\u013e\6\0\1\u013f\12\0\1\u0140\41\0\1\u0141\71\0"+
    "\1\u0142\5\0\1\u0143\40\0\1\76\3\0\1\u0144\55\0"+
    "\1\u0145\102\0\1\u0146\53\0\1\u0147\6\0\1\76\43\0"+
    "\1\163\3\0\1\u0148\74\0\1\u0149\46\0\1\u014a\67\0"+
    "\1\u014b\43\0\1\u014c\102\0\1\313\12\0\1\44\1\251"+
    "\1\4\1\251\1\4\2\251\13\44\1\250\43\44\1\0"+
    "\15\44\1\250\37\44\10\0\1\u014d\107\0\1\u014e\61\0"+
    "\1\u014f\57\0\1\u0150\53\0\1\u0151\74\0\1\60\61\0"+
    "\1\u0152\71\0\1\u011e\36\0\1\117\65\0\1\u0153\76\0"+
    "\1\u0154\56\0\1\u0155\56\0\1\u0156\62\0\1\207\45\0"+
    "\1\u0157\63\0\1\u0158\71\0\1\72\62\0\1\u0159\1\76"+
    "\51\0\1\u015a\65\0\1\u015b\74\0\1\u015c\60\0\1\u015d"+
    "\41\0\1\u015e\57\0\1\u015f\63\0\1\u0158\12\0\1\60"+
    "\60\0\1\u0160\52\0\1\u0161\70\0\1\u0162\2\0\1\u0163"+
    "\45\0\1\u0164\1\0\1\u0165\14\0\1\u0166\1\u0167\57\0"+
    "\1\u0168\56\0\1\76\45\0\1\u0169\57\0\1\u016a\71\0"+
    "\1\u016b\64\0\1\u013d\56\0\1\u016c\70\0\1\76\42\0"+
    "\1\u016d\7\0\1\u016e\5\0\1\u016f\47\0\1\u016a\77\0"+
    "\1\u0170\47\0\1\u0171\12\0\1\u0172\52\0\1\u0173\51\0"+
    "\1\351\74\0\1\u0174\3\0\1\u0175\26\0\1\u0176\7\0"+
    "\1\u0177\71\0\1\u0178\55\0\1\u0179\54\0\1\u017a\2\0"+
    "\1\u017b\5\0\1\u017c\2\0\1\u017d\6\0\1\u017e\60\0"+
    "\1\u017f\50\0\1\u0180\54\0\1\60\62\0\1\110\72\0"+
    "\1\174\44\0\1\u0181\15\0\1\u0182\56\0\1\u0183\52\0"+
    "\1\u0184\64\0\1\u0185\75\0\1\u0186\42\0\1\u0187\57\0"+
    "\1\u0188\3\0\1\u0189\55\0\1\u0128\73\0\1\76\14\0"+
    "\1\72\43\0\1\117\52\0\1\u018a\71\0\1\u018b\46\0"+
    "\1\u018c\70\0\1\u018d\14\0\1\u0170\60\0\1\321\43\0"+
    "\1\u018e\66\0\1\76\71\0\1\u018f\54\0\1\u0182\47\0"+
    "\1\u0190\100\0\1\u0191\26\0\1\u0192\101\0\1\337\55\0"+
    "\1\u0193\11\0\1\76\61\0\1\u0194\72\0\1\u0195\36\0"+
    "\1\u0196\55\0\1\u0197\50\0\1\u0198\15\0\1\u0199\60\0"+
    "\1\u019a\65\0\1\u019b\66\0\1\76\4\0\1\u0183\46\0"+
    "\1\u019c\62\0\1\u019d\60\0\1\u019e\73\0\1\u019f\43\0"+
    "\1\262\62\0\1\362\17\0\1\u01a0\60\0\1\u01a1\52\0"+
    "\1\u01a2\46\0\1\340\60\0\1\u01a3\105\0\1\u01a4\43\0"+
    "\1\u0177\62\0\1\u01a5\56\0\1\110\15\0\1\370\51\0"+
    "\1\u01a6\50\0\1\u01a7\1\u01a8\64\0\1\u01a9\2\0\1\u01aa"+
    "\73\0\1\u01ab\43\0\1\143\72\0\1\60\5\0\1\72"+
    "\66\0\1\u01ac\47\0\1\324\53\0\1\u01ad\73\0\1\u01ae"+
    "\45\0\1\u01af\2\0\1\u01b0\5\0\1\u01b1\7\0\1\u01b2"+
    "\40\0\1\60\63\0\1\u01b3\54\0\1\u01b4\2\0\1\60"+
    "\63\0\1\313\67\0\1\u01b5\53\0\1\u01b6\51\0\1\u01b7"+
    "\15\0\1\u01b8\61\0\1\u01b9\53\0\1\u01ba\5\0\1\u01bb"+
    "\4\0\1\u01bc\1\u01bd\61\0\1\u01be\35\0\1\u01bf\106\0"+
    "\1\76\57\0\1\332\61\0\1\u01c0\52\0\1\u01c1\72\0"+
    "\1\313\53\0\1\60\42\0\1\110\65\0\1\u01c2\61\0"+
    "\1\u01b8\63\0\1\60\6\0\1\u01c3\3\0\1\174\1\0"+
    "\1\u01c4\43\0\1\u01c5\54\0\1\u0177\3\0\1\u01c6\57\0"+
    "\1\u01c7\76\0\1\u01c8\65\0\1\u01c9\55\0\1\u01ca\64\0"+
    "\1\u0199\47\0\1\110\4\0\1\76\62\0\1\u01cb\47\0"+
    "\1\u01cc\61\0\1\u01cd\61\0\1\76\10\0\1\u01ce\50\0"+
    "\1\u01cf\73\0\1\u01d0\61\0\1\163\53\0\1\362\51\0"+
    "\1\u01d1\77\0\1\u01d2\66\0\1\u01d3\64\0\1\76\62\0"+
    "\1\76\22\0\1\u01d4\104\0\1\u01cf\50\0\1\u01d5\10\0"+
    "\1\60\55\0\1\u01d6\74\0\1\u01d7\60\0\1\u01d8\55\0"+
    "\1\u01d9\41\0\1\u01da\70\0\1\u01db\102\0\1\u01dc\51\0"+
    "\1\u01dd\74\0\1\143\41\0\1\u01de\65\0\1\u01df\55\0"+
    "\1\u01e0\65\0\1\u01e1\35\0\1\u01e2\103\0\1\u01e3\61\0"+
    "\1\76\50\0\1\u01e4\2\0\1\57\73\0\1\u017c\43\0"+
    "\1\u01e5\65\0\1\u01e6\65\0\1\u01e7\64\0\1\60\10\0"+
    "\1\u01e8\52\0\1\76\3\0\1\76\57\0\1\u0156\32\0"+
    "\1\76\71\0\1\u0181\102\0\1\u01e9\2\0\1\u016a\45\0"+
    "\1\u0128\61\0\1\u01ea\74\0\1\u01eb\36\0\1\u01ec\7\0"+
    "\1\u01ed\54\0\1\u01ee\70\0\1\u01cf\72\0\1\60\40\0"+
    "\1\76\74\0\1\u01ef\70\0\1\u01bd\52\0\1\60\65\0"+
    "\1\u01f0\50\0\1\u01f1\72\0\1\u01dd\61\0\1\u01f2\44\0"+
    "\1\u01f3\70\0\1\u01f4\67\0\1\u01f5\45\0\1\70\64\0"+
    "\1\163\66\0\1\u01f6\46\0\1\u01b7\67\0\1\u017c\51\0"+
    "\1\123\15\0\1\u01f7\61\0\1\u01f8\51\0\1\117\66\0"+
    "\1\u01f9\63\0\1\57\65\0\1\174\64\0\1\u01c2\52\0"+
    "\1\u01fa\46\0\1\u01fb\4\0\1\u01fc\63\0\1\u01fd\50\0"+
    "\1\u01fe\104\0\1\u01ff\52\0\1\130\66\0\1\315\44\0"+
    "\1\u0200\55\0\1\u0201\76\0\1\u01cf\53\0\1\174\70\0"+
    "\1\u0202\64\0\1\u0203\50\0\1\u0204\64\0\1\u0205\67\0"+
    "\1\u0206\64\0\1\174\45\0\1\76\51\0\1\u0207\74\0"+
    "\1\u0208\53\0\1\u0199\64\0\1\262\72\0\1\u0209\54\0"+
    "\1\u020a\35\0\1\u01a6\7\0\1\u020b\61\0\1\163\77\0"+
    "\1\57\61\0\1\u020c\56\0\1\u020d\56\0\1\u020e\51\0"+
    "\1\362\71\0\1\u0150\72\0\1\u0171\40\0\1\u020f\61\0"+
    "\1\u011b\74\0\1\u0114\46\0\1\u0210\77\0\1\u0211\61\0"+
    "\1\u0212\53\0\1\u0213\54\0\1\u0214\2\0\1\u013f\76\0"+
    "\1\u0215\60\0\1\u0216\60\0\1\u0217\44\0\1\u0218\61\0"+
    "\1\u0219\65\0\1\u021a\51\0\1\362\23\0\1\143\53\0"+
    "\1\u021b\45\0\1\u021c\75\0\1\163\3\0\1\u01f3\62\0"+
    "\1\u021d\36\0\1\57\106\0\1\u021e\37\0\1\u021f\71\0"+
    "\1\u0220\64\0\1\u01c2\2\0\1\u0221\53\0\1\174\67\0"+
    "\1\163\63\0\1\u0222\46\0\1\u013f\55\0\1\u0223\76\0"+
    "\1\60\43\0\1\u0224\62\0\1\76\3\0\1\u016b\56\0"+
    "\1\u0225\71\0\1\u0226\4\0\1\u0227\43\0\1\u0228\76\0"+
    "\1\u0229\44\0\1\u022a\70\0\1\315\72\0\1\u022b\53\0"+
    "\1\u0194\3\0\1\u022c\60\0\1\u022d\42\0\1\315\74\0"+
    "\1\u022e\67\0\1\u021e\40\0\1\u0170\67\0\1\u022f\74\0"+
    "\1\u0161\45\0\1\76\71\0\1\u0230\44\0\1\60\110\0"+
    "\1\u0231\62\0\1\u0232\54\0\1\u01dd\34\0\1\u016a\3\0"+
    "\1\76\61\0\1\57\57\0\1\u0233\60\0\1\u0234\61\0"+
    "\1\u0235\60\0\1\u0236\74\0\1\u0237\1\0\1\u020a\44\0"+
    "\1\u011b\21\0\1\76\37\0\1\274\76\0\1\u0238\65\0"+
    "\1\u01cf\52\0\1\u0231\63\0\1\u0239\51\0\1\u023a\72\0"+
    "\1\u023b\65\0\1\u023c\42\0\1\u023d\74\0\1\u023e\54\0"+
    "\1\u023f\54\0\1\340\72\0\1\u0240\70\0\1\117\54\0"+
    "\1\117\66\0\1\340\36\0\1\u0241\71\0\1\u0242\57\0"+
    "\1\76\67\0\1\u0243\63\0\1\321\53\0\1\u0244\51\0"+
    "\1\u0245\61\0\1\u0246\61\0\1\u01bd\77\0\1\u0247\45\0"+
    "\1\u01d5\103\0\1\u0248\60\0\1\u0202\51\0\1\u0249\67\0"+
    "\1\117\50\0\1\u024a\51\0\1\u024b\77\0\1\u01f6\60\0"+
    "\1\u01a2\7\0\1\u01a2\55\0\1\u024c\43\0\1\u024d\66\0"+
    "\1\u01a2\75\0\1\u021b\52\0\1\u01ab\66\0\1\u024e\63\0"+
    "\1\143\54\0\1\353\57\0\1\u024f\57\0\1\u0250\67\0"+
    "\1\u0251\43\0\1\316\60\0\1\u01a2\67\0\1\u0252\61\0"+
    "\1\u0253\41\0\1\u0176\33\0\1\u01c2\35\0\1\u021b\63\0"+
    "\1\174\100\0\1\u01f1\54\0\1\u0170\61\0\1\76\57\0"+
    "\1\u0156\57\0\1\211\55\0\1\u0254\101\0\1\u01a2\61\0"+
    "\1\u0128\35\0\1\u0247\65\0\1\76\3\0\1\u0255\66\0"+
    "\1\u0256\44\0\1\u0257\76\0\1\u0229\52\0\1\u0258\75\0"+
    "\1\u0259\61\0\1\u025a\43\0\1\u025b\71\0\1\u025c\53\0"+
    "\1\u025d\76\0\1\u025e\36\0\1\u025f\64\0\1\u024f\60\0"+
    "\1\u0114\72\0\1\u0260\72\0\1\u019d\21\0\1\u0261\75\0"+
    "\1\u0128\74\0\1\u021e\72\0\1\u016a\60\0\1\316\46\0"+
    "\1\152\57\0\1\u0262\60\0\1\u0263\76\0\1\u0264\43\0"+
    "\1\u0189\101\0\1\u0218\60\0\1\u0265\62\0\1\60\52\0"+
    "\1\u0233\44\0\1\u0266\7\0\1\u0178\53\0\1\u023b\25\0"+
    "\1\u01dd\32\0\1\u0267\74\0\1\u0162\46\0\1\u0268\74\0"+
    "\1\60\60\0\1\362\56\0\1\341\72\0\1\u0269\30\0"+
    "\1\u026a\114\0\1\u022d\51\0\1\353\65\0\1\u026b\52\0"+
    "\1\110\74\0\1\u026c\40\0\1\u026d\73\0\1\332\67\0"+
    "\1\u026e\55\0\1\163\6\0\1\60\52\0\1\u026f\66\0"+
    "\1\143\57\0\1\57\63\0\1\u0270\65\0\1\u0145\1\117"+
    "\53\0\1\u0271\61\0\1\143\27\0\1\u0272\100\0\1\u0273"+
    "\56\0\1\321\72\0\1\u01d8\44\0\1\u0274\51\0\1\u0275"+
    "\74\0\1\u0276\62\0\1\u0277\77\0\1\u01c0\27\0\1\u0278"+
    "\14\0\1\245\6\0\1\u0279\46\0\1\u027a\104\0\1\u027b"+
    "\56\0\1\u027c\44\0\1\u027d\57\0\1\u027e\60\0\1\u027f"+
    "\101\0\1\u0280\64\0\1\u01ca\54\0\1\u0281\57\0\1\u0282"+
    "\53\0\1\u01cf\57\0\1\u0283\60\0\1\u0284\63\0\1\u0285"+
    "\55\0\1\u023b\44\0\1\u0286\104\0\1\u0287\72\0\1\u0288"+
    "\53\0\1\u0289\64\0\1\u028a\53\0\1\u028b\74\0\1\u028c"+
    "\46\0\1\u020a\54\0\1\76\16\0\1\76\67\0\1\u028d"+
    "\47\0\1\u0181\67\0\1\u028e\41\0\1\u028f\101\0\1\362"+
    "\56\0\1\u0290\56\0\1\332\30\0\1\u0291\111\0\1\u0292"+
    "\50\0\1\u0293\65\0\1\u0294\54\0\1\u0295\10\0\1\130"+
    "\60\0\1\u0170\52\0\1\76\3\0\1\u013f\53\0\1\262"+
    "\61\0\1\u0296\100\0\1\123\61\0\1\u0297\26\0\1\53"+
    "\101\0\1\u0298\70\0\1\u0299\66\0\1\u029a\43\0\1\u029b"+
    "\100\0\1\u029c\54\0\1\110\73\0\1\u0195\54\0\1\u0209"+
    "\61\0\1\u029d\51\0\1\u029e\72\0\1\u029f\25\0\1\u01fb"+
    "\105\0\1\u02a0\66\0\1\u01a2\44\0\1\u02a1\57\0\1\u02a2"+
    "\66\0\1\u02a3\52\0\1\u020b\33\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[32950];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\44\1\1\0\1\11\1\0"+
    "\1\1\4\0\1\1\3\0\1\1\7\0\1\11\50\0"+
    "\1\1\14\0\1\1\3\0\2\1\13\0\1\1\22\0"+
    "\1\1\20\0\3\1\1\0\1\1\44\0\1\1\4\0"+
    "\1\1\4\0\1\1\12\0\1\1\26\0\1\1\1\0"+
    "\1\1\44\0\1\1\5\0\1\1\14\0\1\1\2\0"+
    "\1\1\31\0\2\1\2\0\2\1\51\0\2\1\2\0"+
    "\1\1\6\0\1\1\14\0\1\1\25\0\1\1\34\0"+
    "\1\1\6\0\1\1\61\0\1\1\67\0\1\1\13\0"+
    "\1\1\2\0\1\1\4\0\1\1\4\0\1\1\2\0"+
    "\1\1\40\0\1\1\4\0\1\1\32\0\1\1\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[675];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SimpleLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 8: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 9: break;
          case 3:
            { yybegin(WAITING_VALUE); return SimpleTypes.SEPARATOR;
            }
          // fall through
          case 10: break;
          case 4:
            { yybegin(YYINITIAL); return SimpleTypes.VALUE;
            }
          // fall through
          case 11: break;
          case 5:
            { yybegin(YYINITIAL); return SimpleTypes.KEY;
            }
          // fall through
          case 12: break;
          case 6:
            { yybegin(YYINITIAL); return SimpleTypes.COMMENT;
            }
          // fall through
          case 13: break;
          case 7:
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
