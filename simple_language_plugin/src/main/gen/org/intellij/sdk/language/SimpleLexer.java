// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Simple.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.psi.SimpleTypes;
import com.intellij.psi.TokenType;


class SimpleLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\31\0\1\7\1\10\1\0\1\7\36\0\1\11\4\0"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\12\0\1\3\u01a2\0\2\3\326\0\u0100\44";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\2\5\25\1\1\5"+
    "\1\1\1\6\2\7\1\6\1\7\1\1\4\0\1\5"+
    "\3\0\1\5\7\0\1\5\47\0\1\5\13\0\1\5"+
    "\3\0\2\5\13\0\1\5\22\0\1\5\17\0\1\6"+
    "\1\2\1\6\42\0\1\5\4\0\1\5\4\0\1\5"+
    "\12\0\1\5\22\0\1\5\1\0\1\5\44\0\1\5"+
    "\5\0\1\5\14\0\1\5\2\0\1\5\27\0\1\5"+
    "\2\0\2\5\45\0\2\5\2\0\1\5\5\0\1\5"+
    "\11\0\1\5\25\0\1\5\33\0\1\5\5\0\1\5"+
    "\55\0\1\5\63\0\1\5\12\0\1\5\2\0\1\5"+
    "\4\0\1\5\4\0\1\5\35\0\1\5\3\0\1\5"+
    "\27\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[617];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\112\0\224\0\271\0\336"+
    "\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206"+
    "\0\u022b\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309\0\u032e"+
    "\0\u0353\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u0431\0\u0456"+
    "\0\u047b\0\157\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\u0534\0\u0559"+
    "\0\u057e\0\u05a3\0\u05c8\0\u05ed\0\u0612\0\u0637\0\u065c\0\u0681"+
    "\0\u06a6\0\u06cb\0\u06f0\0\u0715\0\u073a\0\112\0\u075f\0\u0784"+
    "\0\u07a9\0\u07ce\0\u07f3\0\u0818\0\u083d\0\u0862\0\u0887\0\u08ac"+
    "\0\u08d1\0\u08f6\0\u091b\0\u0940\0\u0965\0\u098a\0\u09af\0\u09d4"+
    "\0\u09f9\0\u0a1e\0\u0a43\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc"+
    "\0\u0b21\0\u0b46\0\u0b6b\0\u0b90\0\u0bb5\0\u0bda\0\u0bff\0\u0c24"+
    "\0\u0c49\0\u0c6e\0\u0c93\0\u0cb8\0\u0cdd\0\u0d02\0\u0d27\0\u0d4c"+
    "\0\u0d71\0\u0d96\0\u0dbb\0\u0de0\0\u0e05\0\u0e2a\0\u0e4f\0\u0e74"+
    "\0\u0e99\0\u0ebe\0\u0ee3\0\u0f08\0\u0f2d\0\u0f52\0\u0f77\0\u0f9c"+
    "\0\u0fc1\0\u0fe6\0\u100b\0\u1030\0\u1055\0\u107a\0\u109f\0\u10c4"+
    "\0\u10e9\0\u110e\0\u1133\0\u1158\0\u117d\0\u11a2\0\u11c7\0\u11ec"+
    "\0\u1211\0\u1236\0\u125b\0\u1280\0\u12a5\0\u12ca\0\u12ef\0\u1314"+
    "\0\u1339\0\u135e\0\u1383\0\u13a8\0\u13cd\0\u13f2\0\u1417\0\u143c"+
    "\0\u1461\0\u1486\0\u14ab\0\u14d0\0\u14f5\0\u151a\0\u153f\0\u1564"+
    "\0\u1589\0\u15ae\0\u15d3\0\u15f8\0\u04ea\0\u161d\0\u04a0\0\u1642"+
    "\0\u1667\0\u168c\0\u16b1\0\u16d6\0\u16fb\0\u1720\0\u1745\0\u176a"+
    "\0\u178f\0\u17b4\0\u17d9\0\u17fe\0\u1823\0\u1848\0\u186d\0\u1892"+
    "\0\u18b7\0\u18dc\0\u1901\0\u1926\0\u194b\0\u1970\0\u1995\0\u19ba"+
    "\0\u19df\0\u1a04\0\u1a29\0\u1a4e\0\u1a73\0\u1a98\0\u1abd\0\u1ae2"+
    "\0\u1b07\0\u1b2c\0\u1b51\0\u1b76\0\u1b9b\0\u1bc0\0\u1be5\0\u1c0a"+
    "\0\u1c2f\0\u1c54\0\u1c79\0\u1c9e\0\u1cc3\0\u1ce8\0\u1d0d\0\u1d32"+
    "\0\u1d57\0\u1d7c\0\u1da1\0\u1dc6\0\u1deb\0\u1e10\0\u1e35\0\u1e5a"+
    "\0\u1e7f\0\u1ea4\0\u1ec9\0\u1eee\0\u1f13\0\u1f38\0\u1f5d\0\u1f82"+
    "\0\u1fa7\0\u1fcc\0\u1ff1\0\u2016\0\u203b\0\u2060\0\u2085\0\u20aa"+
    "\0\u20cf\0\u20f4\0\u2119\0\u213e\0\u2163\0\u2188\0\u21ad\0\u21d2"+
    "\0\u21f7\0\u221c\0\u2241\0\u2266\0\u228b\0\u22b0\0\u22d5\0\u22fa"+
    "\0\u231f\0\u2344\0\u2369\0\u238e\0\u23b3\0\u23d8\0\u23fd\0\u2422"+
    "\0\u2447\0\u246c\0\u2491\0\u24b6\0\u24db\0\u2500\0\u2525\0\u254a"+
    "\0\u256f\0\u2594\0\u25b9\0\u25de\0\u2603\0\u2628\0\u264d\0\u2672"+
    "\0\u2697\0\u26bc\0\u26e1\0\u2706\0\u272b\0\u2750\0\u2775\0\u2706"+
    "\0\u279a\0\u27bf\0\u27e4\0\u2809\0\u282e\0\u2853\0\u2878\0\u289d"+
    "\0\u28c2\0\u28e7\0\u290c\0\u2931\0\u2956\0\u297b\0\u29a0\0\u29c5"+
    "\0\u29ea\0\u2a0f\0\u2a34\0\u2a59\0\u2a7e\0\u2aa3\0\u2ac8\0\u2aed"+
    "\0\u2b12\0\u2b37\0\u2b5c\0\u2b81\0\u2ba6\0\u2bcb\0\u2bf0\0\u2c15"+
    "\0\u2c3a\0\u2c5f\0\u2c84\0\u2ca9\0\u2cce\0\u2cf3\0\u2d18\0\u2d3d"+
    "\0\u2d62\0\u2d87\0\u2dac\0\u2dd1\0\u2df6\0\u2e1b\0\u2e40\0\u2e65"+
    "\0\u2e8a\0\u2eaf\0\u2ed4\0\u2ef9\0\u2f1e\0\u2f43\0\u2f68\0\u2f8d"+
    "\0\u2fb2\0\u2fd7\0\u2ffc\0\u3021\0\u3046\0\u306b\0\u3090\0\u30b5"+
    "\0\u30da\0\u30ff\0\u3124\0\u3149\0\u316e\0\u3193\0\u31b8\0\u31dd"+
    "\0\u3202\0\u0f52\0\u3227\0\u1c0a\0\u324c\0\u3271\0\u3296\0\u32bb"+
    "\0\u32e0\0\u3305\0\u332a\0\u334f\0\u3374\0\u3399\0\u33be\0\u33e3"+
    "\0\u3408\0\u342d\0\u3452\0\u3477\0\u349c\0\u34c1\0\u34e6\0\u350b"+
    "\0\u3530\0\u3555\0\u357a\0\u359f\0\u35c4\0\u35e9\0\u360e\0\u3633"+
    "\0\u3658\0\u367d\0\u36a2\0\u36c7\0\u36ec\0\u3711\0\u3736\0\u375b"+
    "\0\u3780\0\u37a5\0\u37ca\0\u37ef\0\u3814\0\u3839\0\u385e\0\u3883"+
    "\0\u38a8\0\u38cd\0\u38f2\0\u3917\0\u393c\0\u3961\0\u3986\0\u39ab"+
    "\0\u39d0\0\u39f5\0\u3a1a\0\u3a3f\0\u3a64\0\u3a89\0\u3aae\0\u3ad3"+
    "\0\u3af8\0\u3b1d\0\u3b42\0\u3b67\0\u3b8c\0\u3bb1\0\u3bd6\0\u3bfb"+
    "\0\u3c20\0\u3c45\0\u3c6a\0\u3c8f\0\u3cb4\0\u3cd9\0\u3cfe\0\u0c6e"+
    "\0\u3d23\0\u3d48\0\u3d6d\0\u3d92\0\u3db7\0\u3193\0\u3ddc\0\u3e01"+
    "\0\u3e26\0\u3e4b\0\u3e70\0\u3e95\0\u3eba\0\u3edf\0\u3f04\0\u3f29"+
    "\0\u3f4e\0\u3f73\0\u3f98\0\u3fbd\0\u3fe2\0\u4007\0\u402c\0\u4051"+
    "\0\u4076\0\u409b\0\u40c0\0\u40e5\0\u410a\0\u412f\0\u4154\0\u4179"+
    "\0\u419e\0\u41c3\0\u41e8\0\u420d\0\u4232\0\u4257\0\u427c\0\u42a1"+
    "\0\u42c6\0\u42eb\0\u4310\0\u4335\0\u435a\0\u437f\0\u43a4\0\u43c9"+
    "\0\u43ee\0\u4413\0\u4438\0\u445d\0\u4482\0\u44a7\0\u44cc\0\u44f1"+
    "\0\u4516\0\u453b\0\u4560\0\u4585\0\u45aa\0\u45cf\0\u45f4\0\u4619"+
    "\0\u463e\0\u4663\0\u4688\0\u46ad\0\u46d2\0\u46f7\0\u471c\0\u4741"+
    "\0\u4766\0\u478b\0\u47b0\0\u47d5\0\u47fa\0\u481f\0\u4844\0\u4869"+
    "\0\u488e\0\u48b3\0\u48d8\0\u48fd\0\u4922\0\u4947\0\u496c\0\u4991"+
    "\0\u49b6\0\u49db\0\u4a00\0\u4a25\0\u4a4a\0\u4a6f\0\u4a94\0\u4ab9"+
    "\0\u4ade\0\u4b03\0\u4b28\0\u4b4d\0\u4b72\0\u4b97\0\u4bbc\0\u4be1"+
    "\0\u4c06\0\u4c2b\0\u4c50\0\u4c75\0\u4c9a\0\u4cbf\0\u4ce4\0\u4d09"+
    "\0\u4d2e\0\u4d53\0\u4d78\0\u4d9d\0\u4dc2\0\u3e95\0\u4de7\0\u4e0c"+
    "\0\u4e31\0\u4e56\0\u0534\0\u4e7b\0\u4ea0\0\u4ec5\0\u4eea\0\u4f0f"+
    "\0\u4f34\0\u4f59\0\u4f7e\0\u4fa3\0\u4fc8\0\u4fed\0\u5012\0\u5037"+
    "\0\u505c\0\u5081\0\u50a6\0\u50cb\0\u50f0\0\u5115\0\u513a\0\u515f"+
    "\0\u5184\0\u51a9\0\u51ce\0\u51f3\0\u5218\0\u523d\0\u5262\0\u5287"+
    "\0\u52ac\0\u52d1\0\u52f6\0\u531b\0\u5340\0\u5365\0\u538a\0\u53af"+
    "\0\u53d4\0\u36c7\0\u53f9\0\u541e\0\u5443\0\u5468\0\u548d\0\u54b2"+
    "\0\u54d7\0\u54fc\0\u5521\0\u5546\0\u556b\0\u5590\0\u55b5\0\u55da"+
    "\0\u55ff\0\u5624\0\u5649\0\u566e\0\u5693\0\u56b8\0\u56dd\0\u5702"+
    "\0\u35e9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[617];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\6\4\1\5\1\6\1\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\3\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\3"+
    "\1\40\1\41\1\42\1\43\1\42\1\43\1\44\2\40"+
    "\1\45\33\40\46\0\6\4\36\0\2\6\1\0\2\6"+
    "\1\0\37\6\14\0\1\46\1\47\2\0\1\50\4\0"+
    "\1\51\1\0\1\52\1\0\1\53\1\0\1\54\1\55"+
    "\1\56\1\57\2\0\1\60\15\0\1\61\3\0\1\62"+
    "\3\0\1\63\5\0\1\64\2\0\1\65\6\0\1\66"+
    "\14\0\1\67\3\0\1\70\2\0\1\71\1\72\2\0"+
    "\1\73\1\74\1\0\1\75\1\76\1\0\1\77\1\0"+
    "\1\100\1\101\3\0\1\102\14\0\1\103\3\0\1\104"+
    "\3\0\1\105\5\0\1\106\2\0\1\107\2\0\1\110"+
    "\22\0\1\111\2\0\1\112\5\0\1\113\1\0\1\114"+
    "\2\0\1\115\1\116\2\0\1\117\1\120\1\0\1\121"+
    "\15\0\1\122\7\0\1\123\2\0\1\124\2\0\1\125"+
    "\2\0\1\126\2\0\1\127\24\0\1\130\7\0\1\66"+
    "\4\0\1\131\23\0\1\132\3\0\1\133\3\0\1\134"+
    "\37\0\1\66\1\0\1\66\6\0\1\135\1\136\4\0"+
    "\1\66\33\0\1\66\50\0\1\66\3\0\1\137\1\66"+
    "\22\0\1\140\7\0\1\141\5\0\1\142\26\0\1\143"+
    "\3\0\1\144\3\0\1\145\5\0\1\146\5\0\1\147"+
    "\23\0\1\66\1\150\6\0\1\66\1\0\1\151\1\152"+
    "\1\66\4\0\1\153\21\0\1\154\1\155\2\0\1\156"+
    "\7\0\1\66\3\0\1\157\2\0\1\160\20\0\1\161"+
    "\1\0\1\162\1\0\1\163\2\0\1\164\1\165\2\0"+
    "\1\166\2\0\1\167\2\0\1\170\2\0\1\171\20\0"+
    "\1\172\1\173\1\66\1\0\1\174\1\0\1\175\7\0"+
    "\1\176\3\0\1\66\22\0\1\177\1\0\1\200\1\201"+
    "\1\202\2\0\1\203\3\0\1\204\2\0\1\205\1\206"+
    "\3\0\1\207\1\210\3\0\1\211\14\0\1\212\3\0"+
    "\1\213\2\0\1\214\1\215\2\0\1\66\2\0\1\216"+
    "\2\0\1\217\6\0\1\220\31\0\1\221\1\0\1\222"+
    "\31\0\1\223\3\0\1\224\3\0\1\225\2\0\1\66"+
    "\25\0\1\226\6\0\1\227\1\230\36\0\1\62\1\231"+
    "\1\0\1\232\16\0\1\233\23\0\1\231\1\0\1\232"+
    "\43\0\1\234\26\0\2\40\1\0\1\40\1\0\4\40"+
    "\1\235\34\40\1\41\1\44\1\236\1\44\1\236\1\41"+
    "\2\40\1\235\34\40\1\237\1\4\1\237\1\4\2\237"+
    "\2\40\1\235\33\40\1\0\2\44\1\4\1\44\1\4"+
    "\1\44\36\0\5\40\1\240\36\40\22\0\1\241\13\0"+
    "\1\242\24\0\1\66\45\0\1\66\50\0\1\243\2\0"+
    "\1\66\12\0\1\244\21\0\1\66\2\0\1\245\55\0"+
    "\1\246\25\0\1\247\3\0\1\66\14\0\1\250\45\0"+
    "\1\251\45\0\1\252\44\0\1\253\31\0\1\132\47\0"+
    "\1\254\6\0\1\50\26\0\1\151\55\0\1\66\5\0"+
    "\1\255\36\0\1\47\11\0\1\66\21\0\1\256\3\0"+
    "\1\257\5\0\1\260\41\0\1\261\3\0\1\66\2\0"+
    "\1\262\35\0\1\263\1\0\1\264\53\0\1\265\41\0"+
    "\1\266\27\0\1\267\11\0\1\270\5\0\1\103\20\0"+
    "\1\162\60\0\1\271\1\272\1\273\30\0\1\274\42\0"+
    "\1\275\3\0\1\276\61\0\1\66\24\0\1\277\21\0"+
    "\1\66\23\0\1\300\10\0\1\301\45\0\1\302\35\0"+
    "\1\303\5\0\1\304\1\0\1\305\4\0\1\306\22\0"+
    "\1\307\13\0\1\132\4\0\1\310\1\311\36\0\1\312"+
    "\60\0\1\66\35\0\1\313\32\0\1\274\42\0\1\314"+
    "\61\0\1\50\25\0\1\315\1\316\64\0\1\317\36\0"+
    "\1\320\41\0\1\321\35\0\1\322\50\0\1\162\6\0"+
    "\1\323\3\0\1\120\31\0\1\324\2\0\1\113\44\0"+
    "\1\325\6\0\1\326\4\0\1\66\15\0\1\327\65\0"+
    "\1\330\23\0\1\331\3\0\1\50\3\0\1\332\5\0"+
    "\1\333\41\0\1\334\1\0\1\332\44\0\1\335\1\336"+
    "\26\0\1\337\15\0\1\340\50\0\1\66\32\0\1\341"+
    "\47\0\1\254\6\0\1\342\41\0\1\343\34\0\1\344"+
    "\1\345\11\0\1\346\1\347\21\0\1\247\66\0\1\162"+
    "\26\0\1\350\10\0\1\351\4\0\1\162\22\0\1\47"+
    "\1\0\1\352\3\0\1\353\7\0\1\302\40\0\1\50"+
    "\10\0\1\354\3\0\1\355\15\0\1\356\1\0\1\357"+
    "\1\360\17\0\1\361\23\0\1\362\1\363\44\0\1\364"+
    "\54\0\1\365\31\0\1\100\25\0\1\66\33\0\1\66"+
    "\50\0\1\366\1\0\1\66\34\0\1\254\1\367\53\0"+
    "\1\370\23\0\1\371\47\0\1\66\47\0\1\372\6\0"+
    "\1\373\50\0\1\374\23\0\1\375\21\0\1\113\43\0"+
    "\1\66\22\0\1\376\17\0\1\377\23\0\1\113\27\0"+
    "\1\u0100\33\0\1\u0101\25\0\1\u0102\15\0\1\162\36\0"+
    "\1\322\2\0\1\u0103\5\0\1\u0104\1\u0105\26\0\1\u0106"+
    "\11\0\1\u0107\47\0\1\u0108\26\0\1\u0109\11\0\1\u010a"+
    "\5\0\1\u010b\34\0\1\u010c\37\0\1\u010d\4\0\1\u010e"+
    "\1\u010f\5\0\1\u0110\1\u0111\21\0\1\302\67\0\1\u0112"+
    "\46\0\1\50\17\0\1\245\50\0\1\u0113\40\0\1\u0114"+
    "\1\0\1\u0115\3\0\1\u0116\12\0\1\u0117\1\0\1\u0118"+
    "\21\0\1\u0119\3\0\1\u011a\56\0\1\162\41\0\1\177"+
    "\40\0\1\u011b\1\151\10\0\1\u011c\23\0\1\u011d\3\0"+
    "\1\302\3\0\1\u011e\5\0\1\302\2\0\1\u011f\25\0"+
    "\1\u0120\14\0\1\u0121\47\0\1\u0122\23\0\1\245\57\0"+
    "\1\u0123\1\u0124\33\0\1\u0125\14\0\1\u0126\2\0\1\132"+
    "\34\0\1\u0127\6\0\1\245\34\0\1\u0128\55\0\1\u0129"+
    "\37\0\1\u012a\26\0\1\u012b\6\0\1\u012c\12\0\1\u012d"+
    "\24\0\1\u012e\54\0\1\u012f\5\0\1\u0130\23\0\1\66"+
    "\3\0\1\u0131\40\0\1\u0132\57\0\1\u0133\6\0\1\66"+
    "\26\0\1\151\3\0\1\u0134\57\0\1\u0135\31\0\1\u0136"+
    "\52\0\1\u0137\26\0\1\u0138\65\0\1\274\11\0\1\40"+
    "\1\236\1\4\1\236\1\4\2\236\2\40\1\235\37\40"+
    "\1\0\4\40\1\235\33\40\22\0\1\u0139\44\0\1\u013a"+
    "\42\0\1\u013b\36\0\1\u013c\57\0\1\50\44\0\1\u013d"+
    "\54\0\1\u010b\21\0\1\107\50\0\1\u013e\61\0\1\u013f"+
    "\41\0\1\u0140\41\0\1\66\45\0\1\175\30\0\1\u0141"+
    "\46\0\1\u0142\54\0\1\62\45\0\1\u0143\1\66\34\0"+
    "\1\u0144\50\0\1\u0145\57\0\1\u0146\43\0\1\u0147\24\0"+
    "\1\u0148\42\0\1\u0149\46\0\1\u0142\12\0\1\50\43\0"+
    "\1\u014a\2\0\1\u014b\30\0\1\u014c\1\0\1\u014d\14\0"+
    "\1\u014e\1\u014f\42\0\1\u0150\41\0\1\66\30\0\1\u0151"+
    "\42\0\1\u0152\54\0\1\u0153\47\0\1\u012a\41\0\1\u0154"+
    "\53\0\1\66\25\0\1\u0155\7\0\1\u0156\5\0\1\u0157"+
    "\32\0\1\u0152\62\0\1\u0158\32\0\1\u0159\12\0\1\u015a"+
    "\35\0\1\u015b\34\0\1\332\57\0\1\u015c\3\0\1\u015d"+
    "\21\0\1\u015e\54\0\1\u015f\40\0\1\u0160\42\0\1\u0161"+
    "\5\0\1\u0162\2\0\1\u0163\6\0\1\u0164\43\0\1\u0165"+
    "\33\0\1\u0166\37\0\1\50\45\0\1\100\55\0\1\162"+
    "\27\0\1\u0167\15\0\1\u0168\41\0\1\u0169\35\0\1\u016a"+
    "\47\0\1\u016b\60\0\1\u016c\25\0\1\u016d\42\0\1\u016e"+
    "\3\0\1\u016f\40\0\1\u0115\56\0\1\66\14\0\1\62"+
    "\26\0\1\107\35\0\1\u0170\54\0\1\u0171\40\0\1\u0172"+
    "\14\0\1\u0158\43\0\1\302\26\0\1\u0173\61\0\1\u0174"+
    "\37\0\1\u0168\32\0\1\u0175\63\0\1\u0176\31\0\1\320"+
    "\40\0\1\u0177\11\0\1\66\55\0\1\u0178\21\0\1\u0179"+
    "\40\0\1\u017a\51\0\1\u017b\43\0\1\u017c\50\0\1\u017d"+
    "\51\0\1\66\4\0\1\u0169\31\0\1\u017e\45\0\1\u017f"+
    "\43\0\1\u0180\56\0\1\u0181\26\0\1\245\45\0\1\254"+
    "\17\0\1\u0182\43\0\1\u0183\35\0\1\u0184\31\0\1\321"+
    "\43\0\1\u0185\70\0\1\u0186\26\0\1\u015e\45\0\1\u0187"+
    "\41\0\1\100\15\0\1\346\34\0\1\u0188\33\0\1\u0189"+
    "\1\u018a\47\0\1\u018b\2\0\1\u018c\56\0\1\u018d\26\0"+
    "\1\132\55\0\1\50\5\0\1\62\51\0\1\u018e\32\0"+
    "\1\305\36\0\1\u018f\56\0\1\u0190\30\0\1\u0191\2\0"+
    "\1\u0192\5\0\1\u0193\7\0\1\u0194\23\0\1\50\46\0"+
    "\1\u0195\37\0\1\u0196\2\0\1\50\46\0\1\274\52\0"+
    "\1\257\36\0\1\u0197\34\0\1\u0198\15\0\1\u0199\44\0"+
    "\1\u019a\36\0\1\u019b\5\0\1\u019c\4\0\1\u019d\1\u019e"+
    "\44\0\1\u019f\20\0\1\u01a0\71\0\1\66\42\0\1\313"+
    "\44\0\1\u01a1\35\0\1\u01a2\55\0\1\274\36\0\1\50"+
    "\25\0\1\100\50\0\1\u01a3\44\0\1\u0199\46\0\1\50"+
    "\6\0\1\u01a4\3\0\1\162\1\0\1\u01a5\26\0\1\u01a6"+
    "\37\0\1\u015e\3\0\1\u01a7\42\0\1\u01a8\61\0\1\u01a9"+
    "\50\0\1\u01aa\40\0\1\u01ab\47\0\1\u017b\32\0\1\100"+
    "\4\0\1\66\45\0\1\u01ac\32\0\1\u01ad\44\0\1\u01ae"+
    "\44\0\1\66\10\0\1\u01af\33\0\1\u01b0\56\0\1\u01b1"+
    "\44\0\1\151\36\0\1\254\34\0\1\u01b2\62\0\1\u01b3"+
    "\51\0\1\u01b4\47\0\1\66\45\0\1\66\30\0\1\u01b0"+
    "\33\0\1\u01b5\10\0\1\50\40\0\1\u01b6\57\0\1\u01b7"+
    "\43\0\1\u01b8\40\0\1\u01b9\33\0\1\u01ba\65\0\1\u01bb"+
    "\34\0\1\u01bc\57\0\1\132\24\0\1\u01bd\50\0\1\u01be"+
    "\40\0\1\u01bf\50\0\1\u01c0\42\0\1\u01c1\44\0\1\66"+
    "\33\0\1\u01c2\2\0\1\47\56\0\1\u0162\26\0\1\u01c3"+
    "\50\0\1\u01c4\50\0\1\u01c5\47\0\1\50\10\0\1\u01c6"+
    "\35\0\1\66\3\0\1\66\23\0\1\u0167\65\0\1\u01c7"+
    "\2\0\1\u0152\30\0\1\u0115\44\0\1\u01c8\57\0\1\u01c9"+
    "\21\0\1\u01ca\7\0\1\u01cb\37\0\1\u01cc\53\0\1\u01b0"+
    "\55\0\1\50\23\0\1\66\57\0\1\u01cd\53\0\1\u019e"+
    "\35\0\1\50\50\0\1\u01ce\33\0\1\u01cf\55\0\1\u01bc"+
    "\44\0\1\u01d0\27\0\1\u01d1\53\0\1\u01d2\52\0\1\u01d3"+
    "\33\0\1\151\51\0\1\u01d4\31\0\1\u0198\42\0\1\113"+
    "\15\0\1\u01d5\44\0\1\u01d6\34\0\1\107\51\0\1\u01d7"+
    "\46\0\1\47\50\0\1\162\47\0\1\u01a3\35\0\1\u01d8"+
    "\31\0\1\u01d9\4\0\1\u01da\46\0\1\u01db\33\0\1\u01dc"+
    "\67\0\1\u01dd\35\0\1\120\51\0\1\276\27\0\1\u01de"+
    "\55\0\1\u01b0\36\0\1\162\53\0\1\u01df\47\0\1\u01e0"+
    "\33\0\1\u01e1\55\0\1\u01e2\33\0\1\66\34\0\1\u01e3"+
    "\57\0\1\u01e4\41\0\1\245\55\0\1\u01e5\37\0\1\u01e6"+
    "\30\0\1\u01e7\44\0\1\151\62\0\1\47\44\0\1\u01e8"+
    "\41\0\1\u01e9\41\0\1\u01ea\34\0\1\254\54\0\1\u013b"+
    "\55\0\1\u0159\23\0\1\u01eb\44\0\1\u0108\57\0\1\u0101"+
    "\31\0\1\u01ec\62\0\1\u01ed\44\0\1\u01ee\36\0\1\u01ef"+
    "\37\0\1\u01f0\2\0\1\u012c\61\0\1\u01f1\43\0\1\u0169"+
    "\43\0\1\u01f2\27\0\1\u01f3\44\0\1\u01f4\50\0\1\u01f5"+
    "\34\0\1\254\23\0\1\132\36\0\1\u01f6\44\0\1\151"+
    "\3\0\1\u01d1\45\0\1\u01f7\21\0\1\47\71\0\1\u01f8"+
    "\22\0\1\u01f9\54\0\1\u01fa\47\0\1\u01a3\2\0\1\u01fb"+
    "\36\0\1\162\52\0\1\151\46\0\1\u01fc\31\0\1\u012c"+
    "\40\0\1\u01fd\61\0\1\50\26\0\1\u01fe\45\0\1\66"+
    "\3\0\1\u0153\41\0\1\u01ff\54\0\1\u0200\4\0\1\u0201"+
    "\26\0\1\u0202\61\0\1\u0203\27\0\1\u01f6\53\0\1\276"+
    "\55\0\1\u0204\36\0\1\u0205\3\0\1\u0206\43\0\1\u0207"+
    "\25\0\1\276\57\0\1\u0208\52\0\1\u01f8\23\0\1\u0158"+
    "\52\0\1\u0209\43\0\1\66\54\0\1\u020a\27\0\1\50"+
    "\73\0\1\u020b\40\0\1\u01bc\17\0\1\u0152\3\0\1\66"+
    "\44\0\1\47\42\0\1\u020c\43\0\1\u020d\44\0\1\u020e"+
    "\43\0\1\u020f\44\0\1\u0108\21\0\1\66\22\0\1\257"+
    "\61\0\1\u0210\50\0\1\u01b0\35\0\1\u020b\46\0\1\u0211"+
    "\34\0\1\u0212\55\0\1\u0213\50\0\1\u0214\25\0\1\u0215"+
    "\57\0\1\u0216\37\0\1\u0217\37\0\1\321\55\0\1\u0218"+
    "\53\0\1\107\37\0\1\107\51\0\1\321\21\0\1\u0219"+
    "\54\0\1\u021a\42\0\1\66\52\0\1\u021b\46\0\1\302"+
    "\36\0\1\u021c\34\0\1\u021d\44\0\1\u021e\44\0\1\u019e"+
    "\62\0\1\u021f\30\0\1\u01b5\66\0\1\u0220\43\0\1\u01df"+
    "\42\0\1\107\33\0\1\u0221\34\0\1\u0222\61\0\1\u0184"+
    "\7\0\1\u0184\40\0\1\u0223\26\0\1\u0224\51\0\1\u0184"+
    "\60\0\1\u01f6\35\0\1\u018d\51\0\1\u0225\46\0\1\132"+
    "\37\0\1\334\42\0\1\u0226\42\0\1\u0227\52\0\1\u0228"+
    "\26\0\1\277\43\0\1\u0184\52\0\1\u0229\44\0\1\u022a"+
    "\34\0\1\u01f6\46\0\1\162\63\0\1\u01cf\37\0\1\u0158"+
    "\44\0\1\66\40\0\1\177\40\0\1\u022b\64\0\1\u0184"+
    "\44\0\1\u0115\20\0\1\u021f\50\0\1\66\3\0\1\u022c"+
    "\51\0\1\u022d\27\0\1\u022e\61\0\1\u0203\35\0\1\u022f"+
    "\60\0\1\u0230\44\0\1\u0231\26\0\1\u0232\46\0\1\u0233"+
    "\62\0\1\162\43\0\1\u0234\21\0\1\u0235\47\0\1\u0226"+
    "\43\0\1\u0101\55\0\1\u0236\55\0\1\u017f\20\0\1\u0115"+
    "\57\0\1\u01f8\55\0\1\u0152\43\0\1\277\27\0\1\u0237"+
    "\43\0\1\u0238\61\0\1\u0239\26\0\1\u016f\64\0\1\u01f3"+
    "\43\0\1\u023a\45\0\1\50\35\0\1\u020c\27\0\1\u023b"+
    "\7\0\1\u015f\36\0\1\u0213\25\0\1\u01bc\15\0\1\u023c"+
    "\57\0\1\u014a\31\0\1\u023d\57\0\1\50\43\0\1\254"+
    "\41\0\1\322\55\0\1\u023e\46\0\1\u0207\34\0\1\334"+
    "\50\0\1\u023f\35\0\1\100\57\0\1\u0240\23\0\1\u0241"+
    "\56\0\1\313\52\0\1\u0242\40\0\1\151\6\0\1\50"+
    "\35\0\1\u0243\51\0\1\132\42\0\1\47\46\0\1\u0244"+
    "\50\0\1\u0132\1\107\36\0\1\u0245\44\0\1\132\31\0"+
    "\1\u0246\41\0\1\302\55\0\1\u01b8\27\0\1\u0247\47\0"+
    "\1\u0248\45\0\1\u0249\62\0\1\u01a1\27\0\1\232\6\0"+
    "\1\u024a\31\0\1\u024b\67\0\1\u024c\41\0\1\u024d\27\0"+
    "\1\u024e\41\0\1\u024f\64\0\1\u0250\47\0\1\u01ab\37\0"+
    "\1\u0251\42\0\1\u0252\36\0\1\u01b0\42\0\1\u0253\45\0"+
    "\1\u0254\40\0\1\u0213\52\0\1\u0255\55\0\1\u0256\41\0"+
    "\1\u0257\36\0\1\u0258\57\0\1\u0259\31\0\1\u01e6\37\0"+
    "\1\66\16\0\1\66\40\0\1\u0167\52\0\1\u025a\24\0"+
    "\1\u025b\64\0\1\254\36\0\1\313\43\0\1\u025c\33\0"+
    "\1\u025d\43\0\1\u025e\10\0\1\120\43\0\1\u0158\35\0"+
    "\1\66\3\0\1\u012c\36\0\1\u025f\63\0\1\113\31\0"+
    "\1\u0260\53\0\1\u0261\33\0\1\u0262\63\0\1\u0263\51\0"+
    "\1\u0178\37\0\1\u01e5\34\0\1\u0264\55\0\1\u0265\34\0"+
    "\1\u0266\51\0\1\u0184\27\0\1\u0267\42\0\1\u0268\51\0"+
    "\1\u0269\23\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[22311];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\40\1\4\0\1\1\3\0"+
    "\1\1\7\0\1\11\47\0\1\1\13\0\1\1\3\0"+
    "\2\1\13\0\1\1\22\0\1\1\17\0\3\1\42\0"+
    "\1\1\4\0\1\1\4\0\1\1\12\0\1\1\22\0"+
    "\1\1\1\0\1\1\44\0\1\1\5\0\1\1\14\0"+
    "\1\1\2\0\1\1\27\0\1\1\2\0\2\1\45\0"+
    "\2\1\2\0\1\1\5\0\1\1\11\0\1\1\25\0"+
    "\1\1\33\0\1\1\5\0\1\1\55\0\1\1\63\0"+
    "\1\1\12\0\1\1\2\0\1\1\4\0\1\1\4\0"+
    "\1\1\35\0\1\1\3\0\1\1\27\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[617];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SimpleLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 8: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 9: break;
          case 3:
            { yybegin(WAITING_VALUE); return SimpleTypes.SEPARATOR;
            }
          // fall through
          case 10: break;
          case 4:
            { yybegin(YYINITIAL); return SimpleTypes.COMMENT;
            }
          // fall through
          case 11: break;
          case 5:
            { yybegin(YYINITIAL); return SimpleTypes.KEY;
            }
          // fall through
          case 12: break;
          case 6:
            { yybegin(YYINITIAL); return SimpleTypes.VALUE;
            }
          // fall through
          case 13: break;
          case 7:
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
